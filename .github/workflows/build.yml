name: Build project

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop, master, increment/*, release/* ]
  workflow_dispatch:

jobs:
  build:
    name: ‚è≥ Build, test and deploy artifacts
    runs-on: judong
    timeout-minutes: 30
    env:
      SIGN_KEY_ID: ${{ secrets.GPG_KEYNAME }}
      SIGN_KEY_PASS: ${{ secrets.GPG_PASSPHRASE }}
      SIGN_KEY: ${{ secrets.GPG_SECRET_KEYS }}
    if: ${{ github.event.pull_request.user.login != 'dependabot[bot]' }}
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: üõ†Ô∏è Project context
        id: context
        uses: zero88/gh-project-context@v1.2

      - name: üßπ Remove toolchains.xml
        run: rm $HOME/.m2/toolchains.xml || true

      - name: üõ†Ô∏è Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'


      - name: üî¢ Get the current PR number
        uses: jwalton/gh-find-current-pr@v1
        id: current-pr
        with:
          state: open

      - name: üßπ Remove settings.xml
        run: rm $HOME/.m2/settings.xml || true

      - name: üõ†Ô∏è Setup maven settings.xml
        uses: whelk-io/maven-settings-xml-action@v21
        with:
          servers: >
            [
                {
                    "id": "judong-nexus-mirror",
                    "username": "${{ secrets.JUDONG_NEXUS_USERNAME }}",
                    "password": "${{ secrets.JUDONG_NEXUS_PASSWORD }}"
                },
                {
                    "id": "judong-nexus-distribution",
                    "username": "${{ secrets.JUDONG_NEXUS_USERNAME }}",
                    "password": "${{ secrets.JUDONG_NEXUS_PASSWORD }}"
                },
                {
                    "id": "ossrh",
                    "username": "${{ secrets.SONATYPE_USERNAME }}",
                    "password": "${{ secrets.SONATYPE_PASSWORD }}"
                }
            ]
          mirrors: >
            [
                {
                    "id": "judong-nexus-mirror",
                    "mirrorOf": "*",
                    "url": "https://nexus.judo.technology/repository/maven-judong/"
                 }
            ]

      - name: üî¢ Calculate version number
        id: version
        run: |-
          POM_VERSION=$(./mvnw org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dtycho.mode=maven -DskipModules=true -Dexpression=project.version -q -DforceStdout)
          if [[ "${POM_VERSION}" == *-SNAPSHOT ]]; then
            BASE_VERSION=$(echo "${POM_VERSION}" | cut -d'-' -f 1)
          else
            BASE_VERSION=${POM_VERSION}
          fi
          if [[ "${{ github.base_ref }}" == "master" ]]; then
            VERSION_NUMBER=${BASE_VERSION}
          else
            TAG_NAME=$(echo "${{ steps.context.outputs.branch }}" | cut -d ' ' -f2 | tr '#\/\.-' '_')
            VERSION_NUMBER=${BASE_VERSION}.$(date +%Y%m%d_%H%M%S)_${{ steps.context.outputs.shortCommitId }}_${TAG_NAME//[(\)]}
          fi
          echo "Version from POM: ${POM_VERSION}"
          echo "Base version from POM: ${BASE_VERSION}"
          echo "Building version: ${VERSION_NUMBER}"
          echo "version=${VERSION_NUMBER}" >> $GITHUB_OUTPUT

##########################
# MAVEN BUILD START
##########################
      # Prepare version number
      - name: üöß Set project version
        run: |-
          ./mvnw -B -Dstyle.color=always \
          -DnewVersion=${{ steps.version.outputs.version }} \
          -DgenerateBackupPoms=false \
          -Dtycho.mode=maven \
          versions:set

      - name: üöß Set tycho version
        run: |-
          ./mvnw -B -Dstyle.color=always \
          -Dtycho.mode=maven  \
          tycho-versions:update-eclipse-metadata

      # Phase 1 - Build and deploy to judong nexus
      - name: üî• Build with Maven (build, test)
        run: |-
          ./mvnw -B -Dstyle.color=always \
          -Drevision=${{ steps.version.outputs.version }} \
          -Psign-artifacts \
          -Prelease-judong \
          deploy

      # Phase 2 - Build and deploy to maven central
      - name: üéÅ Deploy with Maven (central)
        if: ${{ always() && startsWith(github.head_ref, 'release') && job.status == 'success' }}
        run: |-
          ./mvnw -B -Dstyle.color=always \
          -Drevision=${{ steps.version.outputs.version }} \
          -DdeployOnly \
          -P"release-central,sign-artifacts,-verify-feature" \
          -Dmaven.test.skip=true \
          deploy

      # Phase 2 - Deploy to P2 - version
      - name: üéÅ Release P2 - version (parallel uoload)
        run: |-
          export BASE_URL=https://nexus.judo.technology/repository/p2-judong/judo-meta-jsl/${{ steps.version.outputs.version }}
          curl -X DELETE --insecure \
                                             --silent \
                                             --output /dev/null \
                                             --user "$USERNAME:$PASSWORD" \
                                             $BASE_URL
          export REPOSITORY_DIR=./site/target/repository
          export USERNAME=${{ secrets.JUDONG_NEXUS_USERNAME }}
          export PASSWORD=${{ secrets.JUDONG_NEXUS_PASSWORD }}
          export NUM_OF_PROC=6
          callUpload() {
            curl --write-out ' %{url_effective} Bytes: %{size_upload} Response code: %{http_code}\n' \
              --insecure \
              --silent \
              --output /dev/null \
              --user "$USERNAME:$PASSWORD" \
              --upload-file $REPOSITORY_DIR$1 $BASE_URL$1
          }
          export -f callUpload
          REP_DIR_LEN=`echo -n "$REPOSITORY_DIR" | wc -c`; REP_DIR_LEN=$(($REP_DIR_LEN + 1))
          find $REPOSITORY_DIR -type f -print0 | xargs -0 -I file echo "file" | cut -c$REP_DIR_LEN- | xargs -P $NUM_OF_PROC -I {} bash -c 'callUpload "$@"' _ {} 


      # Phase 2 - Deploy to P2 - develop
      - name: üéÅ Release P2 - develop (parallel uoload)
        if: ${{ always() &&
          (startsWith(github.head_ref, 'develop') || github.ref == 'refs/heads/develop') &&
          job.status == 'success' }}
        run: |-
          export BASE_URL=https://nexus.judo.technology/repository/p2-judong/judo-meta-jsl/develop
          curl -X DELETE --insecure \
                                             --silent \
                                             --output /dev/null \
                                             --user "$USERNAME:$PASSWORD" \
                                             $BASE_URL
          export REPOSITORY_DIR=./site/target/repository
          export USERNAME=${{ secrets.JUDONG_NEXUS_USERNAME }}
          export PASSWORD=${{ secrets.JUDONG_NEXUS_PASSWORD }}
          export NUM_OF_PROC=6
          callUpload() {
            curl --write-out ' %{url_effective} Bytes: %{size_upload} Response code: %{http_code}\n' \
              --insecure \
              --silent \
              --output /dev/null \
              --user "$USERNAME:$PASSWORD" \
              --upload-file $REPOSITORY_DIR$1 $BASE_URL$1
          }
          export -f callUpload
          REP_DIR_LEN=`echo -n "$REPOSITORY_DIR" | wc -c`; REP_DIR_LEN=$(($REP_DIR_LEN + 1))
          find $REPOSITORY_DIR -type f -print0 | xargs -0 -I file echo "file" | cut -c$REP_DIR_LEN- | xargs -P $NUM_OF_PROC -I {} bash -c 'callUpload "$@"' _ {} 


      - name: üîé Sonar Metrics
        if: steps.context.outputs.branch == 'develop'
        continue-on-error: true
        run: |-
          ./mvnw -B -Dstyle.color=always \
          -Dsonar.projectKey=judo-meta-jsl \
          -Dsonar.host.url=https://sonar.judo.technology \
          -Dsonar.login=${{ secrets.JUDO_SONAR_TOKEN }} \
          sonar:sonar

##########################
# MAVEN BUILD END
##########################

      - name: üìå Create version tag
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.OSS_PAT }}
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/v${{ steps.version.outputs.version }}',
              sha: context.sha
            })

      - name: üìå Tag to trigger PR merge on increment / release branch
        if: |-
          ${{ always() && 
          (startsWith(github.head_ref, 'increment') || startsWith(github.head_ref, 'release')) && 
          job.status == 'success' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.OSS_PAT }}
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/merge-pr/${{ steps.current-pr.outputs.pr }}',
              sha: context.sha
            })

      - name: üèóÔ∏è Build Changelog
        id: create_changelog
        uses: mikepenz/release-changelog-builder-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          toTag: v${{ steps.version.outputs.version }}
          configurationJson: |
            {
              "template": "#{{CHANGELOG}}\n\n<details>\n<summary>Uncategorized</summary>\n\n#{{UNCATEGORIZED}}\n</details>",
              "categories": [
                {
                  "title": "## üöÄ Features",
                  "labels": ["feature", "enhancement"]
                },
                {
                  "title": "## üêõ Fixes",
                  "labels": ["fix"]
                },
                {
                  "title": "## üß™ Tests",
                  "labels": ["test"]
                },
                {                
                  "title": "## üí¨ Other",
                  "labels": ["other"]
                },
                {
                  "title": "## üì¶ Dependencies",
                  "labels": ["dependencies"]
                }
              ]
            }

      - name: üìñ Create release
#        if: |-
#          ${{ always() &&
#          (startsWith(github.head_ref, 'develop') || github.ref == 'refs/heads/develop') &&
#          job.status == 'success' }}
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: v${{ steps.version.outputs.version }}
          tag: v${{ steps.version.outputs.version }}
          generateReleaseNotes: false
          body: |-
            Download
            ========

            This download site can be used for JUDO development.
            It contains installable packages in the following URL's. It can be added
            in JUDO Architect, Install new software... menu.

            The current version is accessible in

            https://nexus.judo.technology/repository/p2/judo-meta-jsl/${{ steps.version.outputs.version }}

            The latest version (nightly build) can be accessed in the following URL:
            
            https://nexus.judo.technology/repository/p2/judo-meta-jsl/develop

            **Changelog**
            
            ${{steps.create_changelog.outputs.changelog}}
          draft: false
          prerelease: true

      - name: üé§ Create message
        id: message
        if: ${{ always() }}
        run: |-
          if [ "${{ job.status }}" == "success" ]; then
            message=":white_check_mark: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            message="${message} Version: ${{ steps.version.outputs.version }}"
          fi
          if [ "${{ job.status }}" == "failure" ]; then
            message=":x: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"    
          fi
          if [ "${{ job.status }}" == "canceled" ]; then
            message=":x: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"    
          fi
          echo "message=${message}" >> $GITHUB_OUTPUT

      - name: üì¢ Send message to discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.JUDONG_DISCORD_WEBHOOK }}
          title: "Github action"
          description: "${{ steps.message.outputs.message }}"
