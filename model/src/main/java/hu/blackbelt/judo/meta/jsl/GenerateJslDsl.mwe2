module hu.blackbelt.judo.meta.jsl.GenerateJslDsl

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import hu.blackbelt.eclipse.emf.genmodel.generator.helper.*
import hu.blackbelt.eclipse.emf.genmodel.generator.builder.*
import hu.blackbelt.judo.eclipse.emf.genmodel.generator.runtimemodel.*

var rootPath = ".."
var modelDir = "model/model"
var javaGenPath = "model/src/main/xtext-gen"

Workflow {
	
    // Generate UI content assistant and validators
	component = XtextGenerator {
		configuration = {
			project = JslXtextProjectConfig {
			    mavenLayout = true
				baseName = "model"
				rootPath = rootPath
				runtime = {
					overwriteSrc = false
					enabled = false
				}
				runtimeTest = {
					overwriteSrc = false
					enabled = false
				}
								
				genericIde = {
					overwriteSrc = false
					enabled = false
				}
				
				eclipsePlugin = {
					overwriteSrc = false
					enabled = true
					name = "hu.blackbelt.judo.meta.jsl.ide.ui"
					root = "${rootPath}/ide/ui"
				}
				
				eclipsePluginTest = {
					overwriteSrc = false
					enabled = false
				}
				web = {
					overwriteSrc = true
					enabled = false
				}
			}
			code = {
				encoding = "UTF-8"
				lineDelimiter = "\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		// Customization of generator, see org.eclipse.xtext.xtext.generator.StandardLanguage class for standard elements
		language = XtextGeneratorLanguage {
			name = "hu.blackbelt.judo.meta.jsl.JslDsl"
			fileExtensions = "jsl"

            fragment = grammarAccess.GrammarAccessFragment2 auto-inject {}
            fragment = ecore.EMFGeneratorFragment2 auto-inject {}
            fragment = serializer.SerializerFragment2 auto-inject {
                generateStub = false
            }
            fragment = resourceFactory.ResourceFactoryFragment2 auto-inject {}
            fragment = parser.antlr.XtextAntlrGeneratorFragment2 auto-inject {
                options = { 
                    ignoreCase = false
                    classSplitting = true
                    fieldsPerClass = "20"
                    methodsPerClass = "50"
                }
            }
            fragment = validation.ValidatorFragment2 auto-inject {
				generatePropertyPage = true
            }
            fragment = builder.BuilderIntegrationFragment2 auto-inject {}
            fragment = generator.GeneratorFragment2 auto-inject {}
            fragment = ui.contentAssist.ContentAssistFragment2 auto-inject {}			           		

    
    		// scoping and exporting API
    		fragment = scoping.ImportNamespacesScopingFragment2 auto-inject {}
    		fragment = exporting.QualifiedNamesFragment2 auto-inject {}
    		fragment = builder.BuilderIntegrationFragment2 auto-inject {}
		}
	}	

	
	// Generate runtime
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
			    mavenLayout = true
				baseName = "model"
				rootPath = rootPath
				runtime = {
					enabled = true
				}
				runtimeTest = {
					enabled = false
				}
				eclipsePlugin = {
					enabled = false
				}
				eclipsePluginTest = {
					enabled = false
				}
				web = {
					enabled = false
				}
			}
			code = {
				encoding = "UTF-8"
				lineDelimiter = "\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = StandardLanguage {
			
			name = "hu.blackbelt.judo.meta.jsl.JslDsl"
			fileExtensions = "jsl"

            parserGenerator = {
                options = {
                    ignoreCase = false
                    classSplitting = true
                    fieldsPerClass = "20"
                    methodsPerClass = "50"
                }
                debugGrammar = true
            }
            
            scopeProvider = {
                ignoreCase = false
            }

			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				// Generates checks for @Deprecated grammar annotations, an IssueProvider and a corresponding PropertyPage
				generateDeprecationValidation = true
			}
			generator = {
				generateXtendStub = true
			}
			junitSupport = {
				junitVersion = "5"
			}
		}
	}
	
	
	// Helper for model
	component = HelperGeneratorWorkflow {
		modelDir = "${rootPath}/${modelDir}"
		javaGenPath = "${rootPath}/${javaGenPath}"
	}

	// Builder for model
	component = BuilderGeneratorWorkflow {
		modelDir = "${rootPath}/${modelDir}"
		javaGenPath = "${rootPath}/${javaGenPath}"
	}	

	// Judo RuntimeModel for model
	component = RuntimeModelGeneratorWorkflow {
		modelDir = "${rootPath}/${modelDir}"
		javaGenPath = "${rootPath}/${javaGenPath}"
	}
	

}
