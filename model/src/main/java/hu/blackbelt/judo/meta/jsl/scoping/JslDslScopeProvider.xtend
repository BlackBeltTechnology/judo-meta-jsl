/*
 * generated by Xtext 2.26.0
 */
package hu.blackbelt.judo.meta.jsl.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityRelationDeclaration
import org.eclipse.xtext.scoping.Scopes
import hu.blackbelt.judo.meta.jsl.util.JslDslModelExtension
import com.google.inject.Inject
import org.eclipse.xtext.scoping.IScope
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityRelationOpposite
import hu.blackbelt.judo.meta.jsl.jsldsl.ThrowParameter
import hu.blackbelt.judo.meta.jsl.jsldsl.CreateError
import hu.blackbelt.judo.meta.jsl.jsldsl.Feature
import hu.blackbelt.judo.meta.jsl.jsldsl.QueryParameter
import hu.blackbelt.judo.meta.jsl.jsldsl.NavigationExpression
import hu.blackbelt.judo.meta.jsl.jsldsl.DefaultExpressionType
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityFieldDeclaration
import hu.blackbelt.judo.meta.jsl.jsldsl.EnumDeclaration
import hu.blackbelt.judo.meta.jsl.jsldsl.EnumLiteralReference
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityIdentifierDeclaration
import hu.blackbelt.judo.meta.jsl.jsldsl.LambdaVariable
import hu.blackbelt.judo.meta.jsl.jsldsl.LambdaFunctionParameters
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityQueryDeclaration
import hu.blackbelt.judo.meta.jsl.jsldsl.QueryCall
import hu.blackbelt.judo.meta.jsl.jsldsl.QueryDeclaration
import java.util.ArrayList
import hu.blackbelt.judo.meta.jsl.jsldsl.NavigationBaseReference
import hu.blackbelt.judo.meta.jsl.jsldsl.ModelDeclaration
import hu.blackbelt.judo.meta.jsl.jsldsl.QueryDeclarationParameter
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityMemberDeclaration
import java.util.Collection
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import hu.blackbelt.judo.meta.jsl.jsldsl.ErrorField
 
class JslDslScopeProvider extends AbstractDeclarativeScopeProvider {

	@Inject extension JslDslModelExtension


	def scope_EntityRelationOpposite_oppositeType(EntityRelationOpposite context, EReference ref) {
		nullSafeScope((context.eContainer as EntityRelationDeclaration).getAllOppositeRelations)		
	}

	def scope_EnumLiteralReference_enumDeclaration(DefaultExpressionType context, EReference ref) {
		nullSafeScope(context.defaultExpressionEnumReferenceType)		
	}

	def scope_EnumLiteralReference_enumLiteral(EnumLiteralReference context, EReference ref) {
		nullSafeScope(context.enumDeclaration.literals)		
	}

	def scope_Feature_navigationDeclarationType(Feature context, EReference ref) {
		nullSafeScope((context as Feature).entityMembersForFeauture)		
	}

	def scope_QueryParameter_queryParameterType(Feature context, EReference ref) {
		nullSafeScope(context.queryDeclarationParameters)
	}

	def scope_ThrowParameter_errorFieldType(CreateError context, EReference ref) {
		nullSafeScope(context.errorFieldTypesForCreateError)
	}

	def scope_ThrowParameter_errorFieldType(ThrowParameter context, EReference ref) {
		if (context.eContainer instanceof CreateError) {
			nullSafeScope((context.eContainer as CreateError).errorFieldTypesForCreateError)
		}
	}

	def scope_QueryParameter_queryParameterType(QueryParameter context, EReference ref) {
    	var container = context.eContainer
		if (container instanceof Feature) {
			// System.out.println("=> QueryParameterType.Feature - QD: " + container.parentContainer(QueryDeclaration) + "  EDQ:" + container.parentContainer(EntityQueryDeclaration))
			nullSafeScope(container.queryDeclarationParameters)
		} else if (container instanceof QueryCall) {
			// System.out.println("=> QueryParameterType.QueryCal - Ref: " + container.queryDeclarationReference + "QD: " + container.parentContainer(QueryDeclaration) + "  EDQ:" + container.parentContainer(EntityQueryDeclaration))
			nullSafeScope(container.queryDeclarationReference.parameters)
		}
	}

	def scope_QueryParameter_parameter(QueryParameter context, EReference ref) {
    	var container = context.eContainer
		if (container instanceof Feature) {
			// System.out.println("=> QueryParameter.Feature - QD: " + container.parentContainer(QueryDeclaration) + "  EDQ:" + container.parentContainer(EntityQueryDeclaration))
			nullSafeScope(container.parentQueryDeclarationParameters)
		} else if (container instanceof QueryCall) {
			// System.out.println("=> QueryParameter.QueryCal - Ref: " + container.queryDeclarationReference + "QD: " + container.parentContainer(QueryDeclaration) + "  EDQ:" + container.parentContainer(EntityQueryDeclaration))
			nullSafeScope(container.parentQueryDeclarationParameters)
		}
	}


	def scope_QueryParameter_queryParameterType(QueryCall context, EReference ref) {
		nullSafeScope(context.queryDeclarationReference.parameters)
	}

	def scope_QueryParameter_Parameter(QueryCall context, EReference ref) {
		nullSafeScope((context as QueryCall).parameters)
	}

	def scope_NavigationExpression_navigationBaseType(EntityQueryDeclaration context, EReference ref) {
		nullSafeScope(context.elementsForNavigationBaseReference)
	}
	def scope_EnumLiteralReference_enumDeclaration(EntityQueryDeclaration context, EReference ref) {
		nullSafeScope(context.parentContainer(ModelDeclaration).allEnumDeclarations)
	}
	def scope_QueryDeclaration_referenceType(EntityQueryDeclaration context, EReference ref) {
		nullSafeScope(context.elementsForNavigationBaseReference)
	}
	
	def scope_NavigationExpression_navigationBaseType(LambdaFunctionParameters context, EReference ref) {
		nullSafeScope(context.elementsForNavigationBaseReference)
	}
	

    override getScope(EObject context, EReference ref) {
    	// System.out.println("JslDslLocalScopeProvider.scope=scope_" + ref.EContainingClass.name + "_" + ref.name + "(" + context.eClass.name + " context, EReference ref) : " + ref.EReferenceType.name);
    	// printParents(context)
    	super.getScope(context, ref)	
	}

	def Collection<ErrorField> errorFieldTypesForCreateError(CreateError createError) {
		createError.errorDeclarationType.fields	
	}

	def Collection<QueryDeclarationParameter> queryDeclarationParameters(EObject feature) {
		if (feature instanceof Feature) {
			if (feature === null || feature.navigationDeclarationType === null) {
				return null
			} else if (feature.navigationDeclarationType instanceof EntityQueryDeclaration) {
				return (feature.navigationDeclarationType as EntityQueryDeclaration).parameters						
			}			
		}
		null
	}

	def Collection<QueryDeclarationParameter> parentQueryDeclarationParameters(EObject feature) {
		if (feature !== null) {
			val queryDeclaration = feature.parentContainer(QueryDeclaration)
			if (queryDeclaration !== null) {
				return queryDeclaration.parameters
			} else {
				val entityQueryDeclaration = feature.parentContainer(EntityQueryDeclaration)
				if (entityQueryDeclaration !== null) {
					return entityQueryDeclaration.parameters
				}				
			}
		} 
		return null		
	}


	def Collection<NavigationBaseReference> elementsForNavigationBaseReference(EObject context) {
		var contextElements = new ArrayList<NavigationBaseReference>;

		// Add all entity declaratiosn
		contextElements.addAll(context.parentContainer(ModelDeclaration).entityDeclarations)
		
		val parentDeclarationParameters = context.parentQueryDeclarationParameters
		if (parentDeclarationParameters !== null) {
			contextElements.addAll(parentDeclarationParameters)
		}

		// QueryDeclarationParameter
		if (context instanceof EntityQueryDeclaration) {
			contextElements.addAll(context.parameters);
		}

		if (context instanceof QueryDeclaration) {
			contextElements.addAll(context.parameters);
		}

		if (context instanceof LambdaFunctionParameters) {
			contextElements.add((context as LambdaFunctionParameters).lambdaArgument);
		}

		return contextElements
	}


	def EnumDeclaration defaultExpressionEnumReferenceType(DefaultExpressionType defaultExpression) {
		var EObject refType

		if (defaultExpression.eContainer instanceof EntityFieldDeclaration) {
			refType = (defaultExpression.eContainer as EntityFieldDeclaration).referenceType
		} else if (defaultExpression.eContainer instanceof EntityIdentifierDeclaration) {
			refType = (defaultExpression.eContainer as EntityIdentifierDeclaration).referenceType
		}
		
		if (refType !== null && refType instanceof EnumDeclaration) {
			val enumDeclaration = refType as EnumDeclaration
			return enumDeclaration;				
		}        
		return null
	}


	def Collection<EntityMemberDeclaration> entityMembersForFeauture(Feature feature) {
		if (feature.eContainer instanceof NavigationExpression) {
            return feature.parentContainer(ModelDeclaration).allNamedEntityMemberDeclarations
        } else if (feature.eContainer instanceof Feature) {        	
        	return feature.parentContainer(ModelDeclaration).allNamedEntityMemberDeclarations
        } 
        return null
	}

	def LambdaVariable getParentLambdaVariable(Feature feature) {
		var EObject container = feature
		while (container.eContainer !== null) {
			container = feature.eContainer
			if (container instanceof LambdaFunctionParameters) {
				return (container as LambdaFunctionParameters).lambdaArgument
			}
		}
		null
	}

	def void printParents(EObject obj) {
		var EObject t = obj;
		var int indent = 1
		while (t.eContainer !== null) {
			for (var i = 0; i<indent; i++) {
				System.out.print("\t");
			}
			indent ++
			System.out.println(t)
			t = t.eContainer
		}
		System.out.println("")
		
	}
	
	def IScope nullSafeScope(Object input) {
		nullSafeScope(input, IScope.NULLSCOPE)
	}

	
	def IScope nullSafeScope(Object input, IScope fallback) {
		if (input === null) {
			return fallback
		}
		if (input instanceof Iterable) {
			if (input.size > 0) {
				return Scopes.scopeFor(input, fallback)
			} else {
				return fallback
			}
		} else if (input instanceof EObject) {
			return Scopes.scopeFor(#[input], fallback)
		} else {
			throw new IllegalArgumentException("Only EObject or Iterable is accepted")
		}
	}
}
