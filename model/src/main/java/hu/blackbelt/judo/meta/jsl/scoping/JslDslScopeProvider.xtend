/*
 * generated by Xtext 2.26.0
 */
package hu.blackbelt.judo.meta.jsl.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityRelationDeclaration
import hu.blackbelt.judo.meta.jsl.jsldsl.JsldslPackage
import org.eclipse.xtext.scoping.Scopes
import hu.blackbelt.judo.meta.jsl.util.JslDslModelExtension
import com.google.inject.Inject
import org.eclipse.xtext.scoping.IScope
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityRelationOpposite
import hu.blackbelt.judo.meta.jsl.jsldsl.ThrowParameter
import hu.blackbelt.judo.meta.jsl.jsldsl.CreateError
import hu.blackbelt.judo.meta.jsl.jsldsl.Feature
import hu.blackbelt.judo.meta.jsl.jsldsl.QueryParameter
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityDerivedDeclaration
import hu.blackbelt.judo.meta.jsl.jsldsl.NavigationExpression
import hu.blackbelt.judo.meta.jsl.jsldsl.DefaultExpressionType
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityFieldDeclaration
import hu.blackbelt.judo.meta.jsl.jsldsl.EnumDeclaration
import hu.blackbelt.judo.meta.jsl.jsldsl.EnumLiteralReference
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityIdentifierDeclaration

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */ 
 
class JslDslScopeProvider extends AbstractJslDslScopeProvider {

	@Inject extension JslDslModelExtension

    override getScope(EObject context, EReference ref) {
    	// System.out.println("JslDslLocalScopeProvider.getScope="+ context.toString + " for " + ref.toString);
		switch context {
			EntityRelationOpposite : 
				switch (ref) {
					case JsldslPackage::eINSTANCE.entityRelationOpposite_OppositeType:
						Scopes.scopeFor((context.eContainer as EntityRelationDeclaration).getAllOppositeRelations)			
					default: 
						super.getScope(context, ref)
				}
			DefaultExpressionType :
				switch (ref) {
					case JsldslPackage::eINSTANCE.enumLiteralReference_EnumDeclaration:
						return context.scopeForDefaultExpressionType				
					default: 
						super.getScope(context, ref)
				}

			EnumLiteralReference :
				switch (ref) {
					case JsldslPackage::eINSTANCE.enumLiteralReference_EnumLiteral: {
					    // Commented out code below kept for future re-use
						// val entityField = context.eContainer.eContainer as EntityFieldDeclaration
						// val enumDeclaration = entityField.referenceType as EnumDeclaration
						// val asd = context.eContainer as EnumLiteralReference
						return Scopes.scopeFor(context.enumDeclaration.literals)
					}
					default: 
						super.getScope(context, ref)					
				}

			/*			 
			Feature
			    : {Feature} '.' member = EntityMemberDeclarationFeature
			    ;
			
			EntityMemberDeclarationFeature returns Feature
				: entityMemberDeclarationType = [EntityMemberDeclaration | LocalName ] ('(' parameters+=QueryParameter (',' parameters+=QueryParameter)* ')')?
				;
			*/
			Feature :
				switch (ref) {
					case JsldslPackage::eINSTANCE.feature_EntityMemberDeclarationType:
						return (context as Feature).scopeForFeatureEntityMemberDeclarationType(ref, super.getScope(context, ref))
					case JsldslPackage::eINSTANCE.queryParameter_DerivedParameterType:
						(context as Feature).scopeForQueryParameterDerivedParameterType(super.getScope(context, ref))
					default: 
						super.getScope(context, ref)
				}
			

			/*
			CreateError
				: errorDeclarationType=[ErrorDeclaration | LocalName] ('(' (parameters+=ThrowParameter (',' parameters+=ThrowParameter)*)? ')')?
				;
			
			ThrowParameter
				: errorFieldType=[ErrorField | LocalName] '=' expession=Expression
				;
			*/
			CreateError : 
				switch (ref) {
					case JsldslPackage::eINSTANCE.throwParameter_ErrorFieldType:
						(context as CreateError).scopeForCreateError
					default: 
						super.getScope(context, ref)
				}

			ThrowParameter : 
				switch (ref) {
					case JsldslPackage::eINSTANCE.throwParameter_ErrorFieldType:
						if (context.eContainer instanceof CreateError) {
							(context.eContainer as CreateError).scopeForCreateError
						} else {
							super.getScope(context, ref)
						}
					default: 
						super.getScope(context, ref)
				}

			/*
			Feature
				: {Feature} '.' name=ID ('(' parameters+=QueryParameter (',' parameters+=QueryParameter)* ')')?
				;
			
			QueryParameter
				:  derivedParameterType=[DerivedParameter | LocalName] '=' expression=MultilineExpression
				;
			 */
			QueryParameter : 
				switch (ref) {
					case JsldslPackage::eINSTANCE.queryParameter_DerivedParameterType:
						(context.eContainer as Feature).scopeForQueryParameterDerivedParameterType(super.getScope(context, ref))
					case JsldslPackage::eINSTANCE.queryParameter_Parameter:
						(context.eContainer as Feature).scopeForQueryParameterParameterType
					default: 
						super.getScope(context, ref)
				}
			default: super.getScope(context, ref)
		}		
	}
	
	def IScope scopeForCreateError(CreateError createError) {
		Scopes.scopeFor(createError.errorDeclarationType.fields, IScope.NULLSCOPE)		
	}

	def IScope scopeForQueryParameterDerivedParameterType(Feature feature, IScope fallback) {
		if (feature.entityMemberDeclarationType !== null 
			&& feature.entityMemberDeclarationType instanceof EntityDerivedDeclaration) {
			Scopes.scopeFor((feature.entityMemberDeclarationType as EntityDerivedDeclaration).parameters, IScope.NULLSCOPE)							
		} else {
			fallback
		}
	}

	def IScope scopeForQueryParameterParameterType(Feature feature) {
		Scopes.scopeFor(feature.getDerivedDeclaration.parameters, IScope.NULLSCOPE)							
	}
	
	def IScope scopeForDefaultExpressionType(DefaultExpressionType defaultExpression) {
		var EObject refType

		if (defaultExpression.eContainer instanceof EntityFieldDeclaration) {
			refType = (defaultExpression.eContainer as EntityFieldDeclaration).referenceType
		} else if (defaultExpression.eContainer instanceof EntityIdentifierDeclaration) {
			refType = (defaultExpression.eContainer as EntityIdentifierDeclaration).referenceType
		}
		
		if (refType !== null && refType instanceof EnumDeclaration) {
			val enumDeclaration = refType as EnumDeclaration
			return Scopes.scopeFor(#[enumDeclaration], IScope.NULLSCOPE);				
		}
        
		return IScope.NULLSCOPE
	}

	def IScope scopeForFeatureEntityMemberDeclarationType(Feature feature, EReference ref, IScope fallback) {
		// System.out.println("JslDslLocalScopeProvider.scopeForFeatureEntityMemberDeclarationType="+ feature.toString)
		if (feature.eContainer instanceof NavigationExpression) {
            // enums...
            val decl = feature.modelDeclaration.allEnumDeclarations
            val enumDeclaration = decl.findFirst[e | e.name.equals((feature.eContainer as NavigationExpression).QName)];

            if (enumDeclaration !== null) {
                return Scopes.scopeFor(enumDeclaration.literals, fallback)
            } else {
                return Scopes.scopeFor(feature.modelDeclaration.allEntityMemberDeclarations, fallback)
            }
        } else {
            return feature.getScopeForFeature(ref, fallback)
        }
	}


}
