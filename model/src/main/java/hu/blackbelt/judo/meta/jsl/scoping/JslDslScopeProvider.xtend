/*
 * generated by Xtext 2.26.0
 */
package hu.blackbelt.judo.meta.jsl.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityRelationDeclaration
import hu.blackbelt.judo.meta.jsl.jsldsl.JsldslPackage
import org.eclipse.xtext.scoping.Scopes
import hu.blackbelt.judo.meta.jsl.util.JslDslModelExtension
import com.google.inject.Inject
import org.eclipse.xtext.scoping.IScope
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityRelationOpposite
import hu.blackbelt.judo.meta.jsl.jsldsl.ThrowParameter
import hu.blackbelt.judo.meta.jsl.jsldsl.CreateError

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */ 
 
class JslDslScopeProvider extends AbstractJslDslScopeProvider {

	@Inject extension JslDslModelExtension

    override getScope(EObject context, EReference ref) {		
//		System.out.println("JslDslLocalScopeProvider.getScope="+ context.toString + " for " + ref.toString);
		switch context {
			EntityRelationOpposite : 
				switch (ref) {
					case JsldslPackage::eINSTANCE.entityRelationOpposite_OppositeType:
						Scopes.scopeFor((context.eContainer as EntityRelationDeclaration).getAllOppositeRelations, IScope.NULLSCOPE)			
					default: 
						super.getScope(context, ref)
				}

			ThrowParameter : 
				switch (ref) {
					case JsldslPackage::eINSTANCE.throwParameter_ErrorFieldType:
						if (context.eContainer instanceof CreateError) {
							Scopes.scopeFor((context.eContainer as CreateError).errorDeclarationType.fields, IScope.NULLSCOPE)									
						} else {
							IScope.NULLSCOPE
						}
					default: 
						super.getScope(context, ref)
				}

			CreateError : 
				switch (ref) {
					case JsldslPackage::eINSTANCE.throwParameter_ErrorFieldType:
							Scopes.scopeFor((context as CreateError).errorDeclarationType.fields, IScope.NULLSCOPE)		
					default: 
						super.getScope(context, ref)
				}

			default: super.getScope(context, ref)
		}		
	}
}
