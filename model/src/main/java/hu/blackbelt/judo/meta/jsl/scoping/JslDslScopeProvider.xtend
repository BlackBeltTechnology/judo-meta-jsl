/*
 * generated by Xtext 2.26.0
 */
package hu.blackbelt.judo.meta.jsl.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityRelationDeclaration
import hu.blackbelt.judo.meta.jsl.jsldsl.JsldslPackage
import org.eclipse.xtext.scoping.Scopes
import hu.blackbelt.judo.meta.jsl.util.JslDslModelExtension
import com.google.inject.Inject
import org.eclipse.xtext.scoping.IScope
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityRelationOpposite
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityDeclaration
import com.google.common.collect.Iterables
import com.google.common.base.Predicate
import org.eclipse.xtext.resource.IEObjectDescription
import org.eclipse.xtext.scoping.impl.SimpleScope
import org.eclipse.xtext.scoping.impl.FilteringScope

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class JslDslScopeProvider extends AbstractJslDslScopeProvider {

	@Inject extension JslDslModelExtension

    override getScope(EObject context, EReference ref) {
		
		// System.out.println("JslDslLocalScopeProvider.getScope="+ context.toString + " for " + ref.toString);


		JsldslPackage::eINSTANCE.entityRelationOpposite_OppositeType == ref


		switch context {
			EntityRelationOpposite : 
				switch (ref) {
					case JsldslPackage::eINSTANCE.entityRelationOpposite_OppositeType:
						Scopes.scopeFor((context.eContainer as EntityRelationDeclaration).getAllOppositeRelations, IScope.NULLSCOPE)			
					default: 
						super.getScope(context, ref)
				}

			/* 	This is causing cyclic refeence problem
			EntityDeclaration : 
				switch (ref) {					
					case JsldslPackage::eINSTANCE.entityDeclaration_Extends: {
						val entity = context as EntityDeclaration;
						val superEntities = entity.superEntityTypes
						
						new FilteringScope(super.getScope(context, ref), new Predicate<IEObjectDescription>() {
					        override apply(IEObjectDescription input) {
								input.EObjectOrProxy !== entity || !superEntities.contains(input.EObjectOrProxy)
					        }
					    });
					}
					default:
						super.getScope(context, ref)
				}
				*/
			default: super.getScope(context, ref)
		}		
	}
}
