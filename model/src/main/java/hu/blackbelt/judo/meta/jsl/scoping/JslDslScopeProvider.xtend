/*
 * generated by Xtext 2.26.0
 */
package hu.blackbelt.judo.meta.jsl.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityRelationDeclaration
import hu.blackbelt.judo.meta.jsl.jsldsl.JsldslPackage
import org.eclipse.xtext.scoping.Scopes
import hu.blackbelt.judo.meta.jsl.util.JslDslModelExtension
import com.google.inject.Inject
import org.eclipse.xtext.scoping.IScope
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityRelationOpposite
import hu.blackbelt.judo.meta.jsl.jsldsl.ThrowParameter
import hu.blackbelt.judo.meta.jsl.jsldsl.CreateError
import hu.blackbelt.judo.meta.jsl.jsldsl.Feature
import hu.blackbelt.judo.meta.jsl.jsldsl.QueryParameter
import hu.blackbelt.judo.meta.jsl.jsldsl.NavigationExpression
import hu.blackbelt.judo.meta.jsl.jsldsl.DefaultExpressionType
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityFieldDeclaration
import hu.blackbelt.judo.meta.jsl.jsldsl.EnumDeclaration
import hu.blackbelt.judo.meta.jsl.jsldsl.EnumLiteralReference
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityIdentifierDeclaration
import hu.blackbelt.judo.meta.jsl.jsldsl.LambdaVariable
import hu.blackbelt.judo.meta.jsl.jsldsl.LambdaFunctionParameters
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityQueryDeclaration
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityDerivedDeclaration
import hu.blackbelt.judo.meta.jsl.jsldsl.QueryCall
import hu.blackbelt.judo.meta.jsl.jsldsl.QueryDeclaration
import java.util.ArrayList
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityDeclaration
import java.util.List
import hu.blackbelt.judo.meta.jsl.jsldsl.NavigationBaseReference
import hu.blackbelt.judo.meta.jsl.jsldsl.ModelDeclaration
import hu.blackbelt.judo.meta.jsl.jsldsl.QueryDeclarationParameter
import hu.blackbelt.judo.meta.jsl.jsldsl.EntityMemberDeclaration
import java.util.Collection
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */ 
 
class JslDslScopeProvider extends AbstractDeclarativeScopeProvider {


//AbstractDeclarativeScopeProvider {
//AbstractJslDslScopeProvider {



	@Inject extension JslDslModelExtension

    override getScope(EObject context, EReference ref) {
    	System.out.println("JslDslLocalScopeProvider.getScope="+ context.toString + " for " + ref.toString);
    	var container = context.eContainer
		switch context {
			EntityRelationOpposite : 
				switch (ref) {
					case JsldslPackage::eINSTANCE.entityRelationOpposite_OppositeType:
						nullSafeScope((container as EntityRelationDeclaration).getAllOppositeRelations)			
					default: 
						super.getScope(context, ref)
				}
			DefaultExpressionType :
				switch (ref) {
					case JsldslPackage::eINSTANCE.enumLiteralReference_EnumDeclaration:
						nullSafeScope(context.defaultExpressionEnumReferenceType)
					default: 
						super.getScope(context, ref)
				}

			EnumLiteralReference :
				switch (ref) {
					case JsldslPackage::eINSTANCE.enumLiteralReference_EnumLiteral: {
						nullSafeScope(context.enumDeclaration.literals)
					}
					default: 
						super.getScope(context, ref)					
				}

			EntityDerivedDeclaration : 
				switch (ref) {
//					case JsldslPackage::eINSTANCE.navigationExpression_NavigationBaseType:
//						(context as EntityDerivedDeclaration).modelDeclaration.scopeForNavigationBase(super.getScope(context, ref))
					default: 
						super.getScope(context, ref)
				}

			/*			 
			Feature
			    : {Feature} '.' member = EntityMemberDeclarationFeature
			    ;
			
			EntityMemberDeclarationFeature returns Feature
				: entityMemberDeclarationType = [EntityMemberDeclaration | LocalName ] ('(' parameters+=QueryParameter (',' parameters+=QueryParameter)* ')')?
				;
			*/
			Feature :
				switch (ref) {
					case JsldslPackage::eINSTANCE.feature_NavigationDeclarationType:
						nullSafeScope((context as Feature).entityMembersForFeauture, super.getScope(context, ref))
					case JsldslPackage::eINSTANCE.queryParameter_QueryParameterType:
						nullSafeScope(context.queryDeclarationParameters)
					default: 
						super.getScope(context, ref)
				}
			

			/*
			CreateError
				: errorDeclarationType=[ErrorDeclaration | LocalName] ('(' (parameters+=ThrowParameter (',' parameters+=ThrowParameter)*)? ')')?
				;
			
			ThrowParameter
				: errorFieldType=[ErrorField | LocalName] '=' expession=Expression
				;
			*/
			CreateError : 
				switch (ref) {
					case JsldslPackage::eINSTANCE.throwParameter_ErrorFieldType:
						nullSafeScope(context.errorFieldTypesForCreateError)
					default: 
						super.getScope(context, ref)
				}

			ThrowParameter : 
				switch (ref) {
					case JsldslPackage::eINSTANCE.throwParameter_ErrorFieldType:
						if (container instanceof CreateError) {
							nullSafeScope(container.errorFieldTypesForCreateError)
						} else {
							super.getScope(context, ref)
						}
					default: 
						super.getScope(context, ref)
				}

			/*
			Feature
				: {Feature} '.' name=ID ('(' parameters+=QueryParameter (',' parameters+=QueryParameter)* ')')?
				;
			
			QueryParameter
				:  derivedParameterType=[DerivedParameter | LocalName] '=' expression=MultilineExpression
				;
			 */
			QueryParameter : {
				if (container === null) {
					return super.getScope(context, ref)					
				}
				switch (ref) {
					case JsldslPackage::eINSTANCE.queryParameter_QueryParameterType: {		
						if (container instanceof Feature) {
							System.out.println("=> QueryParameterType.Feature - QD: " + container.parentContainer(QueryDeclaration) + "  EDQ:" + container.parentContainer(EntityQueryDeclaration))
							nullSafeScope(container.queryDeclarationParameters)
						} else if (container instanceof QueryCall) {
							System.out.println("=> QueryParameterType.QueryCal - Ref: " + container.queryDeclarationReference + "QD: " + container.parentContainer(QueryDeclaration) + "  EDQ:" + container.parentContainer(EntityQueryDeclaration))
							nullSafeScope(container.queryDeclarationReference.parameters)
						} else {
							super.getScope(context, ref)							
						}		
					}
					case JsldslPackage::eINSTANCE.queryParameter_Parameter: {
						if (container instanceof Feature) {
							System.out.println("=> QueryParameter.Feature - QD: " + container.parentContainer(QueryDeclaration) + "  EDQ:" + container.parentContainer(EntityQueryDeclaration))
							nullSafeScope(container.parentQueryDeclarationParameters)
						} else if (container instanceof QueryCall) {
							System.out.println("=> QueryParameter.QueryCal - Ref: " + container.queryDeclarationReference + "QD: " + container.parentContainer(QueryDeclaration) + "  EDQ:" + container.parentContainer(EntityQueryDeclaration))
							nullSafeScope(container.parentQueryDeclarationParameters)
						}
					}
					default: 
						return super.getScope(context, ref)
				}
				
			}
			QueryCall : 
				switch (ref) {
					case JsldslPackage::eINSTANCE.queryParameter_QueryParameterType:
						nullSafeScope(context.queryDeclarationReference.parameters)
					case JsldslPackage::eINSTANCE.queryParameter_Parameter:
						nullSafeScope((context as QueryCall).parameters)
					default: 
						return super.getScope(context, ref)
				}


			EntityQueryDeclaration :
				switch (ref) {
					case JsldslPackage::eINSTANCE.navigationExpression_NavigationBaseType:
						nullSafeScope(context.elementsForNavigationBaseReference)
					case JsldslPackage::eINSTANCE.enumLiteralReference_EnumDeclaration:
						nullSafeScope(context.parentContainer(ModelDeclaration).allEnumDeclarations)
					case JsldslPackage::eINSTANCE.queryDeclaration_ReferenceType:
						nullSafeScope(context.parentContainer(ModelDeclaration).allQueryDeclarations)
					default: 
						return super.getScope(context, ref)						
				}
			 

			default: 
				return super.getScope(context, ref)
		}		
	}
	

	def List errorFieldTypesForCreateError(CreateError createError) {
		createError.errorDeclarationType.fields	
	}

/*
	def IScope scopeForQueryParameterQueryParameterType(Feature feature, IScope fallback) {
		if (feature.navigationDeclarationType === null) {
			fallback
		} else if (feature.navigationDeclarationType instanceof EntityQueryDeclaration) {
			Scopes.scopeFor((feature.navigationDeclarationType as EntityQueryDeclaration).parameters, IScope.NULLSCOPE)							
		} else {
			fallback
		}
	}
*/
	def List<QueryDeclarationParameter> queryDeclarationParameters(EObject feature) {
		if (feature instanceof Feature) {
			if (feature === null || feature.navigationDeclarationType === null) {
				return null
			} else if (feature.navigationDeclarationType instanceof EntityQueryDeclaration) {
				return (feature.navigationDeclarationType as EntityQueryDeclaration).parameters						
			}			
		}
		null
	}

/* 
	def IScope scopeForQueryParameterParameterType(EObject feature) {
		if (feature !== null) {
			val queryDeclaration = feature.parentContainer(QueryDeclaration)
			if (queryDeclaration !== null) {
				return Scopes.scopeFor(queryDeclaration.parameters, IScope.NULLSCOPE)		
			} else {
				val entityQueryDeclaration = feature.parentContainer(EntityQueryDeclaration)
				if (entityQueryDeclaration !== null) {
					return Scopes.scopeFor(entityQueryDeclaration.parameters, IScope.NULLSCOPE)					
				}				
			}
		} 
		return IScope.NULLSCOPE
	}
*/	
	def Collection<QueryDeclarationParameter> parentQueryDeclarationParameters(EObject feature) {
		if (feature !== null) {
			val queryDeclaration = feature.parentContainer(QueryDeclaration)
			if (queryDeclaration !== null) {
				return queryDeclaration.parameters
			} else {
				val entityQueryDeclaration = feature.parentContainer(EntityQueryDeclaration)
				if (entityQueryDeclaration !== null) {
					return entityQueryDeclaration.parameters
				}				
			}
		} 
		return null		
	}



	def Collection<NavigationBaseReference> elementsForNavigationBaseReference(EObject context) {
		/*
		 * NavigationBaseReference
	     * : EntityDeclaration
	     * | LambdaVariable
	     * | QueryDeclarationParameter
	     * ;
		 */
		 
		 /*
JslDslLocalScopeProvider.getScope=hu.blackbelt.judo.meta.jsl.jsldsl.impl.EntityDerivedDeclarationImpl@4d13dc5 (isMany: true, name: leadsOver10) for org.eclipse.emf.ecore.impl.EReferenceImpl@7b2adbde (name: navigationBaseType) (ordered: true, unique: true, lowerBound: 0, upperBound: 1) (changeable: true, volatile: false, transient: false, defaultValueLiteral: null, unsettable: false, derived: false) (containment: false, resolveProxies: true)
JslDslLocalScopeProvider.getScope=hu.blackbelt.judo.meta.jsl.jsldsl.impl.EntityDerivedDeclarationImpl@4d13dc5 (isMany: true, name: leadsOver10) for org.eclipse.emf.ecore.impl.EReferenceImpl@52f8effb (name: enumDeclaration) (ordered: true, unique: true, lowerBound: 0, upperBound: 1) (changeable: true, volatile: false, transient: false, defaultValueLiteral: null, unsettable: false, derived: false) (containment: false, resolveProxies: true)
JslDslLocalScopeProvider.getScope=hu.blackbelt.judo.meta.jsl.jsldsl.impl.EntityDerivedDeclarationImpl@4d13dc5 (isMany: true, name: leadsOver10) for org.eclipse.emf.ecore.impl.EReferenceImpl@1683b9ba (name: queryDeclarationReference) (ordered: true, unique: true, lowerBound: 0, upperBound: 1) (changeable: true, volatile: false, transient: false, defaultValueLiteral: null, unsettable: false, derived: false) (containment: false, resolveProxies: true)
		  */
		var contextElements = new ArrayList<NavigationBaseReference>;

		// Add all entity declaratiosn
		contextElements.addAll(context.parentContainer(ModelDeclaration).entityDeclarations)

		// QueryDeclarationParameter
		if (context instanceof EntityQueryDeclaration) {
			contextElements.addAll(context.parameters);
		}

		if (context instanceof QueryDeclaration) {
			contextElements.addAll(context.parameters);
		}

		// TODO: Current Lambda

//		// EntityDeclaration		
//		if (context instanceof EntityDeclaration) {
//			contextElements.addAll(context.)
//			
//		}  		
		return contextElements
	}

	
	/*
	def IScope scopeForDefaultExpressionType(DefaultExpressionType defaultExpression) {
		var EObject refType

		if (defaultExpression.eContainer instanceof EntityFieldDeclaration) {
			refType = (defaultExpression.eContainer as EntityFieldDeclaration).referenceType
		} else if (defaultExpression.eContainer instanceof EntityIdentifierDeclaration) {
			refType = (defaultExpression.eContainer as EntityIdentifierDeclaration).referenceType
		}
		
		if (refType !== null && refType instanceof EnumDeclaration) {
			val enumDeclaration = refType as EnumDeclaration
			return Scopes.scopeFor(#[enumDeclaration], IScope.NULLSCOPE);				
		}
        
		return IScope.NULLSCOPE
	}
	* 
	*/

	def EnumDeclaration defaultExpressionEnumReferenceType(DefaultExpressionType defaultExpression) {
		var EObject refType

		if (defaultExpression.eContainer instanceof EntityFieldDeclaration) {
			refType = (defaultExpression.eContainer as EntityFieldDeclaration).referenceType
		} else if (defaultExpression.eContainer instanceof EntityIdentifierDeclaration) {
			refType = (defaultExpression.eContainer as EntityIdentifierDeclaration).referenceType
		}
		
		if (refType !== null && refType instanceof EnumDeclaration) {
			val enumDeclaration = refType as EnumDeclaration
			return enumDeclaration;				
		}        
		return null
	}


/* 
	def IScope scopeForNavigationDeclarationType(Feature feature, EReference ref, IScope fallback) {
		// System.out.println("JslDslLocalScopeProvider.scopeForNavigationDeclarationType="+ feature.toString + " parent=" + feature.eContainer + " grandParent=" + feature.eContainer.eContainer)
		if (feature.eContainer instanceof NavigationExpression) {
            // enums...
//            val decl = feature.modelDeclaration.allEnumDeclarations
//            val enumDeclaration = decl.findFirst[e | e.name.equals((feature.eContainer as NavigationExpression).QName)];
//
//            if (enumDeclaration !== null) {
//                return Scopes.scopeFor(enumDeclaration.literals, fallback)
//            } else {
                return Scopes.scopeFor(feature.parentContainer(ModelDeclaration).allNamedEntityMemberDeclarations, IScope.NULLSCOPE)
//            }
        } else if (feature.eContainer instanceof Feature) {        	
        	return Scopes.scopeFor(feature.parentContainer(ModelDeclaration).allNamedEntityMemberDeclarations, IScope.NULLSCOPE)
        } else {
            return feature.getScopeForFeature(ref, fallback)
        }
	}
*/
	def Collection<EntityMemberDeclaration> entityMembersForFeauture(Feature feature) {
		// System.out.println("JslDslLocalScopeProvider.scopeForNavigationDeclarationType="+ feature.toString + " parent=" + feature.eContainer + " grandParent=" + feature.eContainer.eContainer)
		if (feature.eContainer instanceof NavigationExpression) {
            return feature.parentContainer(ModelDeclaration).allNamedEntityMemberDeclarations
        } else if (feature.eContainer instanceof Feature) {        	
        	return feature.parentContainer(ModelDeclaration).allNamedEntityMemberDeclarations
        } 
        return null
        //else {
        //  return feature.getScopeForFeature(ref, fallback)
        //}
	}

/* 
	def IScope getScopeForFeature(Feature it, EReference ref, IScope fallback) {
		// System.out.println("JslDslModelExtension.getScopeForFeature="+ it.toString + " for " + ref.EReferenceType.name)
		val defaultExpression = it.defaultExpression
		
		if (defaultExpression !== null) {
			val targetType = (defaultExpression.eContainer as EntityFieldDeclaration).referenceType
			
			if (targetType instanceof EnumDeclaration) {
				return Scopes.scopeFor(targetType.literals, IScope.NULLSCOPE)
			}
		}
		
		return fallback
	}

	def Collection<EnumLiterals> getScopeForFeature(Feature it) {
		// System.out.println("JslDslModelExtension.getScopeForFeature="+ it.toString + " for " + ref.EReferenceType.name)
		val defaultExpression = it.defaultExpression
		
		if (defaultExpression !== null) {
			val targetType = (defaultExpression.eContainer as EntityFieldDeclaration).referenceType
			
			if (targetType instanceof EnumDeclaration) {
				return targetType.literals
			}
		}
		
		return fallback
	}
*/


	def LambdaVariable getParentLambdaVariable(Feature feature) {
		var EObject container = feature
		while (container.eContainer !== null) {
			container = feature.eContainer
			if (container instanceof LambdaFunctionParameters) {
				return (container as LambdaFunctionParameters).lambdaArgument
			}
		}
		null
	}

	def void printParents(EObject obj) {
		var EObject t = obj;
		var int indent = 1
		System.out.println("")
		while (t.eContainer !== null) {
			for (var i = 0; i<indent; i++) {
				System.out.print("\t");
			}
			indent ++
			System.out.println(t)
			t = t.eContainer
		}
		
	}
	
	def IScope nullSafeScope(Object input) {
		nullSafeScope(input, IScope.NULLSCOPE)
	}

	
	def IScope nullSafeScope(Object input, IScope fallback) {
		if (input === null) {
			return fallback
		}
		if (input instanceof Iterable) {
			if (input.size > 0) {
				return Scopes.scopeFor(input, fallback)
			} else {
				return fallback
			}
		} else if (input instanceof EObject) {
			return Scopes.scopeFor(#[input], fallback)
		} else {
			throw new IllegalArgumentException("Only EObject or Iterable is accepted")
		}
	}
}
