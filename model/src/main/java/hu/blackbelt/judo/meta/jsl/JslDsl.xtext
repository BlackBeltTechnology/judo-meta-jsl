grammar hu.blackbelt.judo.meta.jsl.JslDsl hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate jsldsl "http://www.blackbelt.hu/judo/meta/jsl/JslDsl"
 
ModelDeclaration returns ModelDeclaration
    : {ModelDeclaration}
      annotations += AnnotationMark*
      KW_MODEL name = ModelName SC+
      imports += ModelImportDeclaration*
	  (declarations += Declaration)*
    ;

KW_ABSTRACT:	'abstract';
KW_ACTOR:		'actor';
KW_ANNOTATION:	'annotation';
KW_AS:			'as';
KW_ENTITY:		'entity';
KW_ENUM:		'enum';
KW_ERROR:		'error';
KW_EXPORTS:		'exports';
KW_EXTENDS:		'extends';
KW_IMPORT:		'import';
KW_MAPS:		'maps';
KW_MODEL:		'model';
KW_ON:			'on';
KW_QUERY:		'query';
KW_ROW:			'row';
KW_SERVICE:		'service';
KW_TRANSFER:	'transfer';
KW_TYPE:		'type';
KW_VIEW:		'view';

FEAT_ACTION:		'action';
FEAT_COLUMN:		'column';
FEAT_CONSTRAINT:	'constraint';
FEAT_CONSTRUCTOR:	'constructor';
FEAT_DERIVED:		'derived';
FEAT_FIELD:			'field';
FEAT_FUNCTION:		'function';
FEAT_GROUP:			'group';
FEAT_IDENTIFIER:	'identifier';
FEAT_LINK:			'link';
FEAT_MENU:			'menu';
FEAT_QUERY:			'query';
FEAT_RELATION:		'relation';
FEAT_REQUIRED:		'required';
FEAT_SUBMIT:		'submit';
FEAT_TABLE:			'table';
FEAT_TABS:			'tabs';

CONST_BINARY:		'binary';
CONST_BOOLEAN:		'boolean';
CONST_BOTTOM:		'bottom';
CONST_CENTER:		'center';
CONST_DATE:			'date';
CONST_FALSE:		'false';
CONST_LEFT:			'left';
CONST_NUMERIC:		'numeric';
CONST_RIGHT:		'right';
CONST_STRETCH:		'stretch';
CONST_STRING:		'string';
CONST_TIME:			'time';
CONST_TIMESTAMP:	'timestamp';
CONST_TOP:			'top';
CONST_TRUE:			'true';
CONST_VOID:			'void';

ATTR_CHOICES:		'choices';
ATTR_CLAIM:			'claim';
ATTR_CREATE:		'create';
ATTR_ENABLED:		'enabled';
ATTR_ERROR:			'error';
ATTR_FRAME:			'frame';
ATTR_GUARD:			'guard';
ATTR_HIDDEN:		'hidden';
ATTR_HORIZONTAL:	'horizontal';
ATTR_ICON:			'icon';
ATTR_IDENTITY:		'identity';
ATTR_LABEL:			'label';
ATTR_REALM:			'realm';
ATTR_ROWS:			'rows';
ATTR_TAG:			'tag';
ATTR_TARGET:		'target';
ATTR_TEXT:			'text';
ATTR_VERTICAL:		'vertical';
ATTR_WIDTH:			'width';

			// keywords
JSLID : ID	| 'abstract' | 'actor' | 'annotation' | 'as' | 'entity' | 'enum' | 'error' | 'exports' | 'extends' | 'import'
			| 'model' | 'on' | 'query' | 'row' | 'service' | 'transfer' | 'type' | 'view'

			// features except 'query'
			| 'action' | 'column' | 'constraint' | 'constructor' | 'derived' | 'field' | 'function' | 'group' | 'identifier'
			| 'link' | 'menu' | 'relation' | 'required' | 'submit' | 'table' | 'tabs'

			// constants
			| 'binary' | 'boolean' | 'bottom' | 'center' | 'date' | 'left' | 'numeric' | 'right' | 'stretch'
			| 'string' | 'time' | 'timestamp' | 'top'

			// attributes except 'error'
			| 'choices' | 'claim' | 'create' | 'enabled' | 'frame' | 'guard' | 'hidden' | 'horizontal' | 'icon'
			| 'identity' | 'label' | 'realm' | 'rows' | 'tag' | 'target' | 'text' | 'vertical' | 'width'

			// others
			| 'regex' | 'precision' | 'scale' | 'lambda'
			| 'collection' | 'declaration' | 'constant'
			| 'implies' | 'or' | 'xor' | 'and' | 'div' | 'mod' 
			| 'kB' | 'MB' | 'GB' | 'KiB' | 'MiB' | 'GiB'
	       
	       // 'void' not included
	       // 'reads', 'maps' are not included
	       // 'self', 'true', 'false', 'not' are not included
	;

ModelImportDeclaration 
    : KW_IMPORT model = [ModelDeclaration | ModelName] (KW_AS alias = JSLID)? SC+
	;

Declaration
	: (TypeDeclaration
	| ErrorDeclaration
	| QueryDeclaration
	| FunctionDeclaration
	| LambdaDeclaration
	| AnnotationDeclaration)
	  SC*
	;


TypeDeclaration
	: PrimitiveDeclaration
	| ClassDeclaration
	;

PrimitiveDeclaration
	: EnumDeclaration
	| DataTypeDeclaration
    ;

ClassDeclaration
	: EntityDeclaration
	| ServiceDeclaration
	| TransferDeclaration
	| ViewDeclaration
	| RowDeclaration
	| ActorDeclaration
	;

/****************************
 *	Entity
 ****************************/
fragment Named
	: name = JSLID;

fragment Cardinality
    : isMany ?= '[]'
    ;

EntityDeclaration
	: {EntityDeclaration}
	  annotations += AnnotationMark*
	  KW_ENTITY isAbstract ?= KW_ABSTRACT? Named
	  (KW_EXTENDS extends += [EntityDeclaration | ModelName] (',' extends += [EntityDeclaration | ModelName])*)?
	  (SC | BLOCK_START (members += EntityMemberDeclaration)* BLOCK_END)
	;


QueryDeclaration
	: KW_QUERY (referenceType = [SingleType | ModelName] Cardinality?) Named
	  ('(' (parameters += QueryParameterDeclaration (',' parameters += QueryParameterDeclaration)*)? ')')
	  "=>" expression = Expression
	  SC
	;

EntityMemberDeclaration
	: (EntityFieldDeclaration
	| EntityIdentifierDeclaration
	| EntityRelationDeclaration
	| EntityDerivedDeclaration
	| EntityQueryDeclaration
//	| EntityOperationDeclaration
//	| ConstraintDeclaration
	)
	  SC*
	;

EntityFieldDeclaration
	: annotations += AnnotationMark*
	  FEAT_FIELD (isRequired ?= FEAT_REQUIRED? referenceType = [SingleType | ModelName] Cardinality?) Named
	  ('=' defaultExpression = Expression)? SC
	;

EntityIdentifierDeclaration
	: annotations += AnnotationMark*
	  FEAT_IDENTIFIER isRequired ?= FEAT_REQUIRED? referenceType = [PrimitiveDeclaration | ModelName] Named
	  ('=' defaultExpression = Expression)? SC
	;

SingleType 
	: PrimitiveDeclaration
	| EntityDeclaration
	;


EntityDerivedDeclaration
	: annotations += AnnotationMark*
	  FEAT_DERIVED (referenceType = [SingleType | ModelName] Cardinality?) Named
	  "=>" expression = Expression SC
	;

EntityQueryDeclaration
	: annotations += AnnotationMark*
	  FEAT_QUERY (referenceType = [SingleType | ModelName] Cardinality?) Named
	  ('(' (parameters += QueryParameterDeclaration (',' parameters += QueryParameterDeclaration)*)? ')')
	  "=>" expression = Expression SC
	;
 
QueryParameterDeclaration
	: referenceType = [PrimitiveDeclaration | ModelName] Named ("=" default = Expression)?
	;

EntityRelationDeclaration
	: annotations += AnnotationMark*
	  FEAT_RELATION (isRequired ?= FEAT_REQUIRED? referenceType = [EntityDeclaration | ModelName] Cardinality?) Named
	  opposite = EntityRelationOpposite? SC
	;

EntityRelationOpposite
	: EntityRelationOppositeInjected
	| EntityRelationOppositeReferenced
	;

EntityRelationOppositeInjected
	: 'opposite-add' Named Cardinality?
	;

EntityRelationOppositeReferenced
	: 'opposite' oppositeType = [EntityRelationDeclaration | LocalName]
	;

EntityOperationDeclaration
	: annotations += AnnotationMark*
	  'operation' static ?= 'static'? (CONST_VOID? | return = EntityOperationReturnDeclaration) Named
	  ('(' (parameters += EntityOperationParameterDeclaration (',' parameters += EntityOperationParameterDeclaration)*)? ')')
	  (SC | BLOCK_START BLOCK_END )
	;

EntityOperationReturnDeclaration
	: referenceType = [SingleType | ModelName] Cardinality?
	;

EntityOperationParameterDeclaration
	: referenceType = [SingleType | ModelName] Cardinality? Named
	;


/****************************
 *	Service
 ****************************/

GuardModifier
	: ATTR_GUARD ':' expression = Expression
	;

ServiceDeclaration
	: {ServiceDeclaration}
	  annotations += AnnotationMark*
	  KW_SERVICE Named
	  map = EntityMapDeclaration?
	  guard = GuardModifier?
	  (SC | BLOCK_START (members += ServiceMemberDeclaration)* BLOCK_END)
	;

EntityMapDeclaration
	: '(' entity = [EntityDeclaration | ModelName] Named ')'  // if no name defined, the 'self' shall be default name
	| KW_MAPS entity = [EntityDeclaration | ModelName] KW_AS Named
	;


ServiceMemberDeclaration
	: ServiceOperationDeclaration
	  SC*
	;

ServiceOperationDeclaration
	: ServiceDataDeclaration
	| ServiceFunctionDeclaration
	;

ServiceDataDeclaration
	: annotations += AnnotationMark*
	  FEAT_FUNCTION return = ServiceReturnDeclaration Cardinality? Named '=>' expression = Expression
	  (guard = GuardModifier? & choices = ChoiceModifier?)
	  SC
	;

ServiceFunctionDeclaration
	: annotations += AnnotationMark*
	  FEAT_FUNCTION
	  (CONST_VOID? | return = ServiceReturnDeclaration | alternateReturn = ServiceReturnAlternateDeclaration) Named
	  '(' parameter = ServiceFunctionParameterDeclaration? ')'
  	  guard = GuardModifier?
	  (automapping ?= SC | BLOCK_START BLOCK_END )
	;

ServiceReturnAlternateDeclaration
	: '<' referenceTypes += ServiceReturnDeclaration ("|" referenceTypes += ServiceReturnDeclaration)+ '>'
	;

ServiceReturnDeclaration
	: referenceType = [Transferable | ModelName]
	;

ServiceFunctionParameterDeclaration
	: referenceType = [Transferable | ModelName] Named?
	;

Transferable
	: TransferDeclaration
	| ViewDeclaration
	| RowDeclaration
	;

/****************************
 *	Transfer
 ****************************/

TransferDeclaration
	: {TransferDeclaration}
	  annotations += AnnotationMark*
	  KW_TRANSFER Named
	  map = EntityMapDeclaration?
	  (KW_EXPORTS exports += [ServiceDeclaration | ModelName] (',' exports += [ServiceDeclaration | ModelName])*)?
	  (automap ?= SC | BLOCK_START (members += TransferMemberDeclaration)* constructor = TransferConstructorDeclaration? BLOCK_END)
	;

TransferMemberDeclaration
	: TransferFieldDeclaration
	  SC*
	;

TransferFieldDeclaration
	: annotations += AnnotationMark*
	  FEAT_FIELD (required ?= FEAT_REQUIRED? referenceType = [TransferFieldType | ModelName] Cardinality?) Named
	  ('maps' maps = Expression ('choices' choices = Expression)? | 'reads' reads = Expression)?
	  SC
	;

TransferConstructorDeclaration
	: {TransferConstructorDeclaration}
	  FEAT_CONSTRUCTOR
	  BLOCK_START (defaults += TransferDefault)* BLOCK_END
	  SC*
	;

TransferDefault
	: field = TransferField '=' rightValue = Expression SC+
	;

TransferField
	: 'self' '.' reference = [TransferFieldDeclaration | ModelName]
	;

TransferFieldType
	: PrimitiveDeclaration
	| TransferDeclaration
	;

/****************************
 *	View
 ****************************/

ViewDeclaration
	: {ViewDeclaration}
	  annotations += AnnotationMark*
	  KW_VIEW Named
	  map = EntityMapDeclaration?
//	  ('exports' exports += [ServiceDeclaration | ModelName] (',' exports += [ServiceDeclaration | ModelName])*)?
	  (automap ?= SC | BLOCK_START (members += ViewMemberDeclaration)* (constructor = ViewConstructorDeclaration (members += ViewMemberDeclaration)*)? BLOCK_END)
	;

ViewMemberDeclaration
	: (ViewFieldDeclaration
	| ViewLinkDeclaration
	| ViewTableDeclaration
	| ViewGroupDeclaration
	| ViewTabsDeclaration
	| ViewSubmitDeclaration
	| ViewActionDeclaration)
	  SC*
	;

ViewConstructorDeclaration
	: {ViewConstructorDeclaration}
	  FEAT_CONSTRUCTOR
	  BLOCK_START (defaults += ViewDefault)* BLOCK_END
	  SC*
	;

ViewDefault
	: field = ViewField '=' rightValue = Expression SC+
	;

ViewField
	: 'self' '.' declaration = [ViewFieldDeclaration | ModelName]
	;

ViewTabsDeclaration
	: {ViewTabDeclaration}
	  annotations += AnnotationMark*
	 FEAT_TABS
	  ( tag = TagModifier
	  & label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?
	  & width = WidthModifier?
	  & frame = FrameModifier?)
	  BLOCK_START (members += ViewGroupDeclaration)* BLOCK_END
	;

ViewGroupDeclaration
	: {ViewGroupDeclaration} 
	  annotations += AnnotationMark*
	  FEAT_GROUP
	  ( tag = TagModifier
	  & (horizontal = HorizontalModifier | vertical = VerticalModifier)?
	  & label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?
	  & width = WidthModifier?
	  & frame = FrameModifier?)
	  BLOCK_START (members += ViewMemberDeclaration)* BLOCK_END
	;


HorizontalModifier
	: ATTR_HORIZONTAL ':' (left ?= CONST_LEFT | right ?= CONST_RIGHT | center ?= CONST_CENTER)
	;

VerticalModifier
	: ATTR_VERTICAL ':' (top ?= CONST_TOP | bottom ?= CONST_BOTTOM | center ?= CONST_CENTER | stretch ?= CONST_STRETCH)
	;

ViewFieldDeclaration
	: annotations += AnnotationMark*
	  FEAT_FIELD required ?= FEAT_REQUIRED? referenceType = [PrimitiveDeclaration | ModelName] Named ((maps ?= '<=>' | reads ?= '<=') expression = Expression)?
	  ( label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?
	  & width = WidthModifier?)
	  SC
	;

ViewLinkDeclaration
	: annotations += AnnotationMark*
	  FEAT_LINK required ?= FEAT_REQUIRED? (referenceType = [ViewDeclaration | ModelName]) Named ((maps ?= '<=>' | reads ?= '<=') expression = Expression)?
	  ( choices = ChoiceModifier?
	  & create = CreateModifier?
	  & target = TargetModifier?
	  & label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?
	  & text = TextModifier?
	  & width = WidthModifier?)
	  SC
	;

ViewTableDeclaration
	: annotations += AnnotationMark*
	  FEAT_TABLE (referenceType = [RowDeclaration | ModelName]) '[]' Named ((maps ?= '<=>' | reads ?= '<=') expression = Expression)?
	  ( choices = ChoiceModifier?
	  & create = CreateModifier?
	  & target = TargetModifier?
	  & label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?
	  & width = WidthModifier?
	  & rows = RowsModifier?)
	  SC
	;

ViewSubmitDeclaration
	: annotations += AnnotationMark*
	  FEAT_SUBMIT (CONST_VOID? | return = ServiceReturnDeclaration | alternateReturn = ServiceReturnAlternateDeclaration) Named
	  ( label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?
	  & width = WidthModifier?)
	  SC
	;

ViewActionDeclaration
	: annotations += AnnotationMark*
	  FEAT_ACTION
	  (CONST_VOID? | return = ServiceReturnDeclaration | alternateReturn = ServiceReturnAlternateDeclaration) Named
	  '(' parameter = ServiceFunctionParameterDeclaration? ')'
	  ( label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?
	  & width = WidthModifier?
	  & guard = GuardModifier?)
	  SC
	;

TagModifier
	: ATTR_TAG ':' value = JSLID
	;

LabelModifier
	: ATTR_LABEL ':' expression = Expression
	;

IconModifier
	:  ATTR_ICON ':' name = StringLiteral
	;	

FrameModifier
	: ATTR_FRAME ':' expression = Expression
	;	
	
EnabledModifier
	: ATTR_ENABLED ':' expression = Expression
	;

HiddenModifier
	: ATTR_HIDDEN ':' expression = Expression
	;

WidthModifier
	: ATTR_WIDTH ':' value = Natural
	;

RowsModifier
	: ATTR_ROWS ':' value = Natural
	;

ChoiceModifier
	: ATTR_CHOICES ':' expression = Expression
	;

TextModifier
	: ATTR_TEXT ':' expression = Expression
	;

CreateModifier
	: ATTR_CREATE ':' view = [ViewDeclaration | ModelName]
	;

TargetModifier
	: ATTR_TARGET ':' view = [ViewDeclaration | ModelName] ('(' expression = Expression ')')?
	;

ServiceFunctionCall
	: declaration = [ServiceFunctionDeclaration | ModelName] '(' argument = Expression? ')'
	;

/****************************
 *	Row
 ****************************/

RowDeclaration
	: {RowDeclaration}
	  annotations += AnnotationMark*
	  KW_ROW Named
	  map = EntityMapDeclaration?
	  target = TargetModifier?
	  (automap ?= SC | BLOCK_START (members += RowMemberDeclaration)* BLOCK_END)
	;

RowMemberDeclaration
	: RowColumnDeclaration
//	| RowActionDeclaration
	  SC*
	;

RowColumnDeclaration
	: annotations += AnnotationMark*
	  FEAT_COLUMN (referenceType = [PrimitiveDeclaration | ModelName]) Named ((maps ?= '<=>' | reads ?= '<=') expression = Expression)?
	  ( label = LabelModifier?
	  & icon = IconModifier?
	  & width = WidthModifier?)
	  SC
	;

//RowActionDeclaration
//	: annotations += AnnotationMark*
//	  'action' Named 'function' function = ServiceFunctionCall
//	  SC
//	;

/****************************
 *	Actor
 ****************************/

ActorDeclaration
	: {ActorDeclaration}
	  annotations += AnnotationMark*
	  KW_ACTOR Named
	  map = EntityMapDeclaration?
	  ( realm = RealmModifier?
	  & claim = ClaimModifier?
	  & identity = IdentityModifier?
	  & guard = GuardModifier?)
	  BLOCK_START (members += ActorMemberDeclaration)* BLOCK_END
	;

RealmModifier
	: ATTR_REALM ':' value = StringLiteral
	;

ClaimModifier
	: ATTR_CLAIM ':' value = StringLiteral
	;

IdentityModifier
	: ATTR_IDENTITY ':' expression = Expression
	;

ActorMemberDeclaration
	: ActorMenuDeclaration
	| ActorGroupDeclaration
	;

ActorGroupDeclaration
	: {ViewGroupDeclaration} 
	  annotations += AnnotationMark*
	  FEAT_GROUP
	  ( tag = TagModifier
	  & label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?)
	  BLOCK_START (members += ActorMenuDeclaration)* BLOCK_END
	;

ActorMenuDeclaration
	: annotations += AnnotationMark*
	  FEAT_MENU
	  ( tag = TagModifier
	  & label = LabelModifier?
	  & icon = IconModifier?
	  & target = TargetModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?)
	  SC
	;

/****************************
 *	Datatype
 ****************************/

DataTypeDeclaration
    : annotations += AnnotationMark*
      KW_TYPE
      (
		  primitive = CONST_BOOLEAN Named
		| primitive = CONST_BINARY Named '(' mimeTypes = ModifierMimeTypes ',' maxFileSize = ModifierMaxFileSize ')'
		| primitive = CONST_STRING Named '(' minSize = ModifierMinSize ',' maxSize = ModifierMaxSize (',' regex = ModifierRegex)? ')'
		| primitive = CONST_NUMERIC Named '(' precision = ModifierPrecision ',' scale = ModifierScale ')'
		| primitive = CONST_DATE Named
		| primitive = CONST_TIME Named
		| primitive = CONST_TIMESTAMP Named
      ) SC
    ;


/****************************
 *	Enum
 ****************************/

EnumDeclaration
    : annotations += AnnotationMark*
      KW_ENUM Named
      BLOCK_START (literals += EnumLiteral)* BLOCK_END
    ;

EnumLiteral
    : annotations += AnnotationMark*
      Named '=' value = Natural SC+
    ;


ModifierMinSize
	: 'min-size' '=' value = Natural
	;

ModifierMaxSize
	: 'max-size' '=' value = Natural
	;

ModifierRegex
	: 'regex' '=' regex = StringLiteral
	;

ModifierPrecision
	: 'precision' '=' value = Natural
	;

ModifierScale
	: 'scale' '=' value = Natural
	;

ModifierMimeTypes
	: 'mime-types' '=' '[' values += MimeType (',' values += MimeType)* ']'
	;

MimeType
	: value = StringLiteral
	;

ModifierMaxFileSize
	: 'max-file-size' '=' numeric = Natural (unit = DataUnit)?
	;
	
enum DataUnit
	: KB = 'kB'
	| MB = 'MB'
	| GB = 'GB'
	| KiB = 'KiB'
	| MiB = 'MiB'
	| GiB = 'GiB'
	;

/****************************
 *	Expression
 ***************************/

Expression returns Expression:
    SwitchExpression;

SwitchExpression returns Expression
	: ImpliesExpression (=> ({TernaryOperation.condition=current} '?')
	  thenExpression=SwitchExpression ':'
      elseExpression=SwitchExpression)?
    ;

ImpliesExpression returns Expression
	: OrExpression (=> ({BinaryOperation.leftOperand=current} operator='implies') rightOperand=OrExpression)*
	;

OrExpression returns Expression
	: XorExpression (=> ({BinaryOperation.leftOperand=current} operator='or') rightOperand=XorExpression)*
	;

XorExpression returns Expression
	: AndExpression (=> ({BinaryOperation.leftOperand=current} operator='xor') rightOperand=AndExpression)*
	;

AndExpression returns Expression
	: EqualityExpression (=> ({BinaryOperation.leftOperand=current} operator='and') rightOperand=EqualityExpression)*
	;

EqualityExpression returns Expression
	: RelationalExpression (=> ({BinaryOperation.leftOperand=current} operator=('!='|'==')) rightOperand=RelationalExpression)*
	;

RelationalExpression returns Expression
	: AdditiveExpression (=> ({BinaryOperation.leftOperand=current} operator=('>=' | '<=' | '>' | '<')) rightOperand=AdditiveExpression)*
	;

AdditiveExpression returns Expression
	: MultiplicativeExpression (=> ({BinaryOperation.leftOperand=current} operator=('+'|'-')) rightOperand=MultiplicativeExpression)*
	;

MultiplicativeExpression returns Expression
	: ExponentExpression (=> ({BinaryOperation.leftOperand=current} operator=('*' | '/' | 'div' | 'mod')) rightOperand=ExponentExpression)*
	;

ExponentExpression returns Expression
	: UnaryOperation (=> ({BinaryOperation.leftOperand=current} operator='^') rightOperand=UnaryOperation)*
	;
 
UnaryOperation returns Expression
	: {UnaryOperation} operator='not' operand=UnaryOperation
	| Navigation
    ;

Navigation returns Expression
	: {Navigation} base = NavigationBase (features += Feature)*
	;

NavigationBase
	: Self
	| Parentheses
	| NavigationBaseDeclarationReference
	| QueryCall
	| Literal
	;

Self
	: isSelf ?= 'self'
	;

Parentheses
	: '(' => expression = Expression ')'		
	;
 
NavigationBaseDeclarationReference
	: {NavigationBaseDeclarationReference} reference = [NavigationBaseDeclaration | ModelName]
 	;
 
NavigationBaseDeclaration
	: EntityDeclaration
	| LambdaVariable
	| QueryParameterDeclaration
	| PrimitiveDeclaration
	| EntityMapDeclaration
	;

QueryCall
	: declaration = [QueryDeclaration | ModelName ] '(' (arguments += QueryArgument (',' arguments += QueryArgument)*)? ')'
	;

Feature
	: MemberReference
	| Call
	;

MemberReference
    : '.' member = [NavigationTarget | LocalName]
    ;

Call
	: EntityQueryCall
	| FunctionCall
	| LambdaCall
	;

EntityQueryCall
	: '.' declaration = [EntityQueryDeclaration | LocalName ] => '(' (arguments += QueryArgument (',' arguments += QueryArgument)*)? ')'
	;

FunctionCall
	: '!' declaration = [FunctionDeclaration | LocalName ] '(' (arguments += FunctionArgument (',' arguments += FunctionArgument)*)? ')'
	;

FunctionArgument
    : declaration = [FunctionParameterDeclaration | LocalName ] '=' expression = Expression
    ;

QueryArgument
    : declaration = [QueryParameterDeclaration | LocalName ] '=' expression = Expression
    ;

LambdaCall
	: '!' declaration = [LambdaDeclaration | LocalName ] '(' variable = LambdaVariable => '|' lambdaExpression = Expression ')';

LambdaVariable
    : {LambdaVariable} Named    	
    ;


/****************************
 *	Function
 ***************************/

FunctionDeclaration
	: 'function' returnType = TypeDescription Named '(' (parameters += FunctionParameterDeclaration (',' parameters += FunctionParameterDeclaration)*)? ')' 'on' baseType = TypeDescription SC
	;

FunctionParameterDeclaration
	: isRequired ?= 'required'? description = TypeDescription Named
	;

TypeDescription
	: {TypeDescription} type = Type
	| collection ?= 'collection' '<' type = Type '>'
	| declaration ?= 'declaration' '<' type = Type '>'
	| constant ?= 'constant' '<' type = Type '>'
	;

Type
	: 'boolean' | 'binary' | 'string' | 'numeric' | 'date' | 'time' | 'timestamp' | 'enum' | 'entity'
	;

LambdaDeclaration 
	: 'lambda' returnType = TypeDescription Named '(' (expressionType = TypeDescription)? ')' SC
	;


/****************************
 *	Annotation
 ***************************/

AnnotationDeclaration
	: KW_ANNOTATION Named ('(' (parameters += AnnotationParameterDeclaration (',' parameters += AnnotationParameterDeclaration)*)? ')')?
	  (KW_ON targets += AnnotationTarget (',' targets += AnnotationTarget)*)?
	  (SC | BLOCK_START annotations += AnnotationMark* BLOCK_END )
	;

AnnotationParameterDeclaration
	: referenceType = AnnotationParameterType Named
	;

AnnotationParameterType
	: type = (CONST_BOOLEAN	| CONST_STRING | CONST_NUMERIC)
	;

AnnotationTarget
	: model ?= 'model'
	| type ?= 'type'
	| enumeration ?= 'enum'
	| 'enum' '::' enumLiteral ?= 'literal'
	| entity ?= 'entity'
	| 'entity' '::' entityField ?= 'field'
	| 'entity' '::' entityIdentifier ?= 'identifier'
	| 'entity' '::' entityQuery ?= 'query'
	| 'entity' '::' entityRelation ?= 'relation'
	| 'entity' '::' entityDerived ?= 'derived'
	| 'entity' '::' entityOperation ?= 'operation'
	| transfer ?= 'transfer'
	| 'transfer' '::' transferField ?= 'field'
	| 'transfer' '::' transferConstructor ?= 'constructor'
	| service ?= 'service'
	| 'service' '::' serviceFunction ?= 'function'
	| actor ?= 'actor'
	| query ?= 'query'
	;

AnnotationMark
	: '@' declaration = [AnnotationDeclaration | ModelName] ('(' arguments += AnnotationArgument? (',' arguments += AnnotationArgument?)* ')')?
	;

AnnotationArgument
    : declaration = [AnnotationParameterDeclaration | LocalName] '=' (literal = Literal | reference = [AnnotationParameterDeclaration | LocalName])
    ;

EnumLiteralReference
    : {EnumLiteralReference} enumDeclaration = [EnumDeclaration | ModelName] '#' enumLiteral = [EnumLiteral | EnumLiteralName ]    	
    ;

NavigationTarget
    : EntityFieldDeclaration
	| EntityIdentifierDeclaration
	| EntityRelationDeclaration
	| EntityDerivedDeclaration
    | EntityRelationOppositeInjected
    ;

Literal
	: BooleanLiteral
	| NumberLiteral
	| StringLiteral
	| TemporalLiteral
	| EnumLiteralReference
	;

BooleanLiteral
	: {BooleanLiteral} (CONST_FALSE | isTrue?=CONST_TRUE)
	;

NumberLiteral
	: IntegerLiteral
	| DecimalLiteral
	;

IntegerLiteral hidden()
	: (minus ?= "-" | "+")? value=Natural
	;

DecimalLiteral hidden()
	: (minus ?= "-" | "+")? value=Decimal
	;

StringLiteral
	: {EscapedStringLiteral} value=STRING
	| {RawStringLiteral} value=RAW_STRING
	;

TemporalLiteral
	: {DateLiteral} value=DATE
	| {TimestampLiteral} value=TIMESTAMP
	| {TimeLiteral} value=TIME
	;


 // ************************************
 // For later use
 // ************************************
 
ConstraintDeclaration
	: FEAT_CONSTRAINT Named expression = Expression (error = ErrorModifier?) SC
	;

ErrorModifier
	: ATTR_ERROR ':' value = CreateError
	;
 
/****************************
 *	Error
 ****************************/

ErrorDeclaration
	: KW_ERROR Named (KW_EXTENDS extends = [ErrorDeclaration | ModelName])?
	  (SC | BLOCK_START (fields += ErrorField)* BLOCK_END)
	;

ErrorField
	: FEAT_FIELD referenceType = [PrimitiveDeclaration | ModelName] Named
	  ('=' defaultExpression = Expression)? SC+
	;

CreateError
	: errorDeclarationType=[ErrorDeclaration | ModelName] ('(' (parameters+=ThrowParameter (',' parameters+=ThrowParameter)*)? ')')?
	;

ThrowParameter
	: errorFieldType=[ErrorField | LocalName] '=' expession=Literal;


Decimal returns ecore::EBigDecimal
	: NUMBER '.' NUMBER
	;

Natural returns ecore::EBigInteger
	: NUMBER
	;

EnumLiteralName
	: JSLID
    ;

LocalName
	: JSLID
    ;

ModelName
	: JSLID ('::' JSLID)*
    ;

/****************************
 *	Terminals
 ****************************/

BLOCK_START
	: '{'
	;

BLOCK_END
	: '}'
	;

terminal fragment DIGIT
	: '0'..'9'
	;

terminal fragment ALPHABET
    : 'a'..'z' | 'A'..'Z'    	
    ;

terminal fragment NEWLINE
    : '\n' | '\r'   	
    ;

terminal TIMESTAMP
	: '`' DIGIT+ '-' DIGIT DIGIT '-' DIGIT DIGIT 'T' DIGIT DIGIT ':' DIGIT DIGIT (':' DIGIT DIGIT ('.' DIGIT+)?)? ('Z' | ('+' | '-') DIGIT DIGIT (':' DIGIT DIGIT)?)?'`'
	;

terminal TIME
	: '`' DIGIT DIGIT ':' DIGIT DIGIT (':' DIGIT DIGIT ('.' DIGIT+ )? )? '`'
	;

terminal DATE
	: '`' DIGIT+ '-' DIGIT DIGIT '-' DIGIT DIGIT '`'
	;
 
terminal NUMBER
	: DIGIT+
	;

terminal ID
	: ALPHABET (ALPHABET | DIGIT)* | '`' ALPHABET (ALPHABET | DIGIT)* '`'
	;

terminal STRING
	: '"' ('\\' ('t'|'n'|'f'|'r'|'"'|'\\') | !('\\' | '"' | NEWLINE))* '"'
	;

terminal RAW_STRING
	: 'r"' (!('"' | NEWLINE))* '"'
	;
 
terminal ML_COMMENT
	: '/*'->'*/'
	;

terminal SL_COMMENT
	: '//' !(NEWLINE)*
	;

terminal SC
	: ';'
	;

terminal WS
	: (' '|'\t'|'\r'|'\n')+
	;
