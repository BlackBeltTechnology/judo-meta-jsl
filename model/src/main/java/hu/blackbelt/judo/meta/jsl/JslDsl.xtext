grammar hu.blackbelt.judo.meta.jsl.JslDsl hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate jsldsl "http://www.blackbelt.hu/judo/meta/jsl/JslDsl"
 
ModelDeclaration returns ModelDeclaration
    : {ModelDeclaration}
      annotations += AnnotationMark*
      KW_MODEL name = ModelName SC
      imports += ModelImportDeclaration*
	  (declarations += Declaration)*
    ;

ModelImportDeclaration 
    : KW_IMPORT model = [ModelDeclaration | ModelName] (KW_AS alias = JSLID)? SC
	;

Declaration
	: TypeDeclaration
	| ErrorDeclaration
	| QueryDeclaration
	| FunctionDeclaration
	| LambdaDeclaration
	| AnnotationDeclaration
	;

SingleType 
	: PrimitiveDeclaration
	| EntityDeclaration
	;

TypeDeclaration
	: PrimitiveDeclaration
	| ClassDeclaration
	;

PrimitiveDeclaration
	: EnumDeclaration
	| DataTypeDeclaration
    ;

ClassDeclaration
	: EntityDeclaration
	| TransferDeclaration
	| ViewDeclaration
	| RowDeclaration
	| ActorDeclaration
	;

/****************************
 *	Entity
 ****************************/

EntityDeclaration
	: {EntityDeclaration}
	  annotations += AnnotationMark*
	  KW_ENTITY abstract ?= KW_ABSTRACT? Named
	  (KW_EXTENDS extends += [EntityDeclaration | ModelName] (COMMA extends += [EntityDeclaration | ModelName])*)?
	  (SC | BLOCK_START (members += EntityMemberDeclaration)* BLOCK_END)
	;

EntityMemberDeclaration
	: {EntityStoredFieldDeclaration}
	  annotations += AnnotationMark*
	  ( KW_FIELD required ?= KW_REQUIRED? singleReferenceType = [SingleType | ModelName]
	    Named (ASSIGN defaultExpr = Expression)?
	  | KW_FIELD entityReferenceType = [EntityDeclaration | ModelName] Cardinality
	  	Named (ASSIGN defaultExpr = Expression)?
	  | identifier ?= KW_IDENTIFIER required ?= KW_REQUIRED? primitiveReferenceType = [PrimitiveDeclaration | ModelName]
	    Named (ASSIGN defaultExpr = Expression)?
	  )
	  SC
	  | EntityStoredRelationDeclaration
	  | EntityCalculatedMemberDeclaration
	;

EntityStoredRelationDeclaration
	: {EntityStoredRelationDeclaration}
	  annotations += AnnotationMark*
	  ( KW_RELATION required ?= KW_REQUIRED? entityReferenceType = [EntityDeclaration | ModelName]
	  	Named (ASSIGN defaultExpr = Expression)? opposite = EntityRelationOpposite?
	  | KW_RELATION entityReferenceType = [EntityDeclaration | ModelName] Cardinality
	  	Named (ASSIGN defaultExpr = Expression)? opposite = EntityRelationOpposite?
	  )
	  SC
	;

EntityCalculatedMemberDeclaration
	: {EntityCalculatedFieldDeclaration}
	  annotations += AnnotationMark*
	  KW_FIELD primitiveReferenceType = [PrimitiveDeclaration | ModelName]
	  Named
	  (LP parameters += QueryParameterDeclaration (COMMA parameters += QueryParameterDeclaration)* RP)? LTE getterExpr = Expression
	  SC
	  | EntityCalculatedRelationDeclaration
	;

EntityCalculatedRelationDeclaration
	: {EntityCalculatedRelationDeclaration}
	  annotations += AnnotationMark*
	  KW_RELATION entityReferenceType = [EntityDeclaration | ModelName] Cardinality?
	  Named
	  (LP parameters += QueryParameterDeclaration (COMMA parameters += QueryParameterDeclaration)* RP)? LTE getterExpr = Expression
	  SC
	;

EntityRelationOpposite
	: EntityRelationOppositeInjected
	| EntityRelationOppositeReferenced
	;

EntityRelationOppositeInjected
	: KW_OPPOSITEADD COLON Named Cardinality?
	;

EntityRelationOppositeReferenced
	: KW_OPPOSITE COLON oppositeType = [EntityStoredRelationDeclaration | LocalName]
	;

//EntityOperationDeclaration
//	: annotations += AnnotationMark*
//	  'operation' static ?= 'static'? (KW_VOID? | return = EntityOperationReturnDeclaration) Named
//	  (LP (parameters += EntityOperationParameterDeclaration (COMMA parameters += EntityOperationParameterDeclaration)*)? RP)
//	  (SC | BLOCK_START BLOCK_END )
//	;
//
//EntityOperationReturnDeclaration
//	: referenceType = [SingleType | ModelName] Cardinality?
//	;
//
//EntityOperationParameterDeclaration
//	: referenceType = [SingleType | ModelName] Cardinality? Named
//	;

EntityMapDeclaration
	: LP entity = [EntityDeclaration | ModelName] Named RP  // if no name defined, the 'self' shall be default name
	| KW_MAPS entity = [EntityDeclaration | ModelName] KW_AS Named
	;


/****************************
 *	Query
 ****************************/

QueryDeclaration
	: KW_QUERY (referenceType = [SingleType | ModelName] Cardinality?) Named
	  (LP (parameters += QueryParameterDeclaration (COMMA parameters += QueryParameterDeclaration)*)? RP)
	  LTE getterExpr = Expression
	  SC
	;

QueryParameterDeclaration
	: referenceType = [PrimitiveDeclaration | ModelName] Named (ASSIGN default = Expression)?
	;

/****************************
 *	Transfer
 ****************************/

TransferDeclaration
	: {SimpleTransferDeclaration}
	  annotations += AnnotationMark*
	  KW_TRANSFER Named
	  map = EntityMapDeclaration?
	  (automap ?= SC | BLOCK_START directMembers += TransferMemberDeclaration* BLOCK_END)
	;

TransferMemberDeclaration
	: TransferConstructorDeclaration
	| TransferInitializerDeclaration

	| SimpleTransferCreateDeclaration
	| TransferUpdateDeclaration
	| TransferDeleteDeclaration
	
	| TransferDataMemberDeclaration

	| TransferActionDeclaration
//	| TransferSubmitDeclaration
	;

TransferDataMemberDeclaration
	: TransferFieldDeclaration
	| TransferRelationDeclaration
	;

TransferConstructorDeclaration
	: {TransferConstructorDeclaration}
	  KW_CONSTRUCTOR
	  (SC | BLOCK_START (defaults += TransferDefault)* BLOCK_END)
	;

TransferInitializerDeclaration
	: {TransferInitializerDeclaration}
	  KW_INITIALIZER
	  SC
	;

SimpleTransferCreateDeclaration returns TransferCreateDeclaration
	: {SimpleTransferCreateDeclaration} KW_CREATE (LP transferParameterType = [SimpleTransferDeclaration | ModelName] RP)? default ?= SC
	| {SimpleTransferCreateDeclaration} KW_CREATE  LP transferParameterType = [SimpleTransferDeclaration | ModelName] paramaterName = JSLID RP BLOCK_START BLOCK_END
	;

TransferUpdateDeclaration
	: {TransferUpdateDeclaration}
	  KW_UPDATE
	  SC
	;

TransferDeleteDeclaration
	: {TransferDeleteDeclaration}
	  KW_DELETE
	  SC
	;

TransferDefault
	: member = TransferDataMember ASSIGN rightValue = Expression SC
	;

TransferDataMember
	: 'self' DOT reference = [TransferDataMemberDeclaration | ModelName]
	;

TransferFieldDeclaration
	: annotations += AnnotationMark*
	  KW_FIELD  required ?= KW_REQUIRED? referenceType = [PrimitiveDeclaration | ModelName] Named
	  ((maps ?= MAP | reads ?= LTE) getterExpr = Expression)?
	  SC
	;

TransferRelationDeclaration
	: annotations += AnnotationMark*
	  ( KW_RELATION required ?= KW_REQUIRED? simpleTransferReferenceType = [SimpleTransferDeclaration | ModelName]
	  	Named
	  | KW_RELATION simpleTransferReferenceType = [SimpleTransferDeclaration | ModelName] => Cardinality
	  	Named
	  )
	  ((maps ?= MAP | reads ?= LTE) getterExpr = Expression)?
	  (choices = TransferChoiceModifier?
	  & create = CreateModifier?
	  & update = UpdateModifier?
	  & delete = DeleteModifier?)
	  SC
	;

TransferSubmitDeclaration
	: annotations += AnnotationMark*
	  KW_SUBMIT ReturnFragment Named
	  SC
	;

TransferActionDeclaration
	: annotations += AnnotationMark*
	  KW_ACTION ReturnFragment Named
	  LP (parameterType = [TransferDeclaration | ModelName] paramaterName = JSLID)? RP
	  SC
	;

/****************************
 *	View
 ****************************/

ViewDeclaration returns TransferDeclaration
	: {ViewDeclaration}
	  annotations += AnnotationMark*
	  KW_VIEW Named
	  map = EntityMapDeclaration?
	  (automap ?= SC | BLOCK_START directMembers += ViewMemberDeclaration* BLOCK_END)
	;


CreateModifier
	: KW_CREATE COLON value = BooleanLiteral
	;

UpdateModifier
	: KW_UPDATE COLON value = BooleanLiteral
	;

DeleteModifier
	: KW_DELETE COLON value = BooleanLiteral
	;

ViewMemberDeclaration
	: TransferConstructorDeclaration
	| TransferInitializerDeclaration

	| ViewCreateDeclaration
	| TransferUpdateDeclaration
	| TransferDeleteDeclaration

	| ViewTextDeclaration
	| ViewFieldDeclaration
	| ViewLinkDeclaration
	| ViewTableDeclaration
	
//	| ViewSubmitDeclaration
	| ViewActionDeclaration

	| ViewGroupDeclaration
	| ViewTabsDeclaration
	;

ViewCreateDeclaration returns TransferCreateDeclaration
	: {ViewCreateDeclaration} KW_CREATE (LP viewParameterType = [ViewDeclaration | ModelName] RP)? default ?= SC
	| {ViewCreateDeclaration} KW_CREATE  LP viewParameterType = [ViewDeclaration | ModelName] paramaterName = JSLID RP BLOCK_START BLOCK_END
	;

ViewTabsDeclaration
	: {ViewTabsDeclaration}
	  annotations += AnnotationMark*
	  KW_TABS tag = JSLID
	  ( label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?
	  & width = WidthModifier?
	  & frame = FrameModifier?)
	  BLOCK_START (members += ViewGroupDeclaration)* BLOCK_END
	;

ViewGroupDeclaration
	: {ViewGroupDeclaration} 
	  annotations += AnnotationMark*
	  (horizontal ?= KW_HORIZONTAL | vertical ?= KW_VERTICAL) tag = JSLID
	  ( label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?
	  & width = WidthModifier?
	  & frame = FrameModifier?
	  & halign = HorizontalModifier?
	  & valign = VerticalModifier?
	  & stretch = StretchModifier?)
	  BLOCK_START (members += ViewMemberDeclaration)* BLOCK_END
	;

HorizontalModifier
	: KW_HALIGN COLON (left ?= KW_LEFT | right ?= KW_RIGHT | center ?= KW_CENTER)
	;

VerticalModifier
	: KW_VALIGN COLON (top ?= KW_TOP | bottom ?= KW_BOTTOM | center ?= KW_CENTER)
	;

StretchModifier
	: KW_STRETCH COLON (disabled ?= KW_FALSE | enabled ?= KW_TRUE)
	;

ViewTextDeclaration returns TransferFieldDeclaration
	: {ViewTextDeclaration}
	  annotations += AnnotationMark*
	  KW_TEXT Named reads ?= LTE getterExpr = Expression
	  ( label = LabelModifier?
	  & icon = IconModifier?
	  & ^hidden = HiddenModifier?
	  & width = WidthModifier?)
	  SC
	;

ViewFieldDeclaration returns TransferFieldDeclaration
	: {ViewFieldDeclaration}
	  annotations += AnnotationMark*
	  KW_FIELD  required ?= KW_REQUIRED? referenceType = [PrimitiveDeclaration | ModelName] Named
	  ((maps ?= MAP | reads ?= LTE) getterExpr = Expression)?
	  ( label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?
	  & width = WidthModifier?)
	  SC
	;

ViewLinkDeclaration returns TransferRelationDeclaration
	: {ViewLinkDeclaration}
	  annotations += AnnotationMark*
	  KW_LINK required ?= KW_REQUIRED? viewReferenceType = [ViewDeclaration | ModelName] Named
	  ((maps ?= MAP | reads ?= LTE) getterExpr = Expression)?
	  ( choices = ViewChoiceModifier?
	  & text = TextModifier?
	  & label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?
	  & width = WidthModifier?
	  & create = CreateModifier?
	  & update = UpdateModifier?
	  & delete = DeleteModifier?)
	  SC
	;

ViewTableDeclaration returns TransferRelationDeclaration
	: {ViewTableDeclaration}
	  annotations += AnnotationMark*
	  KW_TABLE rowReferenceType = [RowDeclaration | ModelName] Cardinality Named
	  ((maps ?= MAP | reads ?= LTE) getterExpr = Expression)?
	  ( choices = ViewChoiceModifier?
	  & rows = RowsModifier?
	  & label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?
	  & width = WidthModifier?
	  & detail = DetailModifier?
	  & create = CreateModifier?
	  & update = UpdateModifier?
	  & delete = DeleteModifier?)
	  SC
	;

ViewSubmitDeclaration returns TransferSubmitDeclaration
	: {ViewSubmitDeclaration}
	  annotations += AnnotationMark*
	  KW_SUBMIT ReturnFragment Named
	  ( label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?
	  & width = WidthModifier?
	  & resource = ResourceModifier?)
	  SC
	;

ViewActionDeclaration returns TransferActionDeclaration
	: {ViewActionDeclaration}
	  annotations += AnnotationMark*
	  KW_ACTION ReturnFragment Named
	  LP (parameterType = [ViewDeclaration | ModelName] paramaterName = JSLID)? RP
	  ( label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?
	  & width = WidthModifier?
	  & resource = ResourceModifier?)
	  SC
	;

ResourceModifier
	: KW_ACCESS COLON value = [ActorAccessDeclaration | ModelName]
	;

LabelModifier
	: KW_LABEL COLON value = StringLiteral
	;

IconModifier
	:  KW_ICON COLON value = StringLiteral
	;	

FrameModifier
	: KW_FRAME COLON (disabled ?= KW_FALSE | enabled ?= KW_TRUE)
	;	
	
EnabledModifier
	: KW_ENABLED COLON expression = Expression
	;

HiddenModifier
	: KW_HIDDEN COLON expression = Expression
	;

WidthModifier
	: KW_WIDTH COLON value = NaturalNumber
	;

RowsModifier
	: KW_ROWS COLON value = NaturalNumber
	;

TransferChoiceModifier
	: KW_CHOICES COLON expression = Expression
	;

ViewChoiceModifier returns TransferChoiceModifier
	: KW_CHOICES COLON rows = [RowDeclaration | ModelName] LRB LP expression = Expression RP
	;


TextModifier
	: KW_TEXT COLON expression = Expression
	;

DetailModifier
	: KW_DETAIL COLON view = [ViewDeclaration | ModelName]
	;


/****************************
 *	Row
 ****************************/

RowDeclaration returns TransferDeclaration
	: {RowDeclaration}
	  annotations += AnnotationMark*
	  KW_ROW Named
	  map = EntityMapDeclaration?
	  (automap ?= SC | BLOCK_START (directMembers += RowMemberDeclaration)* BLOCK_END)
	;

RowMemberDeclaration
	: RowColumnDeclaration
	;

RowColumnDeclaration returns TransferFieldDeclaration
	: {RowColumnDeclaration}
	  annotations += AnnotationMark*
	  KW_COLUMN referenceType = [PrimitiveDeclaration | ModelName] Named ((maps ?= MAP | reads ?= LTE) getterExpr = Expression)?
	  ( label = LabelModifier?
	  & icon = IconModifier?
	  & width = WidthModifier?)
	  SC
	;

/****************************
 *	Actor
 ****************************/

ActorDeclaration returns TransferDeclaration
	: {ActorDeclaration}
	  annotations += AnnotationMark*
	  KW_ACTOR (system ?= KW_SYSTEM | human ?= KW_HUMAN) Named
	  map = EntityMapDeclaration?
	  ( realm = RealmModifier?
	  & claim = ClaimModifier?
	  & identity = IdentityModifier?
	  & guard = GuardModifier?)
	  (automap ?= SC | BLOCK_START (directMembers += ActorMemberDeclaration)* BLOCK_END)
	;

RealmModifier
	: KW_REALM COLON value = StringLiteral
	;

ClaimModifier
	: KW_CLAIM COLON value = StringLiteral
	;

IdentityModifier
	: KW_IDENTITY COLON expression = Expression
	;

GuardModifier
	: KW_GUARD COLON expression = Expression
	;

ActorMemberDeclaration
	: ActorAccessDeclaration
	| ActorMenuDeclaration
	| ActorGroupDeclaration
	;

ActorAccessDeclaration returns TransferRelationDeclaration
	: {ActorAccessDeclaration}
	  annotations += AnnotationMark*
	  ( KW_ACCESS transferReferenceType = [TransferDeclaration | ModelName] Named (LTE getterExpr = Expression)?
	  | KW_ACCESS transferReferenceType = [TransferDeclaration | ModelName] Cardinality Named LTE getterExpr = Expression
	  )
	  ( create = CreateModifier?
	  & update = UpdateModifier?
	  & delete = DeleteModifier?)
	  SC
	;

ActorGroupDeclaration
	: annotations += AnnotationMark*
	  KW_GROUP tag = JSLID
	  ( label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?)
	  BLOCK_START (members += ActorMenuDeclaration)* BLOCK_END
	;

ActorMenuDeclaration returns ActorAccessDeclaration
	: {ActorMenuDeclaration}
	  annotations += AnnotationMark*
	  ( KW_MENU viewReferenceType = [ViewDeclaration | ModelName] Named (reads ?= LTE getterExpr = Expression)?
	  | KW_MENU rowReferenceType = [RowDeclaration | ModelName] Cardinality Named reads ?= LTE getterExpr = Expression
	  )
	  ( choices = ViewChoiceModifier?
	  & label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?
	  & rows = RowsModifier?
	  & detail = DetailModifier?
	  & create = CreateModifier?
	  & update = UpdateModifier?
	  & delete = DeleteModifier?)
	  SC
	;

/****************************
 *	Datatype
 ****************************/

DataTypeDeclaration
    : annotations += AnnotationMark*
      KW_TYPE
      ( primitive = KW_BOOLEAN Named
      | primitive = KW_BINARY Named (mimeTypes = ModifierMimeTypes & maxFileSize = ModifierMaxFileSize)
      | primitive = KW_STRING Named (minSize = ModifierMinSize & maxSize = ModifierMaxSize & regex = ModifierRegex?)
      | primitive = KW_NUMERIC Named (precision = ModifierPrecision & scale = ModifierScale)
      | primitive = KW_DATE Named
      | primitive = KW_TIME Named
      | primitive = KW_TIMESTAMP Named
      )
      SC
    ;

ModifierMinSize
	: KW_MINSIZE COLON value = NaturalNumber
	;

ModifierMaxSize
	: KW_MAXSIZE COLON value = NaturalNumber
	;

ModifierRegex
	: KW_REGEX COLON regex = StringLiteral
	;

ModifierPrecision
	: KW_PRECISION COLON value = NaturalNumber
	;

ModifierScale
	: KW_SCALE COLON value = NaturalNumber
	;

ModifierMimeTypes
	: KW_MIMETYPE COLON LB values += MimeType (COMMA values += MimeType)* RB
	;

MimeType
	: value = StringLiteral
	;

ModifierMaxFileSize
	: KW_MAXFILESIZE COLON numeric = NaturalNumber (measure = (KW_KB | KW_MB | KW_GB | KW_KIB | KW_MIB | KW_GIB))? 
	;

/****************************
 *	Enum
 ****************************/

EnumDeclaration
    : annotations += AnnotationMark*
      KW_ENUM Named
      BLOCK_START (literals += EnumLiteral)* BLOCK_END
    ;

EnumLiteral
    : annotations += AnnotationMark*
      Named ASSIGN value = NaturalNumber SC
    ;
	
/****************************
 *	Expression
 ***************************/

Expression returns Expression:
    SwitchExpression;

SwitchExpression returns Expression
	: ImpliesExpression (=> ({TernaryOperation.condition=current} QM)
	  thenExpression=SwitchExpression COLON
      elseExpression=SwitchExpression)?
    ;

ImpliesExpression returns Expression
	: OrExpression (=> ({BinaryOperation.leftOperand=current} operator=KW_IMPLIES) rightOperand=OrExpression)*
	;

OrExpression returns Expression
	: XorExpression (=> ({BinaryOperation.leftOperand=current} operator=KW_OR) rightOperand=XorExpression)*
	;

XorExpression returns Expression
	: AndExpression (=> ({BinaryOperation.leftOperand=current} operator=KW_XOR) rightOperand=AndExpression)*
	;

AndExpression returns Expression
	: EqualityExpression (=> ({BinaryOperation.leftOperand=current} operator=KW_AND) rightOperand=EqualityExpression)*
	;

EqualityExpression returns Expression
	: RelationalExpression (=> ({BinaryOperation.leftOperand=current} operator=(NEQ|EQ)) rightOperand=RelationalExpression)*
	;

RelationalExpression returns Expression
	: AdditiveExpression (=> ({BinaryOperation.leftOperand=current} operator=(GTE | LTE | GT | LT)) rightOperand=AdditiveExpression)*
	;

AdditiveExpression returns Expression
	: MultiplicativeExpression (=> ({BinaryOperation.leftOperand=current} operator=(PLUS|MINUS)) rightOperand=MultiplicativeExpression)*
	;

MultiplicativeExpression returns Expression
	: ExponentExpression (=> ({BinaryOperation.leftOperand=current} operator=(MUL | DIV | KW_DIV | KW_MOD)) rightOperand=ExponentExpression)*
	;

ExponentExpression returns Expression
	: UnaryOperation (=> ({BinaryOperation.leftOperand=current} operator=EXP) rightOperand=UnaryOperation)*
	;
 
UnaryOperation returns Expression
	: {UnaryOperation} operator=KW_NOT operand=UnaryOperation
	| Navigation
    ;

Navigation returns Expression
	: {Navigation} base = NavigationBase (features += Feature)*
	;

NavigationBase
	: Self
	| Parentheses
	| NavigationBaseDeclarationReference
	| QueryCall
	| Literal
	;

Self
	: isSelf ?= 'self'
	;

Parentheses
	: LP => expression = Expression RP		
	;
 
NavigationBaseDeclarationReference
	: {NavigationBaseDeclarationReference} reference = [NavigationBaseDeclaration | ModelName]
 	;
 
NavigationBaseDeclaration
	: EntityDeclaration
	| LambdaVariable
	| QueryParameterDeclaration
	| PrimitiveDeclaration
	| EntityMapDeclaration
	;

QueryCall
	: declaration = [QueryDeclaration | ModelName ] LP (arguments += QueryArgument (COMMA arguments += QueryArgument)*)? RP
	;

Feature
	: MemberReference
	| Call
	;

MemberReference
    : DOT member = [NavigationTarget | LocalName] (LP (arguments += QueryArgument (COMMA arguments += QueryArgument)*)? RP)?
    ;

Call
	: FunctionCall
	| LambdaCall
	;

FunctionCall
	: EXCL declaration = [FunctionDeclaration | LocalName ] LP (arguments += FunctionArgument (COMMA arguments += FunctionArgument)*)? RP
	;

FunctionArgument
    : declaration = [FunctionParameterDeclaration | LocalName ] ASSIGN expression = Expression
    ;

QueryArgument
    : declaration = [QueryParameterDeclaration | LocalName ] ASSIGN expression = Expression
    ;

LambdaCall
	: EXCL declaration = [LambdaDeclaration | LocalName ] LP variable = LambdaVariable => PIPE lambdaExpression = Expression RP;

LambdaVariable
    : {LambdaVariable} Named    	
    ;


/****************************
 *	Function
 ***************************/

FunctionDeclaration
	: KW_FUNCTION returnType = TypeDescription
	  Named LP (parameters += FunctionParameterDeclaration (COMMA parameters += FunctionParameterDeclaration)*)? RP
	  KW_ON baseType = TypeDescription
	  SC
	;

FunctionParameterDeclaration
	: isRequired ?= KW_REQUIRED? description = TypeDescription Named
	;

TypeDescription
	: {TypeDescription} type = Type
	| collection ?= KW_COLLECTION LT type = Type GT
	| declaration ?= KW_DECLARATION LT type = Type GT
	| constant ?= KW_CONSTANT LT type = Type GT
	;

Type
	: KW_BOOLEAN | KW_BINARY | KW_STRING | KW_NUMERIC | KW_DATE | KW_TIME | KW_TIMESTAMP | KW_ENUM | KW_ENTITY
	;

LambdaDeclaration 
	: KW_LAMBDA returnType = TypeDescription
	  Named LP (expressionType = TypeDescription)? RP
	  SC
	;


/****************************
 *	Annotation
 ***************************/

AnnotationDeclaration
	: KW_ANNOTATION Named (LP (parameters += AnnotationParameterDeclaration (COMMA parameters += AnnotationParameterDeclaration)*)? RP)?
	  targets += AnnotationTarget*
	  (SC | BLOCK_START annotations += AnnotationMark* BLOCK_END)
	;

AnnotationParameterDeclaration
	: referenceType = AnnotationParameterType Named
	;

AnnotationParameterType
	: type = (KW_BOOLEAN | KW_STRING | KW_NUMERIC)
	;

AnnotationTarget
	: KW_MODEL COLON model ?= KW_MODEL
	| KW_MODEL COLON ^import ?= KW_IMPORT
	| KW_MODEL COLON type ?= KW_TYPE
	| KW_MODEL COLON enumeration ?= KW_ENUM
	| KW_MODEL COLON entity ?= KW_ENTITY
	| KW_MODEL COLON transfer ?= KW_TRANSFER
	| KW_MODEL COLON actor ?= KW_ACTOR
	| KW_MODEL COLON query ?= KW_QUERY
	| KW_MODEL COLON view ?= KW_VIEW
	| KW_MODEL COLON row ?= KW_ROW
	
	| KW_ENUM COLON enumLiteral ?= KW_LITERAL

	| KW_ENTITY COLON entityField ?= KW_FIELD
	| KW_ENTITY COLON entityRelation ?= KW_RELATION

	| KW_TRANSFER COLON transferAction ?= KW_ACTION
	| KW_TRANSFER COLON transferConstructor ?= KW_CONSTRUCTOR
	| KW_TRANSFER COLON transferDestructor ?= KW_DESTRUCTOR
	| KW_TRANSFER COLON transferField ?= KW_FIELD
	| KW_TRANSFER COLON transferInitializer ?= KW_INITIALIZER
	| KW_TRANSFER COLON transferRelation ?= KW_RELATION
	| KW_TRANSFER COLON transferSubmit ?= KW_SUBMIT

	| KW_ACTOR COLON actorGroup ?= KW_GROUP
	| KW_ACTOR COLON actorMenu ?= KW_MENU
	| KW_ACTOR COLON actorAccess ?= KW_ACCESS

	| KW_VIEW COLON viewAction ?= KW_ACTION
	| KW_VIEW COLON viewConstructor ?= KW_CONSTRUCTOR
	| KW_VIEW COLON viewDestructor ?= KW_DESTRUCTOR
	| KW_VIEW COLON viewField ?= KW_FIELD
	| KW_VIEW COLON viewGroup ?= KW_GROUP
	| KW_VIEW COLON viewInitializer ?= KW_INITIALIZER
	| KW_VIEW COLON viewLink ?= KW_LINK
	| KW_VIEW COLON viewSubmit ?= KW_SUBMIT
	| KW_VIEW COLON viewTable ?= KW_TABLE
	| KW_VIEW COLON viewTabs ?= KW_TABS
	| KW_VIEW COLON viewText ?= KW_TEXT

	| KW_ROW COLON rowColumn ?= KW_COLUMN
	;

AnnotationMark
	: '@' declaration = [AnnotationDeclaration | ModelName] (LP arguments += AnnotationArgument? (COMMA arguments += AnnotationArgument?)* RP)?
	;

AnnotationArgument
    : declaration = [AnnotationParameterDeclaration | LocalName] ASSIGN (literal = Literal | reference = [AnnotationParameterDeclaration | LocalName])
    ;

EnumLiteralReference
    : {EnumLiteralReference} enumDeclaration = [EnumDeclaration | ModelName] '#' enumLiteral = [EnumLiteral | EnumLiteralName ]    	
    ;

NavigationTarget
    : EntityMemberDeclaration
    | EntityRelationOppositeInjected
    ;



 // ************************************
 // For later use
 // ************************************
 
ConstraintDeclaration
	: KW_CONSTRAINT Named expression = Expression (throw = ThrowModifier?) SC
	;

ThrowModifier
	: KW_THROW COLON value = CreateError
	;
 
/****************************
 *	Error
 ****************************/

ErrorDeclaration
	: KW_ERROR Named (KW_EXTENDS extends = [ErrorDeclaration | ModelName])?
	  (SC | BLOCK_START (fields += ErrorField)* BLOCK_END)
	;

ErrorField
	: KW_FIELD referenceType = [PrimitiveDeclaration | ModelName] Named
	  (ASSIGN defaultExpr = Expression)? SC
	;

CreateError
	: errorDeclarationType=[ErrorDeclaration | ModelName] (LP (parameters+=ThrowParameter (COMMA parameters+=ThrowParameter)*)? RP)?
	;

ThrowParameter
	: errorFieldType=[ErrorField | LocalName] ASSIGN expession=Literal;


/****************************
 *	Literals
 ****************************/

Literal
	: BooleanLiteral
	| NumberLiteral
	| StringLiteral
	| TemporalLiteral
	| EnumLiteralReference
	;

BooleanLiteral
	: {BooleanLiteral} (KW_FALSE | isTrue?=KW_TRUE)
	;

NumberLiteral
	: IntegerLiteral
	| DecimalLiteral
	;

IntegerLiteral hidden()
	: (minus ?= MINUS | PLUS)? value=NaturalNumber
	;

DecimalLiteral hidden()
	: (minus ?= MINUS | PLUS)? value=DecimalNumber
	;

StringLiteral
	: {EscapedStringLiteral} value=STRING
	| {RawStringLiteral} value=RAW_STRING
	;

TemporalLiteral
	: {DateLiteral} value=DATE
	| {TimestampLiteral} value=TIMESTAMP
	| {TimeLiteral} value=TIME
	;


/****************************
 *	Common
 ****************************/

fragment Named
	: name = JSLID;

fragment Cardinality
    : many ?= LRB
    ;

fragment ReturnFragment
	: KW_VOID?
	| referenceTypes += [TransferDeclaration | ModelName]
	| LT referenceTypes += [TransferDeclaration | ModelName] (PIPE referenceTypes += [TransferDeclaration | ModelName])+ GT
	;

DecimalNumber returns ecore::EBigDecimal
	: DECIMAL
	;

NaturalNumber returns ecore::EBigInteger
	: NUMBER
	;

EnumLiteralName
	: JSLID
    ;

LocalName
	: JSLID
    ;

ModelName
	: JSLID SUBID*
    ;

JSLID: ID
	
	// Declarations
	| KW_ABSTRACT | KW_ACTOR | KW_ANNOTATION | KW_AS | KW_ENTITY | KW_ENUM | KW_ERROR | KW_EXTENDS | KW_FUNCTION | KW_HUMAN |  KW_IMPORT
	| KW_LAMBDA | KW_MODEL | KW_ON | KW_QUERY | KW_ROW | KW_SYSTEM | KW_TRANSFER | KW_TYPE | KW_VIEW

	// Features	
	| KW_ACCESS | KW_ACTION | KW_COLUMN | KW_CONSTRAINT | KW_CONSTRUCTOR | KW_FIELD
	| KW_GROUP | KW_HORIZONTAL | KW_IDENTIFIER | KW_LINK | KW_LITERAL | KW_MENU | KW_RELATION | KW_SUBMIT | KW_TABLE | KW_TABS
	| KW_TEXT | KW_VERTICAL
	
	// Constants
	| KW_BINARY | KW_BOOLEAN | KW_BOTTOM | KW_CENTER | KW_COLLECTION | KW_CONSTANT | KW_DATE | KW_DECLARATION | KW_LEFT | KW_NUMERIC | KW_RIGHT
	| KW_STRING | KW_TIME | KW_TIMESTAMP | KW_TOP | KW_KB | KW_MB | KW_GB | KW_KIB | KW_MIB | KW_GIB
	
	// Attributes
	| KW_CHOICES | KW_CLAIM | KW_CREATE | KW_DELETE | KW_DETAIL | KW_ENABLED | KW_FRAME | KW_GUARD | KW_HIDDEN | KW_ICON
	| KW_IDENTITY | KW_LABEL | KW_REALM | KW_ROWS | KW_SCALE | KW_THROW
	| KW_UPDATE | KW_WIDTH  // KW_REQUIRED is missing deliberately !!!!
	
	// Other
	| KW_OR | KW_XOR | KW_AND | KW_DIV | KW_MOD

	;


/****************************
 *	Terminals
 ****************************/

terminal KW_ABSTRACT:	'abstract';
terminal KW_ACTOR:		'actor';
terminal KW_ANNOTATION:	'annotation';
terminal KW_AS:			'as';
terminal KW_ENTITY:		'entity';
terminal KW_ENUM:		'enum';
terminal KW_ERROR:		'error';
terminal KW_EXTENDS:	'extends';
terminal KW_FUNCTION:	'function';
terminal KW_HUMAN:		'human';
terminal KW_IMPORT:		'import';
terminal KW_LAMBDA:		'lambda';
terminal KW_MAPS:		'maps';
terminal KW_MODEL:		'model';
terminal KW_ON:			'on';
terminal KW_QUERY:		'query';
terminal KW_ROW:		'row';
terminal KW_SYSTEM:		'system';
terminal KW_TRANSFER:	'transfer';
terminal KW_TYPE:		'type';
terminal KW_VIEW:		'view';

terminal KW_ACCESS:		'access';
terminal KW_ACTION:		'action';
terminal KW_COLUMN:		'column';
terminal KW_CONSTRAINT:	'constraint';
terminal KW_CONSTRUCTOR:'constructor';
terminal KW_CREATE:		'create';
terminal KW_DELETE:		'delete';
terminal KW_DESTRUCTOR:	'destructor';
terminal KW_FIELD:		'field';
terminal KW_GROUP:		'group';
terminal KW_HORIZONTAL: 'horizontal';
terminal KW_IDENTIFIER:	'identifier';
terminal KW_INITIALIZER:'initializer';
terminal KW_LINK:		'link';
terminal KW_LITERAL:	'literal';
terminal KW_MENU:		'menu';
terminal KW_RELATION:	'relation';
terminal KW_SUBMIT:		'submit';
terminal KW_TABLE:		'table';
terminal KW_TABS:		'tabs';
terminal KW_TEXT:		'text';
terminal KW_UPDATE:		'update';
terminal KW_VERTICAL:   'vertical';

terminal KW_BINARY:		'binary';
terminal KW_BOOLEAN:	'boolean';
terminal KW_BOTTOM:		'bottom';
terminal KW_CENTER:		'center';
terminal KW_COLLECTION:	'collection';
terminal KW_CONSTANT:	'constant';
terminal KW_DATE:		'date';
terminal KW_DECLARATION:'declaration';
terminal KW_FALSE:		'false';
terminal KW_LEFT:		'left';
terminal KW_NUMERIC:	'numeric';
terminal KW_RIGHT:		'right';
terminal KW_STRING:		'string';
terminal KW_TIME:		'time';
terminal KW_TIMESTAMP:	'timestamp';
terminal KW_TOP:		'top';
terminal KW_TRUE:		'true';
terminal KW_VOID:		'void';

terminal KW_CHOICES:	'choices';
terminal KW_CLAIM:		'claim';
terminal KW_DETAIL:		'detail';
terminal KW_ENABLED:	'enabled';
terminal KW_FRAME:		'frame';
terminal KW_GUARD:		'guard';
terminal KW_HIDDEN:		'hidden';
terminal KW_HALIGN:	    'h-align';
terminal KW_ICON:		'icon';
terminal KW_IDENTITY:	'identity';
terminal KW_LABEL:		'label';
terminal KW_MAXFILESIZE:'max-file-size';
terminal KW_MAXSIZE:	'max-size';
terminal KW_MINSIZE:	'min-size';
terminal KW_MIMETYPE:	'mime-type';
terminal KW_OPPOSITE:	'opposite';
terminal KW_OPPOSITEADD:'opposite-add';
terminal KW_PRECISION:	'precision';
terminal KW_REALM:		'realm';
terminal KW_REGEX:		'regex';
terminal KW_REQUIRED:	'required';
terminal KW_ROWS:		'rows';
terminal KW_SCALE:		'scale';
terminal KW_STRETCH:	'stretch';
terminal KW_THROW:		'throw';
terminal KW_VALIGN:		'v-align';
terminal KW_WIDTH:		'width';

terminal KW_NOT:        'not';
terminal KW_IMPLIES:	'implies';
terminal KW_OR:			'or';
terminal KW_XOR:		'xor';
terminal KW_AND:		'and';
terminal KW_DIV:		'div';
terminal KW_MOD:		'mod';
terminal KW_KB:			'KB';
terminal KW_MB:			'MB';
terminal KW_GB:			'GB';
terminal KW_KIB:		'KiB';
terminal KW_MIB:		'MiB';
terminal KW_GIB:		'GiB';

terminal LP:    '(';
terminal RP:    ')';
terminal DOT:   '.';
terminal COMMA: ',';
terminal LB:    '[';
terminal RB:    ']';
terminal LRB:   '[]';
terminal ASSIGN:'=';
terminal LT:    '<';
terminal GT:    '>';
terminal QM:    '?';
terminal COLON: ':';
terminal NEQ:   '!=';
terminal EQ:    '==';
terminal GTE:   '>=';
terminal LTE:   '<=';
terminal MAP:   '<=>';
terminal PLUS:  '+';
terminal MINUS: '-';
terminal MUL:   '*';
terminal DIV:   '/';
terminal EXP:   '^';
terminal EXCL:  '!';
terminal PIPE:  '|';

//terminal IMPLIES: 'implies';
//terminal OR:      'or';
//terminal XOR:     'xor';
//terminal AND:     'and';
//terminal DIV:     'div';
//terminal MODE:    'mod';

terminal BLOCK_START
	: '{'
	;

terminal BLOCK_END
	: '}' WS? SC?
	;

terminal fragment DIGIT
	: '0'..'9'
	;

terminal fragment ALPHABET
    : 'a'..'z' | 'A'..'Z'    	
    ;

terminal fragment NEWLINE
    : '\n' | '\r'   	
    ;

terminal TIMESTAMP
	: '`' DIGIT+ '-' DIGIT DIGIT '-' DIGIT DIGIT 'T' DIGIT DIGIT ':' DIGIT DIGIT (':' DIGIT DIGIT ('.' DIGIT+)?)? ('Z' | ('+' | '-') DIGIT DIGIT (':' DIGIT DIGIT)?)?'`'
	;

terminal TIME
	: '`' DIGIT DIGIT ':' DIGIT DIGIT (':' DIGIT DIGIT ('.' DIGIT+ )? )? '`'
	;

terminal DATE
	: '`' DIGIT+ '-' DIGIT DIGIT '-' DIGIT DIGIT '`'
	;

terminal DECIMAL
	: NUMBER '.' NUMBER
	;

terminal NUMBER
	: DIGIT+
	;

terminal SUBID
	: ('::' ID)
	;

terminal ID
	: ALPHABET (ALPHABET | DIGIT)* | '`' ALPHABET (ALPHABET | DIGIT)* '`'
	;

terminal STRING
	: '"' ('\\' ('t'|'n'|'f'|'r'|'"'|'\\') | !('\\' | '"' | NEWLINE))* '"'
	;

terminal RAW_STRING
	: 'r"' (!('"' | NEWLINE))* '"'
	;
 
terminal ML_COMMENT
	: '/*'->'*/'
	;

terminal SL_COMMENT
	: '//' !(NEWLINE)*
	;

terminal SC
	: (';' WS?)+
	;

terminal WS
	: (' '|'\t'|'\r'|'\n')+
	;
