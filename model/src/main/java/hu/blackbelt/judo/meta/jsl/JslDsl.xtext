grammar hu.blackbelt.judo.meta.jsl.JslDsl hidden(WS, NL, SL_COMMENT, ML_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate jsldsl "http://www.blackbelt.hu/judo/meta/jsl/JslDsl"
 
ModelDeclaration returns ModelDeclaration hidden(WS, SL_COMMENT, ML_COMMENT)
    : {ModelDeclaration} 'model' name = ModelName
      imports += ModelImport*
	  (declarations += Declaration)*
	  NL*
    ;

//ModelImport
//    : =>NL+ 'import' importedModel = [ModelDeclaration] ('as' alias = ID)?
//	;

ModelImport
    : NL+ 'import' modelName = ModelImportDeclaration
	;

ModelImportDeclaration
    : importName = ModelName ('as' alias = ID)?
	;

Declaration
	: NL+ (TypeDeclaration
	| ErrorDeclaration
	| QueryDeclaration )
	;

TypeDeclaration
	: PrimitiveDeclaration
	| ClassDeclaration
	;

PrimitiveDeclaration
	: EnumDeclaration
	| DataTypeDeclaration
    ;

ClassDeclaration
	: EntityDeclaration
	;

/****************************
 *	Entity
 ****************************/
fragment Named
	: name = ID;

fragment Cardinality
    : isMany ?= '[]'
    ;

EntityDeclaration
	: {EntityDeclaration}
	  'entity' isAbstract ?= 'abstract'? Named
	  ('extends' extends += [EntityDeclaration | LocalName] (',' extends += [EntityDeclaration | LocalName])*)?
	  BLOCK_START (members += EntityMemberDeclaration)* BLOCK_END
	;


QueryDeclaration
	: 'query' (referenceType = [EntityDerivedSingleType | LocalName] Cardinality?) Named
	  ('(' parameters += QueryDeclarationParameter (',' parameters += QueryDeclarationParameter)* ')')
	  "=" expression = Expression
	;

EntityMemberDeclaration
	: NL+ (EntityFieldDeclaration
	| EntityIdentifierDeclaration
	| EntityRelationDeclaration
	| EntityDerivedDeclaration
	| EntityQueryDeclaration
	| ConstraintDeclaration)
	;

ConstraintDeclaration
	: 'constraint' expression = Expression ('onerror' error = CreateError)?
	;

EntityFieldDeclaration
	: ('field')? (isRequired ?= 'required'? referenceType = [EntityFieldSingleType | LocalName] Cardinality?) Named
	  (defaultExpression = DefaultExpressionType)?
	;


DefaultExpressionType
	: {DefaultExpressionType} '=' expression = (
		Literal 
		| EnumLiteralReference 
		| NavigationBase 
		| ParenthesizedExpression
		| CreateExpression
	)
	;

EntityFieldSingleType 
	: PrimitiveDeclaration
	| EntityDeclaration
	;

EntityIdentifierDeclaration
	: 'identifier' isRequired ?= 'required'? referenceType = [PrimitiveDeclaration | LocalName] Named
	  (defaultExpression = DefaultExpressionType)?
	;

EntityDerivedDeclaration
	: 'derived' (referenceType = [EntityDerivedSingleType | LocalName] Cardinality?) Named
	  "=" expression = Expression
	;

EntityDerivedSingleType
	: PrimitiveDeclaration
	| EntityDeclaration
	;

EntityQueryDeclaration
	: 'query' (referenceType = [EntityQueryTargetType | LocalName] Cardinality?) Named
	  ('(' parameters += QueryDeclarationParameter (',' parameters += QueryDeclarationParameter)* ')')
	  "=" expression = Expression
	;

EntityQueryTargetType
	: PrimitiveDeclaration
	| EntityDeclaration
	;

QueryDeclarationParameter
	: referenceType = [PrimitiveDeclaration | LocalName] Named "=" default = Literal
	;

EntityRelationDeclaration
	: 'relation' (isRequired ?= 'required'? referenceType = [EntityDeclaration | LocalName] Cardinality?) Named
	  opposite = EntityRelationOpposite?
	;

EntityRelationOpposite
	: 'opposite-add' oppositeName = ID Cardinality?
	| 'opposite' oppositeType = [EntityRelationDeclaration | LocalName]
	;


/****************************
 *	Error
 ****************************/

ErrorDeclaration
	: 'error' Named ('extends' extends = [ErrorDeclaration])?
	  BLOCK_START (fields += ErrorField)* BLOCK_END
	;

ErrorField
	: NL+ 'field' isRequired ?= 'required'? referenceType = [PrimitiveDeclaration | LocalName] Named
	  (defaultExpression = DefaultExpressionType)?
	;

CreateError
	: errorDeclarationType=[ErrorDeclaration | LocalName] ('(' (parameters+=ThrowParameter (',' parameters+=ThrowParameter)*)? ')')?
	;

ThrowParameter
	: errorFieldType=[ErrorField | LocalName] '=' expession=Expression;



/****************************
 *	Datatype
 ****************************/

    
DataTypeDeclaration
    : {DataTypeDeclaration} 'type'
      (
		  primitive = 'boolean' Named
		| primitive = 'binary' Named (mimeTypes = ModifierMimeTypes? & maxFileSize = ModifierMaxFileSize?) 
		| primitive = 'string' Named (maxLength = ModifierMaxLength & regex = ModifierRegex?)
		| primitive = 'numeric' Named (precision = ModifierPrecision & scale = ModifierScale)
		| primitive = 'date' Named
		| primitive = 'time' Named
		| primitive = 'timestamp' Named
      )
    ;

/****************************
 *	Enum
 ****************************/

EnumDeclaration
    : 'enum' Named
      BLOCK_START (literals += EnumLiteral)+ BLOCK_END
    ;

EnumLiteral
    : NL+ Named '=' value = INTEGER
    ;


ModifierMaxLength
	: 'max-length' maxLength = INTEGER
	;

ModifierRegex
	: 'regex' regex = StringLiteral
	;

ModifierPrecision
	: 'precision' precision = INTEGER
	;

ModifierScale
	: 'scale' scale = INTEGER
	;


ModifierMimeTypes
	: 'mime-types' mimeTypes+=MIME_TYPE (',' mimeTypes += MIME_TYPE)*
	;

ModifierMaxFileSize
	: 'max-file-size' maxFileSize = INTEGER
	;
	

/****************************
 *	Expression
 ***************************/

Expression returns Expression hidden(WS, CONT_NL, SL_COMMENT, ML_COMMENT)
	: SwitchExpression
	;

MultilineExpression returns Expression hidden(WS, NL, CONT_NL, SL_COMMENT, ML_COMMENT)
	: SwitchExpression
	;

// right associative rule
SwitchExpression returns Expression
	: ImpliesExpression (=> ({TernaryOperation.condition=current} '?')
	  thenExpression=SwitchExpression ':'
      elseExpression=SwitchExpression)?
    ;

ImpliesExpression returns Expression
	: OrExpression (=> ({BinaryOperation.leftOperand=current} operator='implies') rightOperand=OrExpression)*
	;

OrExpression returns Expression
	: XorExpression (=> ({BinaryOperation.leftOperand=current} operator='or') rightOperand=XorExpression)*
	;

XorExpression returns Expression
	: AndExpression (=> ({BinaryOperation.leftOperand=current} operator='xor') rightOperand=AndExpression)*
	;

AndExpression returns Expression
	: EqualityExpression (=> ({BinaryOperation.leftOperand=current} operator='and') rightOperand=EqualityExpression)*
	;

EqualityExpression returns Expression
	: RelationalExpression (=> ({BinaryOperation.leftOperand=current} operator=('!='|'==')) rightOperand=RelationalExpression)*
	;

RelationalExpression returns Expression
	: AdditiveExpression (=> ({BinaryOperation.leftOperand=current} operator=('>=' | '<=' | '>' | '<')) rightOperand=AdditiveExpression)*
	;

AdditiveExpression returns Expression
	: MultiplicativeExpression (=> ({BinaryOperation.leftOperand=current} operator=('+'|'-')) rightOperand=MultiplicativeExpression)*
	;

MultiplicativeExpression returns Expression
	: ExponentExpression (=> ({BinaryOperation.leftOperand=current} operator=('*' | '/' | 'div' | 'mod')) rightOperand=ExponentExpression)*
	;

ExponentExpression returns Expression
	: SpawnOperation (=> ({BinaryOperation.leftOperand=current} operator='^') rightOperand=SpawnOperation)*
	;

SpawnOperation returns Expression
	: UnaryOperation (=> ({SpawnOperation.operand=current} 'as' spawnTargetType=LocalName))?
	;

UnaryOperation returns Expression
	: {UnaryOperation} operator=('not' | '-') operand=FunctionedExpression
    | FunctionedExpression
    ;

FunctionedExpression returns Expression
	: NavigationExpression ({FunctionedExpression.operand=current} functionCall=FunctionCall)?
	;

NavigationExpression returns Expression
	: PrimaryExpression ({NavigationExpression.base=current} features+=Feature+)?
    | NavigationBase
    | EnumLiteralReference
    | QueryCall ({NavigationExpression.base=current} features+=Feature+)?
    ;

PrimaryExpression returns Expression
	: ParenthesizedExpression
	| CreateExpression
	| Literal
	;

NavigationBase returns Expression
	: {NavigationExpression} (isSelf ?= 'self' | navigationBaseType = [NavigationBaseReference | LocalName]) (features+=Feature*) 
	;

NavigationBaseReference
	: EntityDeclaration
	| LambdaVariable
	| QueryDeclarationParameter
	;
	
QueryCall returns Expression
	: {QueryCall} queryDeclarationReference = [ QueryDeclaration | LocalName ] '(' (parameters+=QueryParameter (',' parameters+=QueryParameter)*)? ')'
	;

EnumLiteralReference returns Expression
    : {EnumLiteralReference} enumDeclaration = [EnumDeclaration | LocalName] '#' enumLiteral = [EnumLiteral | EnumLiteralName ]    	
    ;

FunctionCall
	: {FunctionCall} '!' function=Function features+=Feature* call=FunctionCall?
	;

Feature
    : {Feature} '.' member = NavigationFeature
    ;

NavigationFeature returns Feature
	: navigationDeclarationType = [NavigationDeclaration | LocalName ] ('(' (parameters+=QueryParameter (',' parameters+=QueryParameter)*)? ')')?
	;

NavigationDeclaration
    : LambdaVariable
    | EntityMemberDeclaration
    ;

QueryParameter
	:  queryParameterType=[QueryDeclarationParameter | QueryParameterName] '=' (literal = Literal | parameter = [QueryDeclarationParameter | QueryParameterName])     // expression=MultilineExpression
	;

ParenthesizedExpression returns Expression
	: {ParenthesizedExpression} '(' =>expression = MultilineExpression ')'
	;


CreateExpression returns Expression
	: {CreateExpression} 'new' createType=[ClassDeclaration | LocalName]
	  (   '(' (assignments+=CreateParameter (',' assignments+=CreateParameter)*)? ')'
	  	| '[' (creates += MultilineExpression (',' creates += MultilineExpression)*)? ']'
	  )
	;

CreateParameter:
    name=ID '=' right=MultilineExpression;


Function returns Function
	: name=ID '(' parameterDeclaration = FunctionParameterDeclaration? ')'
    ;

FunctionParameterDeclaration
	: LambdaFunctionParameters
	| ParametrizedFunctionParameters
	;

LambdaFunctionParameters
    : lambdaArgument=LambdaVariable '|' expression = Expression
	;

ParametrizedFunctionParameters
	: parameters+=FunctionParameter (',' parameters+=FunctionParameter)*
    ;
    
LambdaVariable
    : {LambdaVariable} Named    	
    ;

FunctionParameter
	: {FunctionParameter} expression=MultilineExpression
	;

Literal returns Expression
	: BooleanLiteral
	| NumberLiteral
	| StringLiteral
	| TemporalLiteral
	;

BooleanLiteral returns Expression
	: {BooleanLiteral} ('false' | isTrue?='true')
	;

NumberLiteral returns Expression
	: {IntegerLiteral} value=INTEGER
	| {DecimalLiteral} value=DECIMAL
	;

StringLiteral returns Expression
	: {EscapedStringLiteral} value=STRING
	| {RawStringLiteral} value=RAW_STRING
	;

TemporalLiteral returns Expression
	: {DateLiteral} value=DATE
	| {TimeStampLiteral} value=TIMESTAMP
	| {TimeLiteral} value=TIME
	;


EnumLiteralName
	: ID
    ;

QueryParameterName
	: ID
    ;

LocalName
	: (ID '::')? ID
    ;

ModelName
	: ID('::' ID)*
    ;

/****************************
 *	Terminals
 ****************************/

BLOCK_START
	: NL* '{'
	;

BLOCK_END
	: NL* '}'
	;


terminal fragment DIGIT
	: '0'..'9'
	;

terminal fragment ALPHABET
    : 'a'..'z' | 'A'..'Z'    	
    ;

terminal fragment NEWLINE
    : '\n' | '\r'   	
    ;

terminal TIMESTAMP
	: '`' DIGIT+ '-' DIGIT DIGIT '-' DIGIT DIGIT 'T' DIGIT DIGIT ':' DIGIT DIGIT (':' DIGIT DIGIT ('.' DIGIT+ )? )? ('Z' | ('+' | '-') DIGIT DIGIT ':' DIGIT DIGIT )'`'
	;

terminal TIME
	: '`' DIGIT DIGIT ':' DIGIT DIGIT (':' DIGIT DIGIT ('.' DIGIT+ )? )? '`'
	;

terminal DATE
	: '`' DIGIT+ '-' DIGIT DIGIT '-' DIGIT DIGIT '`'
	;


terminal DECIMAL returns ecore::EBigDecimal
	: '-'? DIGIT+ '.' DIGIT+
	;

terminal INTEGER returns ecore::EBigInteger
	: '-'? DIGIT+
	;

terminal ID
	: '\\'? ALPHABET (ALPHABET | DIGIT)*
	;

terminal STRING
	: '"' ('\\' ('t'|'n'|'f'|'r'|'"'|'\\') | !('\\' | '"' | NEWLINE))* '"'
	;

terminal RAW_STRING
	: 'r"' (!('"' | NEWLINE))* '"'
	;


terminal MIME_TYPE
    : 'm"' (ALPHABET)+ '/' ('*' | (ALPHABET)+ ('.' (ALPHABET)+)* ) '"'
	;

terminal CONT_NL
	: '\\' (' ' | '\t')* '\r'? '\n'
	;
 
terminal ML_COMMENT
	: '/*'->'*/'
	;

terminal SL_COMMENT
	: '//' !(NEWLINE)*
	;

terminal WS
	: (' ' | '\t')+
	;

terminal NL
	: NEWLINE | ';'
	;

terminal ANY_OTHER
	: .
	;
