grammar hu.blackbelt.judo.meta.jsl.JslDsl hidden(SL_COMMENT, ML_COMMENT, WS, NL, CONT_NL)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate jsldsl "http://www.blackbelt.hu/judo/meta/jsl/JslDsl"
 
ModelDeclaration returns ModelDeclaration hidden(SL_COMMENT, ML_COMMENT, WS, CONT_NL)
    : {ModelDeclaration} 'model' name = ID
	  (declarations += Declaration)*
	  NL?
    ;

Declaration
	: NL (TypeDeclaration
	| ErrorDeclaration)
	;

TypeDeclaration
	: PrimitiveDeclaration
	| ClassDeclaration
	;

PrimitiveDeclaration
	: DataTypeDeclaration
	| EnumDeclaration
    ;

ClassDeclaration
	: EntityDeclaration
	;

/****************************
 *	Entity
 ****************************/

EntityDeclaration returns EntityDeclaration
	: {EntityDeclaration}
	  'entity' isAbstract ?= 'abstract'? name = ID
	  ('extends' extends += [EntityDeclaration] (',' extends += [EntityDeclaration])*)?
	  BLOCK_START (members += EntityMemberDeclaration)* BLOCK_END
	;

EntityMemberDeclaration
	: NL (EntityFieldDeclaration
	| EntityIdentifierDeclaration
	| EntityRelationDeclaration
	| EntityDerivedDeclaration
	| ConstraintDeclaration)
	;

ConstraintDeclaration
	: 'constraint' expression = Expression ('onerror' error = CreateError)?
	;

EntityFieldDeclaration
	: 'field' (isRequired ?= 'required'? singleType = [EntityFieldSingleType] | arrayType = [EntityDeclaration] '[]') name = ID
	  ("=" default = Expression)?
	;

EntityFieldSingleType
	: PrimitiveDeclaration
	| EntityDeclaration
	;

EntityIdentifierDeclaration
	: 'identifier' isRequired ?= 'required'? type = [PrimitiveDeclaration] name = ID
	  ("=" default = Expression)?
	;

EntityDerivedDeclaration
	: 'derived' (singleType = [EntityDerivedSingleType] | arrayType = [EntityDeclaration] '[]') name = ID
	  ('(' parameters += DerivedParameter (',' parameters += DerivedParameter)* ')')?
	  "=" expression = Expression
	;

EntityDerivedSingleType
	: PrimitiveDeclaration
	| EntityDeclaration
	;

DerivedParameter
	: type = [PrimitiveDeclaration] name = ID "=" default = Expression
	;

EntityRelationDeclaration
	: 'relation' (isRequired ?= 'required'? singleType = [EntityDeclaration] | arrayType = [EntityDeclaration] '[]') name = ID
	  opposite = Opposite?
	;

Opposite
	: kind = ('opposite-name' | 'opposite-single' | 'opposite-many') name = ID
	;


/****************************
 *	Error
 ****************************/

ErrorDeclaration
	: 'error' name = ID ('extends' extends = [ErrorDeclaration])?
	  BLOCK_START (fields += ErrorField)* BLOCK_END
	;

ErrorField
	: NL 'field' isRequired ?= 'required'? type = [PrimitiveDeclaration] name = ID
	  ("=" default = Expression)?
	;

CreateError
	: type=[ErrorDeclaration] ('(' (parameters+=ThrowParameter (',' parameters+=ThrowParameter)*)? ')')?
	;

ThrowParameter:
    name=ID '=' expession=Expression;



/****************************
 *	Datatype
 ****************************/

    
DataTypeDeclaration
    : 'type'
      (
		  primitive = 'boolean' name = ID
		| primitive = 'binary' name = ID
		| primitive = 'string' name = ID (maxLength = ModifierMaxLength & regex = ModifierRegex?)
		| primitive = 'numeric' name = ID (precision = ModifierPrecision & scale = ModifierScale)
		| primitive = 'date' name = ID
		| primitive = 'time' name = ID
		| primitive = 'timestamp' name = ID
      )
    ;
	
EnumDeclaration
    : 'enum' name = ID
      BLOCK_START (literals += EnumLiteral)+ BLOCK_END
    ;

EnumLiteral
    : NL name = ID '=' value = INTEGER
    ;

ModifierMaxLength
	: 'max-length' maxLength = INTEGER
	;

ModifierRegex
	: 'regex' regex = StringLiteral
	;

ModifierPrecision
	: 'precision' precision = INTEGER
	;

ModifierScale
	: 'scale' scale = INTEGER
	;


/****************************
 *	Expression
 ***************************/

Expression returns Expression hidden(SL_COMMENT, ML_COMMENT, WS, CONT_NL)
	: SwitchExpression
	;

// right associative rule
SwitchExpression returns Expression
	: ImpliesExpression (=> ({TernaryOperation.condition=current} '?')
	  thenExpression=SwitchExpression ':'
      elseExpression=SwitchExpression)?
    ;

ImpliesExpression returns Expression
	: OrExpression (=> ({BinaryOperation.leftOperand=current} operator='implies') rightOperand=OrExpression)*
	;

OrExpression returns Expression
	: XorExpression (=> ({BinaryOperation.leftOperand=current} operator='or') rightOperand=XorExpression)*
	;

XorExpression returns Expression
	: AndExpression (=> ({BinaryOperation.leftOperand=current} operator='xor') rightOperand=AndExpression)*
	;

AndExpression returns Expression
	: EqualityExpression (=> ({BinaryOperation.leftOperand=current} operator='and') rightOperand=EqualityExpression)*
	;

EqualityExpression returns Expression
	: RelationalExpression (=> ({BinaryOperation.leftOperand=current} operator=('!='|'==')) rightOperand=RelationalExpression)*
	;

RelationalExpression returns Expression
	: AdditiveExpression (=> ({BinaryOperation.leftOperand=current} operator=('>=' | '<=' | '>' | '<')) rightOperand=AdditiveExpression)*
	;

AdditiveExpression returns Expression
	: MultiplicativeExpression (=> ({BinaryOperation.leftOperand=current} operator=('+'|'-')) rightOperand=MultiplicativeExpression)*
	;

MultiplicativeExpression returns Expression
	: ExponentExpression (=> ({BinaryOperation.leftOperand=current} operator=('*' | '/' | 'div' | 'mod')) rightOperand=ExponentExpression)*
	;

ExponentExpression returns Expression
	: SpawnOperation (=> ({BinaryOperation.leftOperand=current} operator='^') rightOperand=SpawnOperation)*
	;

SpawnOperation returns Expression
	: UnaryOperation (=> ({SpawnOperation.operand=current} 'as' type=QualifiedName))?
	;

UnaryOperation returns Expression
	: {UnaryOperation} operator=('not' | '-') operand=FunctionedExpression
    | FunctionedExpression
    ;

FunctionedExpression returns Expression
	: NavigationExpression ({FunctionedExpression.operand=current} functionCall=FunctionCall)?
	;

NavigationExpression returns Expression
	: PrimaryExpression ({NavigationExpression.base=current} features+=Feature+)?
    | NavigationBase
    ;

// enums as separate literals cause problems with completion and script
NavigationBase returns NavigationExpression
	: {NavigationExpression} qName=QualifiedName (features+=Feature* | '#' enumValue = ID)
	;

FunctionCall
	: {FunctionCall} '!' function=Function features+=Feature* call=FunctionCall?
	;

Feature
	: {Feature} '.' name=ID ('(' parameters+=QueryParameter (',' parameters+=QueryParameter)* ')')?
	;

QueryParameter
	: name = ID '=' expression=Expression
	;

ParenthesizedExpression returns Expression
	: '(' Expression ')'
	;

PrimaryExpression returns Expression
	: ParenthesizedExpression
	| CreateExpression
	| Literal
	| Self
	;

// Warning: create statement is not allowed in getter!

CreateExpression returns Expression
	: {CreateExpression} 'new'? type=[ClassDeclaration]
	  (   '(' (assignments+=CreateParameter (',' assignments+=CreateParameter)*)? ')'
	  	| '[' (creates += Expression (',' creates += Expression)*)? ']'
	  )
	;

CreateParameter:
    name=ID '=' right=Expression;

Function returns Function
	: name=ID '(' (lambdaArgument=ID '|')? (parameters+=FunctionParameter (',' parameters+=FunctionParameter)*)? ')'
    ;

FunctionParameter
	: {FunctionParameter} expression=Expression
	;

Literal returns Expression
	: BooleanLiteral
	| NumberLiteral
	| StringLiteral
	| TemporalLiteral
	;

BooleanLiteral returns Expression
	: {BooleanLiteral} ('false' | isTrue?='true')
	;

NumberLiteral returns Expression
	: {IntegerLiteral} value=INTEGER
	| {DecimalLiteral} value=DECIMAL
	;

StringLiteral returns Expression
	: {StringLiteral} value=STRING
	| {StringLiteral} raw_value=RAW_STRING
	;

TemporalLiteral returns Expression
	: {DateLiteral} value=DATE
	| {TimeStampLiteral} value=TIMESTAMP
	| {TimeLiteral} value=TIME
	;

Self returns Expression
	: {Expression} 'self'
	;

QualifiedName
	: {QualifiedName} (namespaceElements+=ID '::')* name=ID
    ;

/****************************
 *	Terminals
 ****************************/

BLOCK_START
	: NL? '{'
	;

BLOCK_END
	: NL? '}'
	;


terminal TIMESTAMP
	: '`' DIGIT+ '-' DIGIT DIGIT '-' DIGIT DIGIT 'T' DIGIT DIGIT ':' DIGIT DIGIT (':' DIGIT DIGIT ('.' DIGIT+ )? )? ('Z' | ('+' | '-') DIGIT DIGIT ':' DIGIT DIGIT )'`'
	;

terminal TIME
	: '`' DIGIT DIGIT ':' DIGIT DIGIT (':' DIGIT DIGIT ('.' DIGIT+ )? )? '`'
	;

terminal DATE
	: '`' DIGIT+ '-' DIGIT DIGIT '-' DIGIT DIGIT '`'
	;

terminal DIGIT
	: '0'..'9'
	;

terminal DECIMAL returns ecore::EBigDecimal
	: INTEGER '.' INTEGER
	;

terminal INTEGER returns ecore::EBigInteger
	: ('0'..'9')+
	;

terminal ID
	: '\\'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*
	;

terminal STRING
	: '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\\') | !('\\' | '"'))* '"'
	;

terminal RAW_STRING
	: 'r"' (!('"'))* '"'
	;

terminal CONT_NL
	: '\\' (' ' | '\t')* ('\r'? '\n')
	;

terminal ML_COMMENT
	: ('\r'? '\n')* (' ' | '\t')* '/*'->'*/'
	;

terminal SL_COMMENT
	: ('\r'? '\n')* (' ' | '\t')* '//' !('\n' | '\r')*
	;

terminal WS
	: (' ' | '\t')+
	;

terminal NL
	: ((SEMICOLON | '\r'? '\n') (' ' | '\t')*)+
	;

terminal SEMICOLON
	: ';'
	;

terminal ANY_OTHER
	: .
	;
