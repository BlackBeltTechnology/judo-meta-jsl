grammar hu.blackbelt.judo.meta.jsl.JslDsl hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate jsldsl "http://www.blackbelt.hu/judo/meta/jsl/JslDsl"
 
ModelDeclaration returns ModelDeclaration
    : {ModelDeclaration}
      annotations += AnnotationMark*
      KW_MODEL name = ModelName SC+
      imports += ModelImportDeclaration*
	  (declarations += Declaration)*
    ;

ModelImportDeclaration 
    : KW_IMPORT model = [ModelDeclaration | ModelName] (KW_AS alias = JSLID)? SC+
	;

Declaration
	: (TypeDeclaration
	| ErrorDeclaration
	| QueryDeclaration
	| FunctionDeclaration
	| LambdaDeclaration
	| AnnotationDeclaration)
	  SC*
	;


TypeDeclaration
	: PrimitiveDeclaration
	| ClassDeclaration
	;

PrimitiveDeclaration
	: EnumDeclaration
	| DataTypeDeclaration
    ;

ClassDeclaration
	: EntityDeclaration
//	| ServiceDeclaration
	| TransferDeclaration
	| ViewDeclaration
	| RowDeclaration
	| ActorDeclaration
	| ServiceDeclaration
	;

/****************************
 *	Entity
 ****************************/
fragment Named
	: name = JSLID;

fragment Cardinality
    : isMany ?= '[]'
    ;

EntityDeclaration
	: {EntityDeclaration}
	  annotations += AnnotationMark*
	  KW_ENTITY isAbstract ?= KW_ABSTRACT? Named
	  (KW_EXTENDS extends += [EntityDeclaration | ModelName] (',' extends += [EntityDeclaration | ModelName])*)?
	  (SC | BLOCK_START (members += EntityMemberDeclaration)* BLOCK_END)
	;


QueryDeclaration
	: KW_QUERY (referenceType = [SingleType | ModelName] Cardinality?) Named
	  ('(' (parameters += QueryParameterDeclaration (',' parameters += QueryParameterDeclaration)*)? ')')
	  "<=" expression = Expression
	  SC
	;

EntityMemberDeclaration
	: (EntityFieldDeclaration
	| EntityIdentifierDeclaration
	| EntityRelationDeclaration
	| EntityDerivedDeclaration
//	| EntityQueryDeclaration
//	| EntityOperationDeclaration
//	| ConstraintDeclaration
	)
	  SC*
	;

EntityFieldDeclaration
	: annotations += AnnotationMark*
	  FEAT_FIELD (isRequired ?= FEAT_REQUIRED? referenceType = [SingleType | ModelName] Cardinality?) Named
	  ('=' defaultExpression = Expression)? SC
	;

EntityIdentifierDeclaration
	: annotations += AnnotationMark*
	  FEAT_IDENTIFIER isRequired ?= FEAT_REQUIRED? referenceType = [PrimitiveDeclaration | ModelName] Named
	  ('=' defaultExpression = Expression)? SC
	;

SingleType 
	: PrimitiveDeclaration
	| EntityDeclaration
	;


//EntityDerivedDeclaration
//	: annotations += AnnotationMark*
//	  FEAT_DERIVED (referenceType = [SingleType | ModelName] Cardinality?) Named
//	  "=>" expression = Expression SC
//	;

EntityDerivedDeclaration
	: annotations += AnnotationMark*
	  (FEAT_FIELD referenceType = [PrimitiveDeclaration | ModelName] | FEAT_RELATION referenceType = [EntityDeclaration | ModelName]) Cardinality?
	  Named
	  ('(' (parameters += QueryParameterDeclaration (',' parameters += QueryParameterDeclaration)*) ')')?
	  => "<=" expression = Expression
	  SC
	;


//EntityDerivedFieldDeclaration
//	: annotations += AnnotationMark*
//	  FEAT_FIELD (referenceType = [PrimitiveDeclaration | ModelName]) Named
//	  ('(' (parameters += QueryParameterDeclaration (',' parameters += QueryParameterDeclaration)*) ')')?
//	  => "<=" expression = Expression SC
//	;

 
QueryParameterDeclaration
	: referenceType = [PrimitiveDeclaration | ModelName] Named ("=" default = Expression)?
	;

EntityRelationDeclaration
	: annotations += AnnotationMark*
	  FEAT_RELATION (isRequired ?= FEAT_REQUIRED? referenceType = [EntityDeclaration | ModelName] Cardinality?) Named
	  opposite = EntityRelationOpposite? SC
	;

//EntityDerivedRelationDeclaration
//	: annotations += AnnotationMark*
//	  FEAT_RELATION (referenceType = [EntityDeclaration | ModelName] Cardinality?) Named
//	  ('(' (parameters += QueryParameterDeclaration (',' parameters += QueryParameterDeclaration)*) ')')?
//	  => "<=" expression = Expression SC
//	;

EntityRelationOpposite
	: EntityRelationOppositeInjected
	| EntityRelationOppositeReferenced
	;

EntityRelationOppositeInjected
	: ATTR_OPPOSITEADD ':' Named Cardinality?
	;

EntityRelationOppositeReferenced
	: ATTR_OPPOSITE ':' oppositeType = [EntityRelationDeclaration | LocalName]
	;

EntityOperationDeclaration
	: annotations += AnnotationMark*
	  'operation' static ?= 'static'? (CONST_VOID? | return = EntityOperationReturnDeclaration) Named
	  ('(' (parameters += EntityOperationParameterDeclaration (',' parameters += EntityOperationParameterDeclaration)*)? ')')
	  (SC | BLOCK_START BLOCK_END )
	;

EntityOperationReturnDeclaration
	: referenceType = [SingleType | ModelName] Cardinality?
	;

EntityOperationParameterDeclaration
	: referenceType = [SingleType | ModelName] Cardinality? Named
	;

GuardModifier
	: ATTR_GUARD ':' expression = Expression
	;

EntityMapDeclaration
	: '(' entity = [EntityDeclaration | ModelName] Named ')'  // if no name defined, the 'self' shall be default name
	| KW_MAPS entity = [EntityDeclaration | ModelName] KW_AS Named
	;

/****************************
 *	Service
 ****************************/
//
//ServiceDeclaration
//	: {ServiceDeclaration}
//	  annotations += AnnotationMark*
//	  KW_SERVICE Named
//	  map = EntityMapDeclaration?
//	  guard = GuardModifier?
//	  (SC | BLOCK_START (members += ServiceMemberDeclaration)* BLOCK_END)
//	;
//
//
//
//ServiceMemberDeclaration
//	: ServiceOperationDeclaration
//	  SC*
//	;
//
//ServiceOperationDeclaration
//	: ServiceDataDeclaration
//	| ServiceFunctionDeclaration
//	;
//
//ServiceDataDeclaration
//	: annotations += AnnotationMark*
//	  FEAT_FUNCTION return = ServiceReturnDeclaration Cardinality? Named '=>' expression = Expression
//	  (guard = GuardModifier? & choices = ChoiceModifier?)
//	  SC
//	;
//
ServiceFunctionDeclaration
	: annotations += AnnotationMark*
	  FEAT_FUNCTION
	  (CONST_VOID? | return = ServiceReturnDeclaration | alternateReturn = ServiceReturnAlternateDeclaration) Named
	  '(' parameter = ServiceFunctionParameterDeclaration? ')'
  	  guard = GuardModifier?
	  (automapping ?= SC | BLOCK_START BLOCK_END )
	;


ServiceReturnAlternateDeclaration
	: '<' referenceTypes += ServiceReturnDeclaration ("|" referenceTypes += ServiceReturnDeclaration)+ '>'
	;


ServiceReturnDeclaration
	: referenceType = [Transferable | ModelName]
	;

ServiceFunctionParameterDeclaration
	: referenceType = [Transferable | ModelName] Named?
	;

Transferable
	: TransferDeclaration
	| ViewDeclaration
	| RowDeclaration
	;

/****************************
 *	Transfer
 ****************************/

TransferDeclaration
	: {TransferDeclaration}
	  annotations += AnnotationMark*
	  KW_TRANSFER Named
	  map = EntityMapDeclaration?
//	  (KW_EXPORTS exports += [ServiceDeclaration | ModelName] (',' exports += [ServiceDeclaration | ModelName])*)?
	  (automap ?= SC | BLOCK_START (members += TransferMemberDeclaration)* constructor = TransferConstructorDeclaration? BLOCK_END)
	;

TransferMemberDeclaration
	: TransferFieldDeclaration
	| TransferRelationDeclaration
	| ServiceFunctionDeclaration
	  SC*
	;

TransferFieldDeclaration
	: annotations += AnnotationMark*
	  FEAT_FIELD (required ?= FEAT_REQUIRED? referenceType = [PrimitiveDeclaration | ModelName]) Named
	  ((maps ?= '<=>' | reads ?= '<=') expression = Expression)?
	  SC
	;

//TransferFieldDeclaration
//	: annotations += AnnotationMark*
//	  FEAT_FIELD (required ?= FEAT_REQUIRED? referenceType = [TransferFieldType | ModelName] Cardinality?) Named
//	  (KW_MAPS maps = Expression (ATTR_CHOICES choices = Expression)? | 'reads' reads = Expression)?
//	  SC
//	;

TransferConstructorDeclaration
	: {TransferConstructorDeclaration}
	  FEAT_CONSTRUCTOR
	  BLOCK_START (defaults += TransferDefault)* BLOCK_END
	  SC*
	;

TransferDefault
	: field = TransferField '=' rightValue = Expression SC+
	;

TransferField
	: 'self' '.' reference = [TransferFieldDeclaration | ModelName]
	;

TransferFieldType
	: PrimitiveDeclaration
	| TransferDeclaration
	;

TransferRelationDeclaration
	: annotations += AnnotationMark*
	  FEAT_RELATION return = [TransferDeclaration | ModelName] Cardinality? Named ((maps ?= '<=>' | reads ?= '<=') expression = Expression)?
	  modifiers += (ChoiceModifier | CreateTransferModifier)*
	  SC
	;

CreateTransferModifier
	: ATTR_CREATE ':' view = [TransferDeclaration | ModelName]
	;

/****************************
 *	View
 ****************************/

ViewDeclaration
	: {ViewDeclaration}
	  annotations += AnnotationMark*
	  KW_VIEW Named
	  map = EntityMapDeclaration?
//	  ('exports' exports += [ServiceDeclaration | ModelName] (',' exports += [ServiceDeclaration | ModelName])*)?
	  (automap ?= SC | BLOCK_START (members += ViewMemberDeclaration)* (constructor = ViewConstructorDeclaration (members += ViewMemberDeclaration)*)? BLOCK_END)
	;

ViewMemberDeclaration
	: (ViewFieldDeclaration
	| ViewLinkDeclaration
	| ViewTableDeclaration
	| ViewGroupDeclaration
	| ViewTabsDeclaration
	| ViewSubmitDeclaration
	| ViewActionDeclaration)
	  SC*
	;

ViewConstructorDeclaration
	: {ViewConstructorDeclaration}
	  FEAT_CONSTRUCTOR
	  BLOCK_START (defaults += ViewDefault)* BLOCK_END
	  SC*
	;

ViewDefault
	: field = ViewField '=' rightValue = Expression SC+
	;

ViewField
	: 'self' '.' declaration = [ViewFieldDeclaration | ModelName]
	;

ViewTabsDeclaration
	: {ViewTabDeclaration}
	  annotations += AnnotationMark*
	  FEAT_TABS
	  ( tag = TagModifier
	  & label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?
	  & width = WidthModifier?
	  & frame = FrameModifier?)
	  BLOCK_START (members += ViewGroupDeclaration)* BLOCK_END
	;

ViewGroupDeclaration
	: {ViewGroupDeclaration} 
	  annotations += AnnotationMark*
	  FEAT_GROUP
	  ( tag = TagModifier
	  & (horizontal = HorizontalModifier | vertical = VerticalModifier)?
	  & label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?
	  & width = WidthModifier?
	  & frame = FrameModifier?)
	  BLOCK_START (members += ViewMemberDeclaration)* BLOCK_END
	;


HorizontalModifier
	: ATTR_HORIZONTAL ':' (left ?= CONST_LEFT | right ?= CONST_RIGHT | center ?= CONST_CENTER)
	;

VerticalModifier
	: ATTR_VERTICAL ':' (top ?= CONST_TOP | bottom ?= CONST_BOTTOM | center ?= CONST_CENTER | stretch ?= CONST_STRETCH)
	;

ViewFieldDeclaration
	: annotations += AnnotationMark*
	  FEAT_FIELD required ?= FEAT_REQUIRED? referenceType = [PrimitiveDeclaration | ModelName] Named ((maps ?= '<=>' | reads ?= '<=') expression = Expression)?
	  ( label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?
	  & width = WidthModifier?)
	  SC
	;

ViewLinkDeclaration
	: annotations += AnnotationMark*
	  FEAT_LINK required ?= FEAT_REQUIRED? (referenceType = [ViewDeclaration | ModelName]) Named ((maps ?= '<=>' | reads ?= '<=') expression = Expression)?
	  ( choices = ChoiceModifier?
	  & create = CreateModifier?
	  & target = TargetViewModifier?
	  & label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?
	  & text = TextModifier?
	  & width = WidthModifier?)
	  SC
	;

ViewTableDeclaration
	: annotations += AnnotationMark*
	  FEAT_TABLE (referenceType = [RowDeclaration | ModelName]) '[]' Named ((maps ?= '<=>' | reads ?= '<=') expression = Expression)?
	  ( choices = ChoiceModifier?
	  & create = CreateModifier?
	  & target = TargetViewModifier?
	  & label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?
	  & width = WidthModifier?
	  & rows = RowsModifier?)
	  SC
	;

ViewSubmitDeclaration
	: annotations += AnnotationMark*
	  FEAT_SUBMIT (CONST_VOID? | return = ServiceReturnDeclaration | alternateReturn = ServiceReturnAlternateDeclaration) Named
	  ( label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?
	  & width = WidthModifier?)
	  SC
	;

ViewActionDeclaration
	: annotations += AnnotationMark*
	  FEAT_ACTION
	  (CONST_VOID? | return = ServiceReturnDeclaration | alternateReturn = ServiceReturnAlternateDeclaration) Named
	  '(' parameter = ServiceFunctionParameterDeclaration? ')'
	  ( label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?
	  & width = WidthModifier?
	  & guard = GuardModifier?)
	  SC
	;

TagModifier
	: ATTR_TAG ':' value = JSLID
	;

LabelModifier
	: ATTR_LABEL ':' expression = Expression
	;

IconModifier
	:  ATTR_ICON ':' name = StringLiteral
	;	

FrameModifier
	: ATTR_FRAME ':' expression = Expression
	;	
	
EnabledModifier
	: ATTR_ENABLED ':' expression = Expression
	;

HiddenModifier
	: ATTR_HIDDEN ':' expression = Expression
	;

WidthModifier
	: ATTR_WIDTH ':' value = Natural
	;

RowsModifier
	: ATTR_ROWS ':' value = Natural
	;

ChoiceModifier
	: ATTR_CHOICES ':' expression = Expression
	;

TextModifier
	: ATTR_TEXT ':' expression = Expression
	;

CreateModifier
	: ATTR_CREATE ':' view = [ViewDeclaration | ModelName]
	;

TargetViewModifier
	: ATTR_TARGET ':' view = [ViewDeclaration | ModelName] ('(' expression = Expression ')')?
	;

TargetTransferModifier
	: ATTR_TARGET ':' transfer = [TransferDeclaration | ModelName] ('(' expression = Expression ')')?
	;

//ServiceFunctionCall
//	: declaration = [ServiceFunctionDeclaration | ModelName] '(' argument = Expression? ')'
//	;

/****************************
 *	Row
 ****************************/

RowDeclaration
	: {RowDeclaration}
	  annotations += AnnotationMark*
	  KW_ROW Named
	  map = EntityMapDeclaration?
	  target = TargetViewModifier?
	  (automap ?= SC | BLOCK_START (members += RowMemberDeclaration)* BLOCK_END)
	;

RowMemberDeclaration
	: RowColumnDeclaration
//	| RowActionDeclaration
	  SC*
	;

RowColumnDeclaration
	: annotations += AnnotationMark*
	  FEAT_COLUMN (referenceType = [PrimitiveDeclaration | ModelName]) Named ((maps ?= '<=>' | reads ?= '<=') expression = Expression)?
	  ( label = LabelModifier?
	  & icon = IconModifier?
	  & width = WidthModifier?)
	  SC
	;

//RowActionDeclaration
//	: annotations += AnnotationMark*
//	  'action' Named 'function' function = ServiceFunctionCall
//	  SC
//	;

/****************************
 *	Actor
 ****************************/

ActorDeclaration
	: {ActorDeclaration}
	  annotations += AnnotationMark*
	  KW_ACTOR Named
	  map = EntityMapDeclaration?
	  ( realm = RealmModifier?
	  & claim = ClaimModifier?
	  & identity = IdentityModifier?
	  & guard = GuardModifier?)
	  BLOCK_START (members += ActorMemberDeclaration)* BLOCK_END
	;

RealmModifier
	: ATTR_REALM ':' value = StringLiteral
	;

ClaimModifier
	: ATTR_CLAIM ':' value = StringLiteral
	;

IdentityModifier
	: ATTR_IDENTITY ':' expression = Expression
	;

ActorMemberDeclaration
	: ActorMenuDeclaration
	| ActorGroupDeclaration
	;

ActorGroupDeclaration
	: annotations += AnnotationMark*
	  FEAT_GROUP
	  ( tag = TagModifier
	  & label = LabelModifier?
	  & icon = IconModifier?
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?)
	  BLOCK_START (members += ActorMenuDeclaration)* BLOCK_END
	;

ActorMenuDeclaration
	: annotations += AnnotationMark*
	  FEAT_MENU Named
	  ( label = LabelModifier?
	  & icon = IconModifier?
	  & target = TargetViewModifier
	  & enabled = EnabledModifier?
	  & ^hidden = HiddenModifier?)
	  SC
	;

/****************************
 *	Service
 ****************************/

ServiceDeclaration
	: {ServiceDeclaration}
	  annotations += AnnotationMark*
	  KW_SERVICE Named
	  map = EntityMapDeclaration?
	  ( realm = RealmModifier?
	  & claim = ClaimModifier?
	  & identity = IdentityModifier?
	  & guard = GuardModifier?)
	  BLOCK_START (members += ServiceMemberDeclaration)* BLOCK_END
	;

ServiceMemberDeclaration
	: ServiceAccessDeclaration
	;

ServiceAccessDeclaration
	: annotations += AnnotationMark*
	  FEAT_ACCESS Named
	  target = TargetTransferModifier
	  SC
	;

/****************************
 *	Datatype
 ****************************/

DataTypeDeclaration
    : annotations += AnnotationMark*
      KW_TYPE
      (
		  primitive = CONST_BOOLEAN Named
		| primitive = CONST_BINARY Named '(' mimeTypes = ModifierMimeTypes ',' maxFileSize = ModifierMaxFileSize ')'
		| primitive = CONST_STRING Named '(' minSize = ModifierMinSize ',' maxSize = ModifierMaxSize (',' regex = ModifierRegex)? ')'
		| primitive = CONST_NUMERIC Named '(' precision = ModifierPrecision ',' scale = ModifierScale ')'
		| primitive = CONST_DATE Named
		| primitive = CONST_TIME Named
		| primitive = CONST_TIMESTAMP Named
      ) SC
    ;


/****************************
 *	Enum
 ****************************/

EnumDeclaration
    : annotations += AnnotationMark*
      KW_ENUM Named
      BLOCK_START (literals += EnumLiteral)* BLOCK_END
    ;

EnumLiteral
    : annotations += AnnotationMark*
      Named '=' value = Natural SC+
    ;


ModifierMinSize
	: 'min-size' '=' value = Natural
	;

ModifierMaxSize
	: 'max-size' '=' value = Natural
	;

ModifierRegex
	: OTHER_REGEX '=' regex = StringLiteral
	;

ModifierPrecision
	: OTHER_PRECISION '=' value = Natural
	;

ModifierScale
	: OTHER_SCALE '=' value = Natural
	;

ModifierMimeTypes
	: 'mime-types' '=' '[' values += MimeType (',' values += MimeType)* ']'
	;

MimeType
	: value = StringLiteral
	;

ModifierMaxFileSize
	: 'max-file-size' '=' numeric = Natural (measure = (OTHER_KB | OTHER_MB | OTHER_GB | OTHER_KIB | OTHER_MIB | OTHER_GIB))? 
	;
	
//DataUnit
//	: KB ?= OTHER_KB
//	| MB ?= OTHER_MB
//	| GB ?= OTHER_GB
//	| KiB ?= OTHER_KIB
//	| MiB ?= OTHER_MIB
//	| GiB ?= OTHER_GIB
//	;

/****************************
 *	Expression
 ***************************/

Expression returns Expression:
    SwitchExpression;

SwitchExpression returns Expression
	: ImpliesExpression (=> ({TernaryOperation.condition=current} '?')
	  thenExpression=SwitchExpression ':'
      elseExpression=SwitchExpression)?
    ;

ImpliesExpression returns Expression
	: OrExpression (=> ({BinaryOperation.leftOperand=current} operator=OTHER_IMPLIES) rightOperand=OrExpression)*
	;

OrExpression returns Expression
	: XorExpression (=> ({BinaryOperation.leftOperand=current} operator=OTHER_OR) rightOperand=XorExpression)*
	;

XorExpression returns Expression
	: AndExpression (=> ({BinaryOperation.leftOperand=current} operator=OTHER_XOR) rightOperand=AndExpression)*
	;

AndExpression returns Expression
	: EqualityExpression (=> ({BinaryOperation.leftOperand=current} operator=OTHER_AND) rightOperand=EqualityExpression)*
	;

EqualityExpression returns Expression
	: RelationalExpression (=> ({BinaryOperation.leftOperand=current} operator=('!='|'==')) rightOperand=RelationalExpression)*
	;

RelationalExpression returns Expression
	: AdditiveExpression (=> ({BinaryOperation.leftOperand=current} operator=('>=' | '<=' | '>' | '<')) rightOperand=AdditiveExpression)*
	;

AdditiveExpression returns Expression
	: MultiplicativeExpression (=> ({BinaryOperation.leftOperand=current} operator=('+'|'-')) rightOperand=MultiplicativeExpression)*
	;

MultiplicativeExpression returns Expression
	: ExponentExpression (=> ({BinaryOperation.leftOperand=current} operator=('*' | '/' | OTHER_DIV | OTHER_MOD)) rightOperand=ExponentExpression)*
	;

ExponentExpression returns Expression
	: UnaryOperation (=> ({BinaryOperation.leftOperand=current} operator='^') rightOperand=UnaryOperation)*
	;
 
UnaryOperation returns Expression
	: {UnaryOperation} operator='not' operand=UnaryOperation
	| Navigation
    ;

Navigation returns Expression
	: {Navigation} base = NavigationBase (features += Feature)*
	;

NavigationBase
	: Self
	| Parentheses
	| NavigationBaseDeclarationReference
	| QueryCall
	| Literal
	;

Self
	: isSelf ?= 'self'
	;

Parentheses
	: '(' => expression = Expression ')'		
	;
 
NavigationBaseDeclarationReference
	: {NavigationBaseDeclarationReference} reference = [NavigationBaseDeclaration | ModelName]
 	;
 
NavigationBaseDeclaration
	: EntityDeclaration
	| LambdaVariable
	| QueryParameterDeclaration
	| PrimitiveDeclaration
	| EntityMapDeclaration
	;

QueryCall
	: declaration = [QueryDeclaration | ModelName ] '(' (arguments += QueryArgument (',' arguments += QueryArgument)*)? ')'
	;

Feature
	: MemberReference
	| Call
	;

MemberReference
    : '.' member = [NavigationTarget | LocalName]
    ;

Call
	: EntityQueryCall
	| FunctionCall
	| LambdaCall
	;

EntityQueryCall
	: '.' declaration = [EntityDerivedDeclaration | LocalName ] => '(' (arguments += QueryArgument (',' arguments += QueryArgument)*)? ')'
	;

FunctionCall
	: '!' declaration = [FunctionDeclaration | LocalName ] '(' (arguments += FunctionArgument (',' arguments += FunctionArgument)*)? ')'
	;

FunctionArgument
    : declaration = [FunctionParameterDeclaration | LocalName ] '=' expression = Expression
    ;

QueryArgument
    : declaration = [QueryParameterDeclaration | LocalName ] '=' expression = Expression
    ;

LambdaCall
	: '!' declaration = [LambdaDeclaration | LocalName ] '(' variable = LambdaVariable => '|' lambdaExpression = Expression ')';

LambdaVariable
    : {LambdaVariable} Named    	
    ;


/****************************
 *	Function
 ***************************/

FunctionDeclaration
	: FEAT_FUNCTION returnType = TypeDescription Named '(' (parameters += FunctionParameterDeclaration (',' parameters += FunctionParameterDeclaration)*)? ')' KW_ON baseType = TypeDescription SC
	;

FunctionParameterDeclaration
	: isRequired ?= FEAT_REQUIRED? description = TypeDescription Named
	;

TypeDescription
	: {TypeDescription} type = Type
	| collection ?= OTHER_COLLECTION '<' type = Type '>'
	| declaration ?= OTHER_DECLARATION '<' type = Type '>'
	| constant ?= OTHER_CONSTANT '<' type = Type '>'
	;

Type
	: CONST_BOOLEAN | CONST_BINARY | CONST_STRING | CONST_NUMERIC | CONST_DATE | CONST_TIME | CONST_TIMESTAMP | KW_ENUM | KW_ENTITY
	;

LambdaDeclaration 
	: OTHER_LAMBDA returnType = TypeDescription Named '(' (expressionType = TypeDescription)? ')' SC
	;


/****************************
 *	Annotation
 ***************************/

AnnotationDeclaration
	: KW_ANNOTATION Named ('(' (parameters += AnnotationParameterDeclaration (',' parameters += AnnotationParameterDeclaration)*)? ')')?
	  (KW_ON targets += AnnotationTarget (',' targets += AnnotationTarget)*)?
	  (SC | BLOCK_START annotations += AnnotationMark* BLOCK_END )
	;

AnnotationParameterDeclaration
	: referenceType = AnnotationParameterType Named
	;

AnnotationParameterType
	: type = (CONST_BOOLEAN	| CONST_STRING | CONST_NUMERIC)
	;

AnnotationTarget
	: model ?= KW_MODEL
	| ^import ?= KW_IMPORT
	| type ?= KW_TYPE
	| enumeration ?= KW_ENUM
	| KW_ENUM '::' enumLiteral ?= FEAT_LITERAL
	| entity ?= KW_ENTITY
	| KW_ENTITY '::' entityField ?= FEAT_FIELD
	| KW_ENTITY '::' entityIdentifier ?= FEAT_IDENTIFIER
//	| KW_ENTITY '::' entityQuery ?= FEAT_QUERY
	| KW_ENTITY '::' entityRelation ?= FEAT_RELATION
//	| KW_ENTITY '::' entityDerived ?= FEAT_DERIVED
//	| KW_ENTITY '::' entityOperation ?= 'operation'
	| transfer ?= KW_TRANSFER
	| KW_TRANSFER '::' transferField ?= FEAT_FIELD
	| KW_TRANSFER '::' transferConstructor ?= FEAT_CONSTRUCTOR
	| KW_TRANSFER '::' transferRelation ?= FEAT_RELATION
	| KW_TRANSFER '::' transferFunction ?= FEAT_FUNCTION
//	| service ?= KW_SERVICE
//	| KW_SERVICE '::' serviceFunction ?= FEAT_FUNCTION
	| actor ?= KW_ACTOR
	| KW_ACTOR '::' actorMenu ?= FEAT_MENU
	| KW_ACTOR '::' actorGroup ?= FEAT_GROUP
	| query ?= KW_QUERY
	| view ?= KW_VIEW
	| KW_VIEW '::' viewAction ?= FEAT_ACTION
	| KW_VIEW '::' viewConstructor ?= FEAT_CONSTRUCTOR
	| KW_VIEW '::' viewField ?= FEAT_FIELD
	| KW_VIEW '::' viewGroup ?= FEAT_GROUP
	| KW_VIEW '::' viewLink ?= FEAT_LINK
	| KW_VIEW '::' viewSubmit ?= FEAT_SUBMIT
	| KW_VIEW '::' viewTable ?= FEAT_TABLE
	| KW_VIEW '::' viewTabs ?= FEAT_TABS
	| row ?= KW_ROW
	| KW_ROW '::' rowColumn ?= FEAT_COLUMN
	| service ?= KW_SERVICE
	| KW_SERVICE '::' serviceAccess ?= FEAT_ACCESS
	;

AnnotationMark
	: '@' declaration = [AnnotationDeclaration | ModelName] ('(' arguments += AnnotationArgument? (',' arguments += AnnotationArgument?)* ')')?
	;

AnnotationArgument
    : declaration = [AnnotationParameterDeclaration | LocalName] '=' (literal = Literal | reference = [AnnotationParameterDeclaration | LocalName])
    ;

EnumLiteralReference
    : {EnumLiteralReference} enumDeclaration = [EnumDeclaration | ModelName] '#' enumLiteral = [EnumLiteral | EnumLiteralName ]    	
    ;

NavigationTarget
    : EntityFieldDeclaration
	| EntityIdentifierDeclaration
	| EntityRelationDeclaration
	| EntityDerivedDeclaration
    | EntityRelationOppositeInjected
    ;

Literal
	: BooleanLiteral
	| NumberLiteral
	| StringLiteral
	| TemporalLiteral
	| EnumLiteralReference
	;

BooleanLiteral
	: {BooleanLiteral} (CONST_FALSE | isTrue?=CONST_TRUE)
	;

NumberLiteral
	: IntegerLiteral
	| DecimalLiteral
	;

IntegerLiteral hidden()
	: (minus ?= "-" | "+")? value=Natural
	;

DecimalLiteral hidden()
	: (minus ?= "-" | "+")? value=Decimal
	;

StringLiteral
	: {EscapedStringLiteral} value=STRING
	| {RawStringLiteral} value=RAW_STRING
	;

TemporalLiteral
	: {DateLiteral} value=DATE
	| {TimestampLiteral} value=TIMESTAMP
	| {TimeLiteral} value=TIME
	;


 // ************************************
 // For later use
 // ************************************
 
ConstraintDeclaration
	: FEAT_CONSTRAINT Named expression = Expression (throw = ThrowModifier?) SC
	;

ThrowModifier
	: ATTR_THROW ':' value = CreateError
	;
 
/****************************
 *	Error
 ****************************/

ErrorDeclaration
	: KW_ERROR Named (KW_EXTENDS extends = [ErrorDeclaration | ModelName])?
	  (SC | BLOCK_START (fields += ErrorField)* BLOCK_END)
	;

ErrorField
	: FEAT_FIELD referenceType = [PrimitiveDeclaration | ModelName] Named
	  ('=' defaultExpression = Expression)? SC+
	;

CreateError
	: errorDeclarationType=[ErrorDeclaration | ModelName] ('(' (parameters+=ThrowParameter (',' parameters+=ThrowParameter)*)? ')')?
	;

ThrowParameter
	: errorFieldType=[ErrorField | LocalName] '=' expession=Literal;


Decimal returns ecore::EBigDecimal
	: NUMBER '.' NUMBER
	;

Natural returns ecore::EBigInteger
	: NUMBER
	;

EnumLiteralName
	: JSLID
    ;

LocalName
	: JSLID
    ;

ModelName
	: JSLID ('::' JSLID)*
    ;

JSLID : ID

// JSLID : ID | KW | FEAT | CONST | ATTR | OTHER
			// others
//			| 'regex' | 'precision' | 'scale' | 'lambda'
//			| 'collection' | 'declaration' | 'constant'
//			| 'implies' | 'or' | 'xor' | 'and' | 'div' | 'mod' 
//			| 'kB' | 'MB' | 'GB' | 'KiB' | 'MiB' | 'GiB'

;

//			// keywords
//JSLID : ID	| KW_ABSTRACT | KW_ACTOR | KW_ANNOTATION | KW_AS | KW_ENTITY | KW_ENUM | KW_ERROR | KW_EXPORTS | KW_EXTENDS | KW_IMPORT
//			| KW_MODEL | KW_ON | KW_QUERY | KW_ROW | KW_SERVICE | KW_TRANSFER | KW_TYPE | KW_VIEW
//
//			// features
//			| FEAT_ACTION | FEAT_COLUMN | FEAT_CONSTRAINT | FEAT_CONSTRUCTOR | FEAT_DERIVED | FEAT_FIELD | FEAT_FUNCTION
//			| FEAT_GROUP | FEAT_IDENTIFIER | FEAT_LINK | FEAT_MENU | FEAT_RELATION | FEAT_REQUIRED | FEAT_SUBMIT | FEAT_TABLE | FEAT_TABS
//
//			// constants
//			| CONST_BINARY | CONST_BOOLEAN | CONST_BOTTOM | CONST_CENTER | CONST_DATE | CONST_LEFT | CONST_NUMERIC | CONST_RIGHT
//			| CONST_STRETCH	| CONST_STRING | CONST_TIME | CONST_TIMESTAMP | CONST_TOP
//
//			// attributes except 'error'
//			| ATTR_CHOICES | ATTR_CLAIM | ATTR_CREATE | ATTR_ENABLED | ATTR_FRAME | ATTR_GUARD | ATTR_HIDDEN | ATTR_HORIZONTAL | ATTR_ICON
//			| ATTR_IDENTITY | ATTR_LABEL | ATTR_REALM | ATTR_ROWS | ATTR_TAG | ATTR_TARGET | ATTR_TEXT | ATTR_THROW | ATTR_VERTICAL | ATTR_WIDTH
//
//			// others
//			| 'regex' | 'precision' | 'scale' | 'lambda'
//			| 'collection' | 'declaration' | 'constant'
//			| 'implies' | 'or' | 'xor' | 'and' | 'div' | 'mod' 
//			| 'kB' | 'MB' | 'GB' | 'KiB' | 'MiB' | 'GiB'
//	       
//	       // 'void' not included
//	       // 'reads', 'maps' are not included
//	       // 'self', 'true', 'false', 'not' are not included
//	;

/****************************
 *	Terminals
 ****************************/

KW: KW_ABSTRACT | KW_ACTOR | KW_ANNOTATION | KW_AS | KW_ENTITY | KW_ENUM | KW_ERROR | KW_EXPORTS | KW_EXTENDS | KW_IMPORT
			| KW_MODEL | KW_ON | KW_QUERY | KW_ROW | KW_SERVICE | KW_TRANSFER | KW_TYPE | KW_VIEW;

FEAT: FEAT_ACCESS | FEAT_ACTION | FEAT_COLUMN | FEAT_CONSTRAINT | FEAT_CONSTRUCTOR | FEAT_DERIVED | FEAT_FIELD | FEAT_FUNCTION
			| FEAT_GROUP | FEAT_IDENTIFIER | FEAT_LINK | FEAT_LITERAL | FEAT_MENU | FEAT_RELATION | FEAT_REQUIRED | FEAT_SUBMIT | FEAT_TABLE | FEAT_TABS;
			
CONST: CONST_BINARY | CONST_BOOLEAN | CONST_BOTTOM | CONST_CENTER | CONST_DATE | CONST_LEFT | CONST_NUMERIC | CONST_RIGHT
			| CONST_STRETCH	| CONST_STRING | CONST_TIME | CONST_TIMESTAMP | CONST_TOP;

ATTR: ATTR_CHOICES | ATTR_CLAIM | ATTR_CREATE | ATTR_ENABLED | ATTR_FRAME | ATTR_GUARD | ATTR_HIDDEN | ATTR_HORIZONTAL | ATTR_ICON
			| ATTR_IDENTITY | ATTR_LABEL | ATTR_REALM | ATTR_ROWS | ATTR_TAG | ATTR_TARGET | ATTR_TEXT | ATTR_THROW | ATTR_VERTICAL | ATTR_WIDTH;

OTHER: OTHER_OR | OTHER_XOR | OTHER_AND | OTHER_DIV | OTHER_MOD | OTHER_KB | OTHER_MB | OTHER_GB | OTHER_KIB | OTHER_MIB | OTHER_GIB;

terminal KW_ABSTRACT:	'abstract';
terminal KW_ACTOR:		'actor';
terminal KW_ANNOTATION:	'annotation';
terminal KW_AS:			'as';
terminal KW_ENTITY:		'entity';
terminal KW_ENUM:		'enum';
terminal KW_ERROR:		'error';
terminal KW_EXPORTS:	'exports';
terminal KW_EXTENDS:	'extends';
terminal KW_IMPORT:		'import';
terminal KW_MAPS:		'maps';
terminal KW_MODEL:		'model';
terminal KW_ON:			'on';
terminal KW_QUERY:		'query';
terminal KW_ROW:		'row';
terminal KW_SERVICE:	'service';
terminal KW_TRANSFER:	'transfer';
terminal KW_TYPE:		'type';
terminal KW_VIEW:		'view';

terminal FEAT_ACCESS:		'access';
terminal FEAT_ACTION:		'action';
terminal FEAT_COLUMN:		'column';
terminal FEAT_CONSTRAINT:	'constraint';
terminal FEAT_CONSTRUCTOR:	'constructor';
terminal FEAT_DERIVED:		'derived';
terminal FEAT_FIELD:		'field';
terminal FEAT_FUNCTION:		'function';
terminal FEAT_GROUP:		'group';
terminal FEAT_IDENTIFIER:	'identifier';
terminal FEAT_LINK:			'link';
terminal FEAT_LITERAL:		'literal';
terminal FEAT_MENU:			'menu';
// terminal FEAT_QUERY:		'query';
terminal FEAT_RELATION:		'relation';
terminal FEAT_REQUIRED:		'required';
terminal FEAT_SUBMIT:		'submit';
terminal FEAT_TABLE:		'table';
terminal FEAT_TABS:			'tabs';

terminal CONST_BINARY:		'binary';
terminal CONST_BOOLEAN:		'boolean';
terminal CONST_BOTTOM:		'bottom';
terminal CONST_CENTER:		'center';
terminal CONST_DATE:		'date';
terminal CONST_FALSE:		'false';
terminal CONST_LEFT:		'left';
terminal CONST_NUMERIC:		'numeric';
terminal CONST_RIGHT:		'right';
terminal CONST_STRETCH:		'stretch';
terminal CONST_STRING:		'string';
terminal CONST_TIME:		'time';
terminal CONST_TIMESTAMP:	'timestamp';
terminal CONST_TOP:			'top';
terminal CONST_TRUE:		'true';
terminal CONST_VOID:		'void';

terminal ATTR_CHOICES:		'choices';
terminal ATTR_CLAIM:		'claim';
terminal ATTR_CREATE:		'create';
terminal ATTR_ENABLED:		'enabled';
terminal ATTR_FRAME:		'frame';
terminal ATTR_GUARD:		'guard';
terminal ATTR_HIDDEN:		'hidden';
terminal ATTR_HORIZONTAL:	'horizontal';
terminal ATTR_ICON:			'icon';
terminal ATTR_IDENTITY:		'identity';
terminal ATTR_LABEL:		'label';
terminal ATTR_OPPOSITE:		'opposite';
terminal ATTR_OPPOSITEADD:	'opposite-add';
terminal ATTR_REALM:		'realm';
terminal ATTR_ROWS:			'rows';
terminal ATTR_TAG:			'tag';
terminal ATTR_TARGET:		'target';
terminal ATTR_TEXT:			'text';
terminal ATTR_THROW:		'throw';
terminal ATTR_VERTICAL:		'vertical';
terminal ATTR_WIDTH:		'width';

terminal OTHER_REGEX:		'regex';
terminal OTHER_PRECISION:	'precision';
terminal OTHER_SCALE:		'scale';
terminal OTHER_LAMBDA:		'lambda';
terminal OTHER_COLLECTION:	'collection';
terminal OTHER_DECLARATION:	'declaration';
terminal OTHER_CONSTANT:	'constant';
terminal OTHER_IMPLIES:		'implies';

terminal OTHER_OR:		'or';
terminal OTHER_XOR:		'xor';
terminal OTHER_AND:		'and';
terminal OTHER_DIV:		'div';
terminal OTHER_MOD:		'mod';
terminal OTHER_KB:		'kB';
terminal OTHER_MB:		'MB';
terminal OTHER_GB:		'GB';
terminal OTHER_KIB:		'KiB';
terminal OTHER_MIB:		'MiB';
terminal OTHER_GIB:		'GiB';

//			| 'regex' | 'precision' | 'scale' | 'lambda'
//			| 'collection' | 'declaration' | 'constant'
//			| 'implies' | 'or' | 'xor' | 'and' | 'div' | 'mod' 
//			| 'kB' | 'MB' | 'GB' | 'KiB' | 'MiB' | 'GiB'



terminal BLOCK_START
	: '{'
	;

terminal BLOCK_END
	: '}'
	;

terminal fragment DIGIT
	: '0'..'9'
	;

terminal fragment ALPHABET
    : 'a'..'z' | 'A'..'Z'    	
    ;

terminal fragment NEWLINE
    : '\n' | '\r'   	
    ;

terminal TIMESTAMP
	: '`' DIGIT+ '-' DIGIT DIGIT '-' DIGIT DIGIT 'T' DIGIT DIGIT ':' DIGIT DIGIT (':' DIGIT DIGIT ('.' DIGIT+)?)? ('Z' | ('+' | '-') DIGIT DIGIT (':' DIGIT DIGIT)?)?'`'
	;

terminal TIME
	: '`' DIGIT DIGIT ':' DIGIT DIGIT (':' DIGIT DIGIT ('.' DIGIT+ )? )? '`'
	;

terminal DATE
	: '`' DIGIT+ '-' DIGIT DIGIT '-' DIGIT DIGIT '`'
	;
 
terminal NUMBER
	: DIGIT+
	;

terminal ID
	: ALPHABET (ALPHABET | DIGIT)* | '`' ALPHABET (ALPHABET | DIGIT)* '`'
	;

terminal STRING
	: '"' ('\\' ('t'|'n'|'f'|'r'|'"'|'\\') | !('\\' | '"' | NEWLINE))* '"'
	;

terminal RAW_STRING
	: 'r"' (!('"' | NEWLINE))* '"'
	;
 
terminal ML_COMMENT
	: '/*'->'*/'
	;

terminal SL_COMMENT
	: '//' !(NEWLINE)*
	;

terminal SC
	: ';'
	;

terminal WS
	: (' '|'\t'|'\r'|'\n')+
	;
