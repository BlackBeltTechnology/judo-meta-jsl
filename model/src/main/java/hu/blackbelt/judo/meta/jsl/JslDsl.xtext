grammar hu.blackbelt.judo.meta.jsl.JslDsl hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate jsldsl "http://www.blackbelt.hu/judo/meta/jsl/JslDsl"

ModelDeclaration returns ModelDeclaration
    : {ModelDeclaration}
      annotations += AnnotationMark*
      -> KW_MODEL name = ModelName SC
      imports += ModelImportDeclaration*
	  (declarations += Declaration)*
    ;

ModelImportDeclaration 
    : KW_IMPORT model = [ModelDeclaration | ModelName] (KW_AS alias = JSLID)? SC
	;

Declaration
	: TypeDeclaration
	| ErrorDeclaration
	| QueryDeclaration
	| FunctionDeclaration
	| LambdaDeclaration
	| AnnotationDeclaration
	;

Persistable 
	: PrimitiveDeclaration
	| EntityDeclaration
	;

TypeDeclaration
	: PrimitiveDeclaration
	| ClassDeclaration
	;

PrimitiveDeclaration
	: EnumDeclaration
	| DataTypeDeclaration
    ;

ClassDeclaration
	: EntityDeclaration
	| TransferDeclaration
	| ViewDeclaration
	| RowDeclaration
	| ActorDeclaration
	;

/****************************
 *	Entity
 ****************************/

EntityDeclaration
	: {EntityDeclaration}
	  annotations += AnnotationMark*
	  -> KW_ENTITY abstract ?= KW_ABSTRACT? Named
	  (KW_EXTENDS extends += [EntityDeclaration | ModelName] (COMMA extends += [EntityDeclaration | ModelName])*)?
	  (SC | BLOCK_START members += EntityMemberDeclaration* BLOCK_END)
	;

EntityMemberDeclaration
	: {EntityFieldDeclaration}
	  annotations += AnnotationMark*
	  ->(KW_FIELD | identifier ?= KW_IDENTIFIER) required ?= KW_REQUIRED? referenceType = [Persistable | ModelName] Cardinality?
	  Named 
	  (
	  	(default ?= ASSIGN defaultExpr = Expression)?
	  	|
	  	(LP parameters += QueryParameterDeclaration (COMMA parameters += QueryParameterDeclaration)* RP)? => calculated ?= LTE getterExpr = Expression
	  )
	  SC
	  | EntityRelationDeclaration
	;

EntityRelationDeclaration
	: annotations += AnnotationMark*
	  -> KW_RELATION required ?= KW_REQUIRED? referenceType = [EntityDeclaration | ModelName] Cardinality?
	  Named
	  (
	  	(default ?= ASSIGN defaultExpr = Expression)? opposite = EntityRelationOpposite?
	  	|
	  	(LP parameters += QueryParameterDeclaration (COMMA parameters += QueryParameterDeclaration)* RP)? => calculated ?= LTE getterExpr = Expression
	  )
	  SC
	;

EntityRelationOpposite
	: EntityRelationOppositeInjected
	| EntityRelationOppositeReferenced
	;

EntityRelationOppositeInjected
	: KW_OPPOSITEADD COLON Named Cardinality?
	;

EntityRelationOppositeReferenced
	: KW_OPPOSITE COLON oppositeType = [EntityRelationDeclaration | LocalName]
	;

//EntityOperationDeclaration
//	: annotations += AnnotationMark*
//	  'operation' static ?= 'static'? (KW_VOID? | return = EntityOperationReturnDeclaration) Named
//	  (LP (parameters += EntityOperationParameterDeclaration (COMMA parameters += EntityOperationParameterDeclaration)*)? RP)
//	  (SC | BLOCK_START BLOCK_END )
//	;
//
//EntityOperationReturnDeclaration
//	: referenceType = [SingleType | ModelName] Cardinality?
//	;
//
//EntityOperationParameterDeclaration
//	: referenceType = [SingleType | ModelName] Cardinality? Named
//	;

EntityMapDeclaration
	: LP entity = [EntityDeclaration | ModelName] Named RP  // if no name defined, the 'self' shall be default name
	| KW_MAPS entity = [EntityDeclaration | ModelName] KW_AS Named
	;

fragment MappedDeclaration
	: map = EntityMapDeclaration?
	;

/****************************
 *	Query
 ****************************/

QueryDeclaration
	: annotations += AnnotationMark*
	  -> KW_QUERY (referenceType = [Persistable | ModelName] Cardinality?) Named
	  (LP (parameters += QueryParameterDeclaration (COMMA parameters += QueryParameterDeclaration)*)? RP)
	  LTE getterExpr = Expression
	  SC
	;

QueryParameterDeclaration
	: referenceType = [PrimitiveDeclaration | ModelName] Named (ASSIGN default = Expression)?
	;

/****************************
 *	Transfer
 ****************************/

TransferDeclaration
	: {SimpleTransferDeclaration}
	  annotations += AnnotationMark*
	  -> KW_TRANSFER Named
	  MappedDeclaration
	  (SC | BLOCK_START members += TransferMemberDeclaration* BLOCK_END)
	;

TransferMemberDeclaration
	: TransferEventDeclaration
	| TransferDataDeclaration
	| TransferActionDeclaration
	;

TransferDataDeclaration 
	: {TransferFieldDeclaration}
	  annotations += AnnotationMark*
	  -> KW_FIELD
	  required ?= KW_REQUIRED? referenceType = [PrimitiveDeclaration | ModelName] Named
	  ((reads ?= LTE | maps ?= MAP) getterExpr = Expression)?
	  SC
	  | TransferRelationDeclaration
	;

TransferRelationDeclaration
	: annotations += AnnotationMark*
	  -> KW_RELATION
	  required ?= KW_REQUIRED? referenceType = [TransferDeclaration | ModelName] Cardinality?
	  Named
	  (
	    reads ?= LTE getterExpr = Expression
	  	modifiers += (UpdateModifier | DeleteModifier)*
	  	|
	  	maps ?= MAP getterExpr = Expression
	    modifiers += (TransferChoiceModifier | CreateModifier | UpdateModifier | DeleteModifier)*
      )?
	  SC
	;

TransferActionDeclaration
	: annotations += AnnotationMark*
	  -> KW_ACTION ReturnFragment Named
	  LP (parameterType = [TransferDeclaration | ModelName] paramaterName = JSLID)? RP
	  (KW_THROWS errors += [ErrorDeclaration | ModelName] (COMMA errors += [ErrorDeclaration | ModelName])* )?
	  SC
	;

TransferEventDeclaration
	: TransferBuildDeclaration
	| TransferFetchDeclaration
	| TransferCreateDeclaration
	| TransferUpdateDeclaration
	| TransferDeleteDeclaration
	;

TransferFetchDeclaration returns TransferEventDeclaration
	: {TransferFetchDeclaration}
	  annotations += AnnotationMark*
	  KW_EVENT -> kind = KW_FETCH (LP RP)?
	  SC
	;

TransferCreateDeclaration returns TransferEventDeclaration
	: {TransferCreateDeclaration}
	  annotations += AnnotationMark*
	  KW_EVENT -> kind = KW_CREATE (LP (parameterType = [TransferDeclaration | ModelName] paramaterName = JSLID)? RP)?
	  SC
	;

TransferUpdateDeclaration returns TransferEventDeclaration
	: {TransferUpdateDeclaration}
	  annotations += AnnotationMark*
	  KW_EVENT -> kind = KW_UPDATE (LP RP)?
	  SC
	;

TransferDeleteDeclaration returns TransferEventDeclaration
	: {TransferDeleteDeclaration}
	  annotations += AnnotationMark*
	  KW_EVENT -> kind = KW_DELETE (LP RP)?
	  SC
	;

TransferBuildDeclaration returns TransferEventDeclaration
	: {TransferBuildDeclaration}
	  annotations += AnnotationMark*
	  KW_EVENT -> kind = KW_BUILD (LP RP)?
	  (SC | BLOCK_START (defaults += TransferDataAssignment)* BLOCK_END)
	;

TransferDataAssignment
	: leftValue = TransferDataReference ASSIGN rightValue = Expression SC
	;

TransferDataReference
	: 'self' DOT declaration = [TransferDataDeclaration | ModelName]
	;


/****************************
 *	View
 ****************************/

VisibleDeclaration returns TransferDeclaration
	: ViewDeclaration
	| RowDeclaration
	;

ViewDeclaration returns VisibleDeclaration
	: {ViewDeclaration}
	  annotations += AnnotationMark*
	  -> KW_VIEW Named
	  MappedDeclaration
	  (SC | BLOCK_START members += ViewMemberDeclaration* BLOCK_END)
	;


ViewMemberDeclaration returns TransferMemberDeclaration
	: TransferEventDeclaration

	| ViewTextDeclaration
	| ViewFieldDeclaration
	| ViewLinkDeclaration
	| ViewTableDeclaration
	| ViewPanelDeclaration

	| ViewActionDeclaration
	;

ViewTextDeclaration returns TransferFieldDeclaration
	: {ViewTextDeclaration}
	  annotations += AnnotationMark*
	  -> KW_TEXT Named reads ?= LTE getterExpr = Expression
	  modifiers += VisualModifier*
	  SC
	;

ViewFieldDeclaration returns TransferFieldDeclaration
	: {ViewFieldDeclaration} 
	  annotations += AnnotationMark*
	  -> KW_FIELD  required ?= KW_REQUIRED? referenceType = [PrimitiveDeclaration | ModelName] Named
	  ((reads ?= LTE | maps ?= MAP) getterExpr = Expression)?
	  modifiers += VisualModifier*
	  SC
	;

ViewLinkDeclaration returns TransferRelationDeclaration
	: {ViewLinkDeclaration}
	  annotations += AnnotationMark*
	  -> KW_LINK required ?= KW_REQUIRED? referenceType = [ViewDeclaration | ModelName] Named
	  (
	  	modifiers += (VisualModifier | TextModifier)*
	    | 
	    reads ?= LTE getterExpr = Expression
	  	modifiers += (VisualModifier | TextModifier | UpdateModifier | DeleteModifier)*
	  	|
	  	maps ?= MAP getterExpr = Expression
	    modifiers += (VisualModifier | TextModifier | ViewChoiceModifier | CreateModifier | UpdateModifier | DeleteModifier)*
	  )
	  SC
	;

ViewTableDeclaration returns TransferRelationDeclaration
	: {ViewTableDeclaration}
	  annotations += AnnotationMark*
	  -> KW_TABLE referenceType = [RowDeclaration | ModelName] Cardinality Named
	  (
	  	modifiers += (VisualModifier | RowsModifier | DetailModifier)*
		|
		reads ?= LTE getterExpr = Expression
	  	modifiers += (VisualModifier | RowsModifier | DetailModifier | UpdateModifier | DeleteModifier)*
		|
	  	maps ?= MAP getterExpr = Expression
	  	modifiers += (VisualModifier | RowsModifier | DetailModifier | ViewChoiceModifier | CreateModifier | UpdateModifier | DeleteModifier)*
	  )  
	  SC
	;

ViewPanelDeclaration
	: ViewTabsDeclaration
	| ViewGroupDeclaration
	;

ViewTabsDeclaration returns ViewPanelDeclaration
	: {ViewTabsDeclaration}
	  annotations += AnnotationMark*
	  -> KW_TABS Named
	  modifiers += (VisualModifier | FrameModifier)*
	  BLOCK_START (groups += ViewGroupDeclaration)* BLOCK_END
	;

ViewGroupDeclaration returns ViewPanelDeclaration
	: {ViewGroupDeclaration} 
	  annotations += AnnotationMark*
	  (-> horizontal ?= KW_HORIZONTAL | -> vertical ?= KW_VERTICAL) tag = JSLID
	  modifiers += (VisualModifier | FrameModifier | HorizontalModifier | VerticalModifier | StretchModifier)*
	  BLOCK_START (members += ViewMemberDeclaration)* BLOCK_END
	;

ViewActionDeclaration returns TransferActionDeclaration
	: {ViewActionDeclaration}
	  annotations += AnnotationMark*
	  -> KW_ACTION ReturnFragment Named
	  LP (parameterType = [ViewDeclaration | ModelName] paramaterName = JSLID)? RP
	  (KW_THROWS errors += [ErrorDeclaration | ModelName] (COMMA errors += [ErrorDeclaration | ModelName])* )?
	  modifiers += (VisualModifier | ResourceModifier)*
	  SC
	;

//ViewSubmitDeclaration returns TransferSubmitDeclaration
//	: {ViewSubmitDeclaration}
////	  annotations += AnnotationMark*
//	  KW_SUBMIT ReturnFragment Named
//	  ( label = LabelModifier?
//	  & icon = IconModifier?
//	  & enabled = EnabledModifier?
//	  & ^hidden = HiddenModifier?
//	  & width = WidthModifier?
//	  & resource = ResourceModifier?)
//	  SC
//	;




/****************************
 *	Row
 ****************************/

RowDeclaration returns VisibleDeclaration
	: {RowDeclaration}
	  annotations += AnnotationMark*
	  -> KW_ROW Named
	  MappedDeclaration
	  (SC | BLOCK_START (members += RowMemberDeclaration)* BLOCK_END)
	;

RowMemberDeclaration returns TransferMemberDeclaration
	: RowColumnDeclaration
	;

RowColumnDeclaration returns TransferFieldDeclaration
	: {RowColumnDeclaration}
	  annotations += AnnotationMark*
	  -> KW_COLUMN referenceType = [PrimitiveDeclaration | ModelName] Named ((maps ?= MAP | reads ?= LTE) getterExpr = Expression)?
	  modifiers += (LabelModifier | IconModifier | WidthModifier)*
	  SC
	;

/****************************
 *	Actor
 ****************************/

ActorDeclaration returns TransferDeclaration
	: {ActorDeclaration}
	  annotations += AnnotationMark*
	  -> KW_ACTOR KW_SYSTEM? Named
	  MappedDeclaration
	  modifiers += (RealmModifier | ClaimModifier | IdentityModifier | GuardModifier)*
	  (SC | BLOCK_START (members += ActorMemberDeclaration)* BLOCK_END)
	  | HumanActorDeclaration
	;

ActorMemberDeclaration returns TransferMemberDeclaration
	: ActorAccessDeclaration
	;

ActorAccessDeclaration returns TransferRelationDeclaration
	: {ActorAccessDeclaration}
	  annotations += AnnotationMark*
	  -> KW_ACCESS referenceType = [TransferDeclaration | ModelName] Cardinality? Named reads ?= LTE getterExpr = Expression
	  modifiers += (CreateModifier | UpdateModifier | DeleteModifier)*
	  SC
	;

/****************************
 *	Human
 ****************************/

HumanActorDeclaration returns ActorDeclaration
	: {HumanActorDeclaration}
	  annotations += AnnotationMark*
	  KW_ACTOR -> KW_HUMAN Named
	  MappedDeclaration
	  modifiers += (RealmModifier | ClaimModifier | IdentityModifier | GuardModifier)*
	  (SC | BLOCK_START (members += HumanActorMemberDeclaration)* BLOCK_END)
	;

HumanActorMemberDeclaration returns TransferMemberDeclaration
	: ActorMenuDeclaration
	| ActorGroupDeclaration
	;


ActorGroupDeclaration
	: annotations += AnnotationMark*
	  -> KW_GROUP tag = JSLID
	  modifiers += (LabelModifier | IconModifier | EnabledModifier | HiddenModifier)*
	  BLOCK_START (members += ActorMenuDeclaration)* BLOCK_END
	;

ActorMenuDeclaration returns ActorAccessDeclaration
	: {ActorMenuDeclaration}
	  annotations += AnnotationMark*
	  -> KW_MENU referenceType = [VisibleDeclaration | ModelName] Cardinality? Named (reads ?= LTE getterExpr = Expression)?
	  modifiers += (LabelModifier | IconModifier | EnabledModifier | HiddenModifier
	  			   | ViewChoiceModifier | RowsModifier | DetailModifier | CreateModifier | UpdateModifier | DeleteModifier)*
	  SC
	;

 
/****************************
 *	Error
 ****************************/

ErrorDeclaration returns TransferDeclaration
	: {ErrorDeclaration}
	  annotations += AnnotationMark*
	  -> KW_ERROR Named
	  (SC | BLOCK_START members += ErrorMemberDeclaration* BLOCK_END)
	;

ErrorMemberDeclaration returns TransferMemberDeclaration
	: TransferBuildDeclaration
	| ErrorField
	;

ErrorField returns TransferFieldDeclaration
	: {ErrorField}
	  KW_FIELD required ?= KW_REQUIRED? referenceType = [PrimitiveDeclaration | ModelName] Named SC
	;

//CreateError
//	: errorDeclarationType=[ErrorDeclaration | ModelName] (LP (parameters+=ThrowParameter (COMMA parameters+=ThrowParameter)*)? RP)?
//	;
//
//ThrowParameter
//	: errorFieldType=[ErrorField | LocalName] ASSIGN expession=Literal;

/****************************
 *	Datatype
 ****************************/

DataTypeDeclaration
    : annotations += AnnotationMark*
      -> KW_TYPE
      ( primitive = KW_BOOLEAN Named
      | primitive = KW_BINARY Named modifiers += (MimeTypesModifier | MaxFileSizeModifier)*
      | primitive = KW_STRING Named modifiers += (MinSizeModifier | MaxSizeModifier | RegexModifier)*
      | primitive = KW_NUMERIC Named modifiers += (PrecisionModifier | ScaleModifier)*
      | primitive = KW_DATE Named
      | primitive = KW_TIME Named
      | primitive = KW_TIMESTAMP Named
      )
      SC
    ;

MimeType
	: value = StringLiteral
	;


/****************************
 *	Enum
 ****************************/

EnumDeclaration
    : annotations += AnnotationMark*
      -> KW_ENUM Named
      BLOCK_START (literals += EnumLiteral)* BLOCK_END
    ;

EnumLiteral
    : annotations += AnnotationMark*
      Named -> ASSIGN value = NaturalNumber SC
    ;
	
/****************************
 *	Expression
 ***************************/

Expression returns Expression:
    SwitchExpression;

SwitchExpression returns Expression
	: ImpliesExpression (=> ({TernaryOperation.condition=current} QM)
	  thenExpression=SwitchExpression COLON
      elseExpression=SwitchExpression)?
    ;

ImpliesExpression returns Expression
	: OrExpression (=> ({BinaryOperation.leftOperand=current} operator=KW_IMPLIES) rightOperand=OrExpression)*
	;

OrExpression returns Expression
	: XorExpression (=> ({BinaryOperation.leftOperand=current} operator=KW_OR) rightOperand=XorExpression)*
	;

XorExpression returns Expression
	: AndExpression (=> ({BinaryOperation.leftOperand=current} operator=KW_XOR) rightOperand=AndExpression)*
	;

AndExpression returns Expression
	: EqualityExpression (=> ({BinaryOperation.leftOperand=current} operator=KW_AND) rightOperand=EqualityExpression)*
	;

EqualityExpression returns Expression
	: RelationalExpression (=> ({BinaryOperation.leftOperand=current} operator=(NEQ|EQ)) rightOperand=RelationalExpression)*
	;

RelationalExpression returns Expression
	: AdditiveExpression (=> ({BinaryOperation.leftOperand=current} operator=(GTE | LTE | GT | LT)) rightOperand=AdditiveExpression)*
	;

AdditiveExpression returns Expression
	: MultiplicativeExpression (=> ({BinaryOperation.leftOperand=current} operator=(PLUS|MINUS)) rightOperand=MultiplicativeExpression)*
	;

MultiplicativeExpression returns Expression
	: ExponentExpression (=> ({BinaryOperation.leftOperand=current} operator=(MUL | DIV | KW_DIV | KW_MOD)) rightOperand=ExponentExpression)*
	;

ExponentExpression returns Expression
	: UnaryOperation (=> ({BinaryOperation.leftOperand=current} operator=EXP) rightOperand=UnaryOperation)*
	;
 
UnaryOperation returns Expression
	: {UnaryOperation} operator=KW_NOT operand=UnaryOperation
	| Navigation
    ;

Navigation returns Expression
	: {Navigation} base = NavigationBase (features += Feature)*
	;

NavigationBase
	: Self
	| Parentheses
	| NavigationBaseDeclarationReference
	| QueryCall
	| Literal
	;

Self
	: isSelf ?= 'self'
	;

Parentheses
	: LP => expression = Expression RP		
	;
 
NavigationBaseDeclarationReference
	: {NavigationBaseDeclarationReference} reference = [NavigationBaseDeclaration | ModelName]
 	;
 
NavigationBaseDeclaration
	: EntityDeclaration
	| LambdaVariable
	| QueryParameterDeclaration
	| PrimitiveDeclaration
	| EntityMapDeclaration
	;

QueryCall
	: declaration = [QueryDeclaration | ModelName ] LP (arguments += QueryArgument (COMMA arguments += QueryArgument)*)? RP
	;

Feature
	: MemberReference
	| Call
	;

MemberReference
    : DOT member = [NavigationTarget | LocalName] (LP (arguments += QueryArgument (COMMA arguments += QueryArgument)*)? RP)?
    ;

Call
	: FunctionCall
	| LambdaCall
	;

FunctionCall
	: EXCL declaration = [FunctionDeclaration | LocalName ] LP (arguments += FunctionArgument (COMMA arguments += FunctionArgument)*)? RP
	;

FunctionArgument
    : declaration = [FunctionParameterDeclaration | LocalName ] ASSIGN expression = Expression
    ;

QueryArgument
    : declaration = [QueryParameterDeclaration | LocalName ] ASSIGN expression = Expression
    ;

LambdaCall
	: EXCL declaration = [LambdaDeclaration | LocalName ] LP variable = LambdaVariable => PIPE lambdaExpression = Expression RP;

LambdaVariable
    : {LambdaVariable} Named    	
    ;


/****************************
 *	Function
 ***************************/

FunctionDeclaration
	: KW_FUNCTION returnType = TypeDescription
	  Named LP (parameters += FunctionParameterDeclaration (COMMA parameters += FunctionParameterDeclaration)*)? RP
	  KW_ON baseType = TypeDescription
	  SC
	;

FunctionParameterDeclaration
	: isRequired ?= KW_REQUIRED? description = TypeDescription Named
	;

TypeDescription
	: {TypeDescription} type = Type
	| collection ?= KW_COLLECTION LT type = Type GT
	| declaration ?= KW_DECLARATION LT type = Type GT
	| constant ?= KW_CONSTANT LT type = Type GT
	;

Type
	: KW_BOOLEAN | KW_BINARY | KW_STRING | KW_NUMERIC | KW_DATE | KW_TIME | KW_TIMESTAMP | KW_ENUM | KW_ENTITY
	;

LambdaDeclaration 
	: KW_LAMBDA returnType = TypeDescription
	  Named LP (expressionType = TypeDescription)? RP
	  SC
	;


/****************************
 *	Annotation
 ***************************/

AnnotationDeclaration
	: KW_ANNOTATION Named (LP (parameters += AnnotationParameterDeclaration (COMMA parameters += AnnotationParameterDeclaration)*)? RP)?
	  targets += AnnotationTarget*
	  (SC | BLOCK_START annotations += AnnotationMark* BLOCK_END)
	;

AnnotationParameterDeclaration
	: referenceType = AnnotationParameterType Named
	;

AnnotationParameterType
	: type = (KW_BOOLEAN | KW_STRING | KW_NUMERIC)
	;

AnnotationTarget
	: KW_MODEL COLON model ?= KW_MODEL
	| KW_MODEL COLON ^import ?= KW_IMPORT
	| KW_MODEL COLON type ?= KW_TYPE
	| KW_MODEL COLON enumeration ?= KW_ENUM
	| KW_MODEL COLON entity ?= KW_ENTITY
	| KW_MODEL COLON transfer ?= KW_TRANSFER
	| KW_MODEL COLON actor ?= KW_ACTOR
	| KW_MODEL COLON query ?= KW_QUERY
	| KW_MODEL COLON view ?= KW_VIEW
	| KW_MODEL COLON row ?= KW_ROW
	
	| KW_ENUM COLON enumLiteral ?= KW_LITERAL

	| KW_ENTITY COLON entityField ?= KW_FIELD
	| KW_ENTITY COLON entityRelation ?= KW_RELATION

	| KW_TRANSFER COLON transferAction ?= KW_ACTION
	| KW_TRANSFER COLON transferEvent ?= KW_EVENT
	| KW_TRANSFER COLON transferField ?= KW_FIELD
	| KW_TRANSFER COLON transferRelation ?= KW_RELATION

	| KW_ACTOR COLON actorGroup ?= KW_GROUP
	| KW_ACTOR COLON actorMenu ?= KW_MENU
	| KW_ACTOR COLON actorAccess ?= KW_ACCESS

	| KW_VIEW COLON viewAction ?= KW_ACTION
	| KW_VIEW COLON viewEvent ?= KW_EVENT
	| KW_VIEW COLON viewField ?= KW_FIELD
	| KW_VIEW COLON viewGroup ?= KW_GROUP
	| KW_VIEW COLON viewLink ?= KW_LINK
	| KW_VIEW COLON viewTable ?= KW_TABLE
	| KW_VIEW COLON viewTabs ?= KW_TABS
	| KW_VIEW COLON viewText ?= KW_TEXT

	| KW_ROW COLON rowColumn ?= KW_COLUMN
	;

AnnotationMark
	: '@' declaration = [AnnotationDeclaration | ModelName] (LP arguments += AnnotationArgument? (COMMA arguments += AnnotationArgument?)* RP)?
	;

AnnotationArgument
    : declaration = [AnnotationParameterDeclaration | LocalName] ASSIGN (literal = Literal | reference = [AnnotationParameterDeclaration | LocalName])
    ;

EnumLiteralReference
    : {EnumLiteralReference} enumDeclaration = [EnumDeclaration | ModelName] '#' enumLiteral = [EnumLiteral | EnumLiteralName ]    	
    ;

NavigationTarget
    : EntityMemberDeclaration
    | EntityRelationOppositeInjected
    ;



 // ************************************
 // For later use
 // ************************************
 
//ConstraintDeclaration
//	: KW_CONSTRAINT Named expression = Expression (throw = ThrowModifier?) SC
//	;
//
//ThrowModifier
//	: KW_THROW COLON value = CreateError
//	;


/****************************
 *	Modifiers
 ****************************/

Modifiable
	: {Modifiable} modifiers += Modifier*
	;

ModifiableDeclaration returns Modifiable
	: TransferMemberDeclaration
	| TypeDeclaration
	;

Modifier
	: CreateModifier
	| UpdateModifier
	| DeleteModifier
	| TransferChoiceModifier
	| ResourceModifier
	| RowsModifier
	| ViewChoiceModifier
	| TextModifier
	| DetailModifier
	| RealmModifier
	| ClaimModifier
	| IdentityModifier
	| GuardModifier
	| FrameModifier
	| HorizontalModifier
	| VerticalModifier
	| StretchModifier
	| MinSizeModifier
	| MaxSizeModifier
	| RegexModifier
	| PrecisionModifier
	| ScaleModifier
	| MimeTypesModifier
	| MaxFileSizeModifier

	| VisualModifier
	;

VisualModifier
	: LabelModifier
	| IconModifier
	| EnabledModifier
	| HiddenModifier
	| WidthModifier
	;


CreateModifier
	: type = KW_CREATE COLON value = BooleanLiteral
	;

UpdateModifier
	: type = KW_UPDATE COLON value = BooleanLiteral
	;

DeleteModifier
	: type = KW_DELETE COLON value = BooleanLiteral
	;

TransferChoiceModifier
	: type = KW_CHOICES COLON expression = Expression
	;

ResourceModifier
	: type = KW_ACCESS COLON value = [ActorAccessDeclaration | ModelName]
	;

RowsModifier
	: type = KW_ROWS COLON value = NaturalNumber
	;

ViewChoiceModifier returns TransferChoiceModifier
	: type = KW_CHOICES COLON rows = [RowDeclaration | ModelName] LRB LP expression = Expression RP
	;

TextModifier
	: type = KW_TEXT COLON expression = Expression
	;

DetailModifier
	: type = KW_DETAIL COLON view = [ViewDeclaration | ModelName]
	;


RealmModifier
	: type = KW_REALM COLON value = StringLiteral
	;

ClaimModifier
	: type = KW_CLAIM COLON value = StringLiteral
	;

IdentityModifier
	: type = KW_IDENTITY COLON expression = Expression
	;

GuardModifier
	: type = KW_GUARD COLON expression = Expression
	;

FrameModifier
	: type = KW_FRAME COLON (disabled ?= KW_FALSE | enabled ?= KW_TRUE)
	;	
	
LabelModifier
	: type = KW_LABEL COLON value = StringLiteral
	;

IconModifier
	:  type = KW_ICON COLON value = StringLiteral
	;	

EnabledModifier
	: type = KW_ENABLED COLON expression = Expression
	;

HiddenModifier
	: type = KW_HIDDEN COLON expression = Expression
	;

WidthModifier
	: type = KW_WIDTH COLON value = NaturalNumber
	;

HorizontalModifier
	: type = KW_HALIGN COLON (left ?= KW_LEFT | right ?= KW_RIGHT | center ?= KW_CENTER)
	;

VerticalModifier
	: type = KW_VALIGN COLON (top ?= KW_TOP | bottom ?= KW_BOTTOM | center ?= KW_CENTER)
	;

StretchModifier
	: type = KW_STRETCH COLON (disabled ?= KW_FALSE | enabled ?= KW_TRUE)
	;

MinSizeModifier
	: type = KW_MINSIZE COLON value = NaturalNumber
	;

MaxSizeModifier
	: type = KW_MAXSIZE COLON value = NaturalNumber
	;

RegexModifier
	: type = KW_REGEX COLON regex = StringLiteral
	;

PrecisionModifier
	: type = KW_PRECISION COLON value = NaturalNumber
	;

ScaleModifier
	: type = KW_SCALE COLON value = NaturalNumber
	;

MimeTypesModifier
	: type = KW_MIMETYPE COLON LB values += MimeType (COMMA values += MimeType)* RB
	;

MaxFileSizeModifier
	: type = KW_MAXFILESIZE COLON numeric = NaturalNumber (measure = (KW_KB | KW_MB | KW_GB | KW_KIB | KW_MIB | KW_GIB))? 
	;

/****************************
 *	Literals
 ****************************/

Literal
	: BooleanLiteral
	| NumberLiteral
	| StringLiteral
	| TemporalLiteral
	| EnumLiteralReference
	;

BooleanLiteral
	: {BooleanLiteral} (KW_FALSE | isTrue?=KW_TRUE)
	;

NumberLiteral
	: IntegerLiteral
	| DecimalLiteral
	;

IntegerLiteral hidden()
	: (minus ?= MINUS | PLUS)? value=NaturalNumber
	;

DecimalLiteral hidden()
	: (minus ?= MINUS | PLUS)? value=DecimalNumber
	;

StringLiteral
	: {EscapedStringLiteral} value=STRING
	| {RawStringLiteral} value=RAW_STRING
	;

TemporalLiteral
	: {DateLiteral} value=DATE
	| {TimestampLiteral} value=TIMESTAMP
	| {TimeLiteral} value=TIME
	;


/****************************
 *	Common
 ****************************/

fragment Named
	: name = JSLID;

fragment Cardinality
    : many ?= LRB
    ;

fragment ReturnFragment
	: KW_VOID?
	| referenceTypes += [TransferDeclaration | ModelName]
	| LT referenceTypes += [TransferDeclaration | ModelName] (PIPE referenceTypes += [TransferDeclaration | ModelName])* GT
	;

DecimalNumber returns ecore::EBigDecimal
	: DECIMAL
	;

NaturalNumber returns ecore::EBigInteger
	: NUMBER
	;

EnumLiteralName
	: JSLID
    ;

LocalName
	: JSLID
    ;

ModelName
	: JSLID SUBID*
    ;

// JSLID: ID ;

JSLID: ID

//	// Declarations not allowed to use
//	| KW_ACTOR | KW_ANNOTATION | KW_ENTITY | KW_ENUM | KW_ERROR |  KW_IMPORT
//  | KW_MODEL | KW_QUERY | KW_ROW | KW_TRANSFER | KW_TYPE | KW_VIEW
//

	// Declarations
	| KW_ABSTRACT | KW_AS | KW_EXTENDS | KW_FUNCTION | KW_HUMAN
	| KW_LAMBDA | KW_MAPS | KW_ON | KW_SYSTEM | KW_THROWS



	// Features	
	| KW_ACCESS | KW_ACTION | KW_BUILD | KW_COLUMN | KW_CONSTRAINT | KW_CREATE | KW_DELETE | KW_EVENT | KW_FIELD
	| KW_GROUP | KW_HORIZONTAL | KW_IDENTIFIER | KW_LINK | KW_LITERAL | KW_MENU | KW_RELATION | KW_SUBMIT | KW_TABLE | KW_TABS
	| KW_TEXT | KW_UPDATE | KW_VERTICAL
	
	// Constants
	| KW_BINARY | KW_BOOLEAN | KW_BOTTOM | KW_CENTER | KW_COLLECTION | KW_CONSTANT | KW_DATE | KW_DECLARATION
	| KW_LEFT | KW_NUMERIC | KW_RIGHT | KW_STRING | KW_TIME | KW_TIMESTAMP | KW_TOP
	| KW_KB | KW_MB | KW_GB | KW_KIB | KW_MIB | KW_GIB
	
	// Attributes
	| KW_CHOICES | KW_CLAIM | KW_DETAIL | KW_ENABLED | KW_FRAME | KW_GUARD | KW_HIDDEN | KW_ICON
	| KW_IDENTITY | KW_LABEL | KW_OPPOSITE | KW_PRECISION | KW_REALM | KW_REGEX | KW_ROWS | KW_SCALE | KW_STRETCH | KW_THROW
	| KW_WIDTH  // KW_REQUIRED is missing deliberately !!!!
	
	// Operators
	| KW_IMPLIES | KW_OR | KW_XOR | KW_AND | KW_DIV | KW_MOD
	;


/****************************
 *	Terminals
 ****************************/

// Declarations
terminal KW_ABSTRACT:	'abstract';
terminal KW_ACTOR:		'actor';
terminal KW_ANNOTATION:	'annotation';
terminal KW_AS:			'as';
terminal KW_ENTITY:		'entity';
terminal KW_ENUM:		'enum';
terminal KW_ERROR:		'error';
terminal KW_EXTENDS:	'extends';
terminal KW_FUNCTION:	'function';
terminal KW_HUMAN:		'human';
terminal KW_IMPORT:		'import';
terminal KW_LAMBDA:		'lambda';
terminal KW_MAPS:		'maps';
terminal KW_MODEL:		'model';
terminal KW_ON:			'on';
terminal KW_QUERY:		'query';
terminal KW_ROW:		'row';
terminal KW_SYSTEM:		'system';
terminal KW_TRANSFER:	'transfer';
terminal KW_TYPE:		'type';
terminal KW_VIEW:		'view';

// Features	
terminal KW_ACCESS:		'access';
terminal KW_ACTION:		'action';
terminal KW_BUILD:      'build';   // no highlight
terminal KW_COLUMN:		'column';
terminal KW_CONSTRAINT:	'constraint';
terminal KW_CREATE:		'create';   // no highlight
terminal KW_DELETE:		'delete';   // no highlight
terminal KW_EVENT:		'event';
terminal KW_FIELD:		'field';
terminal KW_FETCH:		'fetch';   // no highlight
terminal KW_GROUP:		'group';
terminal KW_HORIZONTAL: 'horizontal';
terminal KW_IDENTIFIER:	'identifier';
terminal KW_LINK:		'link';
terminal KW_LITERAL:	'literal';
terminal KW_MENU:		'menu';
terminal KW_RELATION:	'relation';
terminal KW_SUBMIT:		'submit';
terminal KW_TABLE:		'table';
terminal KW_TABS:		'tabs';
terminal KW_TEXT:		'text';
terminal KW_THROWS:		'throws';
terminal KW_UPDATE:		'update';   // no highlight
terminal KW_VERTICAL:   'vertical';

// Constants
terminal KW_BINARY:		'binary';
terminal KW_BOOLEAN:	'boolean';
terminal KW_BOTTOM:		'bottom';
terminal KW_CENTER:		'center';
terminal KW_COLLECTION:	'collection';
terminal KW_CONSTANT:	'constant';
terminal KW_DATE:		'date';
terminal KW_DECLARATION:'declaration';
terminal KW_FALSE:		'false';  // not ID
terminal KW_LEFT:		'left';
terminal KW_NUMERIC:	'numeric';
terminal KW_RIGHT:		'right';
terminal KW_STRING:		'string';
terminal KW_TIME:		'time';
terminal KW_TIMESTAMP:	'timestamp';
terminal KW_TOP:		'top';
terminal KW_TRUE:		'true';  // not ID
terminal KW_VOID:		'void';  // not ID
terminal KW_KB:			'KB';
terminal KW_MB:			'MB';
terminal KW_GB:			'GB';
terminal KW_KIB:		'KiB';
terminal KW_MIB:		'MiB';
terminal KW_GIB:		'GiB';

// Attributes
terminal KW_CHOICES:	'choices';
terminal KW_CLAIM:		'claim';
terminal KW_DETAIL:		'detail';
terminal KW_ENABLED:	'enabled';
terminal KW_FRAME:		'frame';
terminal KW_GUARD:		'guard';
terminal KW_HIDDEN:		'hidden';
terminal KW_HALIGN:	    'h-align';
terminal KW_ICON:		'icon';
terminal KW_IDENTITY:	'identity';
terminal KW_LABEL:		'label';
terminal KW_MAXFILESIZE:'max-file-size';
terminal KW_MAXSIZE:	'max-size';
terminal KW_MINSIZE:	'min-size';
terminal KW_MIMETYPE:	'mime-type';
terminal KW_OPPOSITE:	'opposite';
terminal KW_OPPOSITEADD:'opposite-add';
terminal KW_PRECISION:	'precision';
terminal KW_REALM:		'realm';
terminal KW_REGEX:		'regex';
terminal KW_REQUIRED:	'required';  // not ID
terminal KW_ROWS:		'rows';
terminal KW_SCALE:		'scale';
terminal KW_STRETCH:	'stretch';
terminal KW_THROW:		'throw';
terminal KW_VALIGN:		'v-align';
terminal KW_WIDTH:		'width';

// Operators
terminal KW_NOT:        'not';  // not ID
terminal KW_IMPLIES:	'implies';
terminal KW_OR:			'or';
terminal KW_XOR:		'xor';
terminal KW_AND:		'and';
terminal KW_DIV:		'div';
terminal KW_MOD:		'mod';

terminal LP:    '(';
terminal RP:    ')';
terminal DOT:   '.';
terminal COMMA: ',';
terminal LB:    '[';
terminal RB:    ']';
terminal LRB:   '[]';
terminal ASSIGN:'=';
terminal LT:    '<';
terminal GT:    '>';
terminal QM:    '?';
terminal COLON: ':';
terminal NEQ:   '!=';
terminal EQ:    '==';
terminal GTE:   '>=';
terminal LTE:   '<=';
terminal MAP:   '<=>';
terminal PLUS:  '+';
terminal MINUS: '-';
terminal MUL:   '*';
terminal DIV:   '/';
terminal EXP:   '^';
terminal EXCL:  '!';
terminal PIPE:  '|';

terminal BLOCK_START
	: '{'
	;

terminal BLOCK_END
	: '}' WS? SC?
	;

terminal fragment DIGIT
	: '0'..'9'
	;

terminal fragment ALPHABET
    : 'a'..'z' | 'A'..'Z'    	
    ;

terminal fragment NEWLINE
    : '\n' | '\r'   	
    ;

terminal TIMESTAMP
	: '`' DIGIT+ '-' DIGIT DIGIT '-' DIGIT DIGIT 'T' DIGIT DIGIT ':' DIGIT DIGIT (':' DIGIT DIGIT ('.' DIGIT+)?)? ('Z' | ('+' | '-') DIGIT DIGIT (':' DIGIT DIGIT)?)?'`'
	;

terminal TIME
	: '`' DIGIT DIGIT ':' DIGIT DIGIT (':' DIGIT DIGIT ('.' DIGIT+ )? )? '`'
	;

terminal DATE
	: '`' DIGIT+ '-' DIGIT DIGIT '-' DIGIT DIGIT '`'
	;

terminal DECIMAL
	: NUMBER '.' NUMBER
	;

terminal NUMBER
	: DIGIT+
	;

terminal SUBID
	: ('::' ID)
	;

terminal ID
	: ALPHABET (ALPHABET | DIGIT)* | '`' ALPHABET (ALPHABET | DIGIT)* '`'
	;

terminal STRING
	: '"' ('\\' ('t'|'n'|'f'|'r'|'"'|'\\') | !('\\' | '"' | NEWLINE))* '"'
	;

terminal RAW_STRING
	: 'r"' (!('"' | NEWLINE))* '"'
	;
 
terminal ML_COMMENT
	: '/*'->'*/'
	;

terminal SL_COMMENT
	: '//' !(NEWLINE)*
	;

terminal SC
	: (';' WS?)+
	;

terminal WS
	: (' '|'\t'|'\r'|'\n')+
	;

