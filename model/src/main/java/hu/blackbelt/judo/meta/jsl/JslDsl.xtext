grammar hu.blackbelt.judo.meta.jsl.JslDsl hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate jsldsl "http://www.blackbelt.hu/judo/meta/jsl/JslDsl"
 
ModelDeclaration returns ModelDeclaration
    : {ModelDeclaration} 'model' name = ModelName ';'+
      imports += ModelImportDeclaration*
	  (declarations += Declaration)*
    ;

JSLID : ID | 'boolean' | 'binary' | 'string' | 'numeric' | 'date' | 'time' | 'timestamp' | 'enum'
	       | 'regex' | 'precision' | 'scale'
	       | 'DESC' | 'ASC'
	;

ModelImportDeclaration 
    : 'import' model = [ModelDeclaration | ModelName] ('as' alias = JSLID)? ';'+
	;

Declaration
	: (TypeDeclaration
	| ErrorDeclaration
	| QueryDeclaration
	| FunctionDeclaration
	| LambdaDeclaration)
	  ';'*
	;


TypeDeclaration
	: PrimitiveDeclaration
	| ClassDeclaration
	;

PrimitiveDeclaration
	: EnumDeclaration
	| DataTypeDeclaration
    ;

ClassDeclaration
	: EntityDeclaration
	;

/****************************
 *	Entity
 ****************************/
fragment Named
	: name = JSLID;

fragment Cardinality
    : isMany ?= '[]'
    ;

EntityDeclaration
	: {EntityDeclaration}
	  'entity' isAbstract ?= 'abstract'? Named
	  ('extends' extends += [EntityDeclaration | LocalName] (',' extends += [EntityDeclaration | LocalName])*)?
	  BLOCK_START (members += EntityMemberDeclaration)* BLOCK_END
	;


QueryDeclaration
	: 'query' (referenceType = [SingleType | LocalName] Cardinality?) Named
	  ('(' (parameters += QueryDeclarationParameter (',' parameters += QueryDeclarationParameter)*)? ')')
	  "=>" expression = Expression
	  ';'
	;

EntityMemberDeclaration
	: (EntityFieldDeclaration
	| EntityIdentifierDeclaration
	| EntityRelationDeclaration
	| EntityDerivedDeclaration
	| EntityQueryDeclaration
//	| ConstraintDeclaration
	)
	  ';'*
	;

EntityFieldDeclaration
	: 'field' (isRequired ?= 'required'? referenceType = [SingleType | LocalName] Cardinality?) Named
	  (defaultExpression = DefaultExpressionType)? ';'
	;

EntityIdentifierDeclaration
	: 'identifier' isRequired ?= 'required'? referenceType = [PrimitiveDeclaration | LocalName] Named
	  (defaultExpression = DefaultExpressionType)? ';'
	;

DefaultExpressionType
	: {DefaultExpressionType} '=' expression = 
		( Expression )
	;

SingleType 
	: PrimitiveDeclaration
	| EntityDeclaration
	;


EntityDerivedDeclaration
	: 'derived' (referenceType = [SingleType | LocalName] Cardinality?) Named
	  "=>" expression = Expression ';'
	;

EntityQueryDeclaration
	: 'query' (referenceType = [SingleType | LocalName] Cardinality?) Named
	  ('(' (parameters += QueryDeclarationParameter (',' parameters += QueryDeclarationParameter)*)? ')')
	  "=>" expression = Expression ';'
	;
 
QueryDeclarationParameter
	: referenceType = [PrimitiveDeclaration | LocalName] Named ("=" default = Literal)?
	;

EntityRelationDeclaration
	: 'relation' (isRequired ?= 'required'? referenceType = [EntityDeclaration | LocalName] Cardinality?) Named
	  opposite = EntityRelationOpposite? ';'
	;

EntityRelationOpposite
	: EntityRelationOppositeInjected
	| EntityRelationOppositeReferenced
	;

EntityRelationOppositeInjected
	: 'opposite-add' Named Cardinality?
	;

EntityRelationOppositeReferenced
	: 'opposite' oppositeType = [EntityRelationDeclaration | LocalName]
	;


/****************************
 *	Datatype
 ****************************/

DataTypeDeclaration
    : 'type'
      (
		  BooleanPrimitive
		| BinaryPrimitive '(' mimeTypes = ModifierMimeTypes ',' maxFileSize = ModifierMaxFileSize ')'
		| StringPrimitive '(' minSize = ModifierMinSize ',' maxSize = ModifierMaxSize (',' regex = ModifierRegex)? ')'
		| NumericPrimitive '(' precision = ModifierPrecision ',' scale = ModifierScale ')'
		| DatePrimitive
		| TimePrimitive
		| TimestampPrimitive
      ) ';'
    ;

BooleanPrimitive returns DataTypeDeclaration: primitive = 'boolean' Named;
BinaryPrimitive returns DataTypeDeclaration : primitive = 'binary' Named;
StringPrimitive returns DataTypeDeclaration : primitive = 'string' Named;
NumericPrimitive returns DataTypeDeclaration : primitive = 'numeric' Named;
DatePrimitive returns DataTypeDeclaration : primitive = 'date' Named;
TimePrimitive returns DataTypeDeclaration : primitive = 'time' Named;
TimestampPrimitive returns DataTypeDeclaration : primitive = 'timestamp' Named;



/****************************
 *	Enum
 ****************************/

EnumDeclaration
    : 'enum' Named
      BLOCK_START (literals += EnumLiteral)* BLOCK_END
    ;

EnumLiteral
    : Named '=' value = Integer ';'+
    ;


ModifierMinSize
	: 'min-size' '=' value = Integer
	;

ModifierMaxSize
	: 'max-size' '=' value = Integer
	;

ModifierRegex
	: 'regex' '=' regex = StringLiteral
	;

ModifierPrecision
	: 'precision' '=' value = Integer
	;

ModifierScale
	: 'scale' '=' value = Integer
	;

ModifierMimeTypes
	: 'mime-types' '=' '[' values += MimeType (',' values += MimeType)* ']'
	;

MimeType
	: value = StringLiteral
	;

ModifierMaxFileSize
	: 'max-file-size' '=' numeric = Integer (unit = DataUnit)?
	;
	
enum DataUnit
	: KB = 'kB'
	| MB = 'MB'
	| GB = 'GB'
	| KiB = 'KiB'
	| MiB = 'MiB'
	| GiB = 'GiB'
	;

/****************************
 *	Expression
 ***************************/
Expression returns Expression:
    SwitchExpression;

SwitchExpression returns Expression
	: ImpliesExpression (=> ({TernaryOperation.condition=current} '?')
	  thenExpression=SwitchExpression ':'
      elseExpression=SwitchExpression)?
    ;

ImpliesExpression returns Expression
	: OrExpression (=> ({BinaryOperation.leftOperand=current} operator='implies') rightOperand=OrExpression)*
	;

OrExpression returns Expression
	: XorExpression (=> ({BinaryOperation.leftOperand=current} operator='or') rightOperand=XorExpression)*
	;

XorExpression returns Expression
	: AndExpression (=> ({BinaryOperation.leftOperand=current} operator='xor') rightOperand=AndExpression)*
	;

AndExpression returns Expression
	: EqualityExpression (=> ({BinaryOperation.leftOperand=current} operator='and') rightOperand=EqualityExpression)*
	;

EqualityExpression returns Expression
	: RelationalExpression (=> ({BinaryOperation.leftOperand=current} operator=('!='|'==')) rightOperand=RelationalExpression)*
	;

RelationalExpression returns Expression
	: AdditiveExpression (=> ({BinaryOperation.leftOperand=current} operator=('>=' | '<=' | '>' | '<')) rightOperand=AdditiveExpression)*
	;

AdditiveExpression returns Expression
	: MultiplicativeExpression (=> ({BinaryOperation.leftOperand=current} operator=('+'|'-')) rightOperand=MultiplicativeExpression)*
	;

MultiplicativeExpression returns Expression
	: ExponentExpression (=> ({BinaryOperation.leftOperand=current} operator=('*' | '/' | 'div' | 'mod')) rightOperand=ExponentExpression)*
	;

ExponentExpression returns Expression
	: UnaryOperation (=> ({BinaryOperation.leftOperand=current} operator='^') rightOperand=UnaryOperation)*
	;
 
UnaryOperation returns Expression
	: {UnaryOperation} operator='not' operand=UnaryOperation
	| Navigation
    ;

/*
FunctionedExpression returns Expression
	: FunctionableExpression ({FunctionedExpression.operand=current} functionCall=FunctionCall)?
//	| EnumLiteralReference
    ;
*/
 
/*
FunctionableExpression returns Expression
	: NavigationExpression
	| Literal
	| ParenthesizedExpression
	;
*/

Navigation returns Expression
	: {Navigation} base = NavigationBase (features += Feature)*
	;

NavigationBase
	: Self
	| Parentheses
	| NavigationBaseDeclarationReference
	| QueryCall
	| Literal
	;

Self
	: isSelf ?= 'self'		
	;

Parentheses
	: '(' => expression = Expression ')'		
	;
 
NavigationBaseDeclarationReference
	: {NavigationBaseDeclarationReference} reference = [NavigationBaseDeclaration | LocalName]
 	;
 
NavigationBaseDeclaration
	: EntityDeclaration
	| LambdaVariable
	| QueryDeclarationParameter
	| PrimitiveDeclaration
	;

QueryCall
	: declaration = [QueryDeclaration | LocalName ] '(' (arguments += Argument (',' arguments += Argument)*)? ')'
	;

Feature
	: MemberReference
	| Call
	;

MemberReference
    : '.' member = [NavigationTarget | LocalName]
    ;

Call
	: EntityQueryCall
	| FunctionCall
	| LambdaCall
	;

EntityQueryCall
	: '.' declaration = [EntityQueryDeclaration | LocalName ] => '(' (arguments += Argument (',' arguments += Argument)*)? ')'
	;

FunctionCall
	: '!' declaration = [FunctionDeclaration | LocalName ] '(' (arguments += FunctionArgument (',' arguments += FunctionArgument)*)? ')'
	;

FunctionArgument
    : declaration = [FunctionParameterDeclaration | LocalName ] '=' expression = Expression
    ;

Argument
    : Named '=' expression = Expression
    ;

LambdaCall
	: '!' declaration = [LambdaDeclaration | LocalName ] '(' variable = LambdaVariable => '|' expression = Expression ')';

LambdaVariable
    : {LambdaVariable} Named    	
    ;

FunctionDeclaration
	: 'function' returnType = TypeDescription Named '(' (parameters += FunctionParameterDeclaration (',' parameters += FunctionParameterDeclaration)*)? ')' 'on' baseType = TypeDescription ';'
	;

FunctionParameterDeclaration
	: isRequired ?= 'required'? description = TypeDescription Named
	;

TypeDescription
	: {TypeDescription} type = Type
	| collection ?= 'collection' '<' type = Type '>'
	| declaration ?= 'declaration' '<' type = Type '>'
	| constant ?= 'constant' '<' type = Type '>'
	;

Type
	: 'boolean' | 'binary' | 'string' | 'numeric' | 'date' | 'time' | 'timestamp' | 'enum' | 'entity'
	;

LambdaDeclaration 
	: 'lambda' returnType = TypeDescription Named '(' ')' ';'
	;
 
EnumLiteralReference returns Expression
    : {EnumLiteralReference} enumDeclaration = [EnumDeclaration | LocalName] '#' enumLiteral = [EnumLiteral | EnumLiteralName ]    	
    ;

NavigationTarget
    : EntityFieldDeclaration
	| EntityIdentifierDeclaration
	| EntityRelationDeclaration
	| EntityDerivedDeclaration
    | EntityRelationOppositeInjected
    ;

Literal
	: BooleanLiteral
	| NumberLiteral
	| StringLiteral
	| TemporalLiteral
	| EnumLiteralReference
	;

BooleanLiteral returns Expression
	: {BooleanLiteral} ('false' | isTrue?='true')
	;

NumberLiteral returns Expression
	: IntegerLiteral
	| DecimalLiteral
	;

IntegerLiteral hidden()
	: (minus ?= "-" | "+")? value=Integer
	;

DecimalLiteral hidden()
	: (minus ?= "-" | "+")? value=Decimal
	;

StringLiteral returns Expression
	: {EscapedStringLiteral} value=STRING
	| {RawStringLiteral} value=RAW_STRING
	;

TemporalLiteral returns Expression
	: {DateLiteral} value=DATE
	| {TimeStampLiteral} value=TIMESTAMP
	| {TimeLiteral} value=TIME
	;


 // ************************************
 // For later use
 // ************************************
 
 ConstraintDeclaration
	: 'constraint' Named expression = Expression ('onerror' error = CreateError)? ';'
	;

 
/****************************
 *	Error
 ****************************/

ErrorDeclaration
	: 'error' Named ('extends' extends = [ErrorDeclaration | LocalName])?
	  BLOCK_START (fields += ErrorField)* BLOCK_END
	;

ErrorField
	: 'field' referenceType = [PrimitiveDeclaration | LocalName] Named
	  (defaultExpression = DefaultExpressionType)? ';'+
	;

CreateError
	: errorDeclarationType=[ErrorDeclaration | LocalName] ('(' (parameters+=ThrowParameter (',' parameters+=ThrowParameter)*)? ')')?
	;

ThrowParameter
	: errorFieldType=[ErrorField | LocalName] '=' expession=Literal;



/*
QueryParameter
	:  queryParameterType=[QueryDeclarationParameter | QueryParameterName] '=' (literal = Literal | parameter = [QueryDeclarationParameter | QueryParameterName])     // expression=MultilineExpression
	;


CreateExpression returns Expression
	: {CreateExpression} 'new' createType=[ClassDeclaration | LocalName]
	  (   '(' (assignments+=CreateParameter (',' assignments+=CreateParameter)*)? ')'
	  	| '[' (creates += Expression (',' creates += Expression)*)? ']'
	  )
	;

CreateParameter: name=JSLID '=' right=Expression;
 */
 
/**
 * Function

FunctionCall
	: LiteralCall
	| LambdaCall
	;


FunctionParameter
	: LiteralFunctionParameters
	| LambdaFunctionParameters
	;

LiteralCall declaration = [LiteralFunctionDeclaration | LocalName ] '(' (parameters += LiteralFunctionParameter (',' parameters += LiteralFunctionParameter)*)? ')' ;
LambdaCall returns Function : {LambdaFunction} functionDeclarationReference = [LambdaFunctionDeclaration | LocalName ] '(' lambdaArgument=LambdaVariable '|' expression = Expression ')';
QueryCall returns NavigationExpression
	: {QueryCallExpression} queryDeclarationType = [ QueryDeclaration | LocalName ] '(' (parameters+=QueryParameter (',' parameters+=QueryParameter)*)? ')' (features+=Feature*)
	;

LiteralFunctionParameters
    : {LiteralFunctionParameters} parameters += LiteralFunctionParameter (',' parameters += LiteralFunctionParameter)*
	;


LiteralFunctionParameter 
	: declaration = [FunctionParameterDeclaration | LocalName] '=' expression=Expression
	;

LambdaFunctionParameters
    : lambdaArgument=LambdaVariable '|' expression = Expression
	;
    
LambdaVariable
    : {LambdaVariable} Named    	
    ;

SelectorFunctionParameters
    : {SelectorFunctionParameters} selectorArgument=SelectorVariable '|' selectors += SelectorDeclaration (',' selectors += SelectorDeclaration)*
	;

SelectorDeclaration
    : {SelectorDeclaration} selector = [SelectorVariable | LocalName] '.' member = [EntityMemberDeclaration | LocalName] ('DESC' | isTrue?='ASC')?
    ;

SelectorVariable
    : {SelectorVariable} Named
    ;
 */

/**
 *  Function declaration
 */
 
/*
enum FunctionReturnType
	: RT_ENTITY_INSTANCE
	| RT_ENTITY_COLLECTION
	| RT_BASE_TYPE_INSTANCE
	| RT_BASE_TYPE_COLLECTION
	| RT_ENUM_LITERAL
	| RT_BOOLEAN_INSTANCE
	| RT_BINARY_INSTANCE
	| RT_STRING_INSTANCE
	| RT_NUMERIC_INSTANCE
	| RT_DATE_INSTANCE
	| RT_TIME_INSTANCE
	| RT_TIMESTAMP_INSTANCE
	| RT_INPUT_SAME
	;

enum FunctionBaseType
	: BT_ENTITY_INSTANCE
	| BT_ENTITY_COLLECTION
	| BT_ENUM_LITERAL
	| BT_BOOLEAN_INSTANCE
	| BT_BINARY_INSTANCE
	| BT_STRING_INSTANCE
	| BT_NUMERIC_INSTANCE
	| BT_DATE_INSTANCE
	| BT_TIME_INSTANCE
	| BT_TIMESTAMP_INSTANCE
	| BT_BOOLEAN_TYPE
	| BT_BINARY_TYPE 
	| BT_STRING_TYPE
	| BT_NUMERIC_TYPE
	| BT_DATE_TYPE
	| BT_TIME_TYPE
	| BT_TIMESTAMP_TYPE
	;

// TODO: JNG-4185
enum FunctionParameterType
	: PT_ENTITY_INSTANCE
	| PT_ENTITY_COLLECTION
	| PT_ENTITY_TYPE
	| PT_ENUM_INSTANCE
	| PT_ENUM_LITERAL
	| PT_BOOLEAN_INSTANCE
	| PT_BOOLEAN_LITERAL
	| PT_BINARY_INSTANCE
	| PT_BINARY_LITERAL
	| PT_STRING_INSTANCE
	| PT_STRING_LITERAL
	| PT_NUMERIC_INSTANCE
	| PT_NUMERIC_LITERAL
	| PT_DATE_INSTANCE
	| PT_DATE_LITERAL
	| PT_TIME_INSTANCE
	| PT_TIME_LITERAL
	| PT_TIMESTAMP_INSTANCE
	| PT_TIMESTAMP_LITERAL
	| PT_INPUT_SAME
	;
 */
/*
FunctionDeclaration 
	: (
	LiteralFunctionDeclaration
	| LambdaFunctionDeclaration
	| SelectorFunctionDeclaration
	) returnTypes+=FunctionReturnType acceptedBaseTypes+=FunctionBaseType parameterDeclarations += FunctionParameterDeclaration
	;

LambdaFunctionDeclaration returns NamedFunctionDeclaration : {LambdaFunctionDeclaration} ;
LiteralFunctionDeclaration returns NamedFunctionDeclaration : {LiteralFunctionDeclaration}  ;
SelectorFunctionDeclaration returns NamedFunctionDeclaration : {SelectorFunctionDeclaration} ;


NamedFunctionDeclaration returns FunctionDeclaration : {NamedFunctionDeclaration} name = JSLID;

FunctionParameterDeclaration
    : {FunctionParameterDeclaration} Named Cardinality isRequired ?= 'true' functionParameterType = FunctionParameterType parameterPresentedForBaseTypes += FunctionBaseType;
 */  

	
Decimal returns ecore::EBigDecimal
	: NUMBER '.' NUMBER
	;

Integer returns ecore::EBigInteger
	: NUMBER
	;

EnumLiteralName
	: JSLID
    ;

QueryParameterName
	: JSLID
    ;

LocalName
	: (JSLID '::')? JSLID
    ;

ModelName
	: JSLID('::' JSLID)*
    ;

/****************************
 *	Terminals
 ****************************/

BLOCK_START
	: '{'
	;

BLOCK_END
	: '}'
	;

terminal fragment DIGIT
	: '0'..'9'
	;

terminal fragment ALPHABET
    : 'a'..'z' | 'A'..'Z'    	
    ;

terminal fragment NEWLINE
    : '\n' | '\r'   	
    ;

terminal TIMESTAMP
	: '`' DIGIT+ '-' DIGIT DIGIT '-' DIGIT DIGIT 'T' DIGIT DIGIT ':' DIGIT DIGIT (':' DIGIT DIGIT ('.' DIGIT+ )? )? ('Z' | ('+' | '-') DIGIT DIGIT ':' DIGIT DIGIT )'`'
	;

terminal TIME
	: '`' DIGIT DIGIT ':' DIGIT DIGIT (':' DIGIT DIGIT ('.' DIGIT+ )? )? '`'
	;

terminal DATE
	: '`' DIGIT+ '-' DIGIT DIGIT '-' DIGIT DIGIT '`'
	;

/*
terminal DECIMAL returns ecore::EBigDecimal
	: DIGIT+ '.' DIGIT+
	;
*/
 
terminal NUMBER
	: DIGIT+
	;

terminal ID
	: ALPHABET (ALPHABET | DIGIT)* | '`' ALPHABET (ALPHABET | DIGIT)* '`'
	;

terminal STRING
	: '"' ('\\' ('t'|'n'|'f'|'r'|'"'|'\\') | !('\\' | '"' | NEWLINE))* '"'
	;

terminal RAW_STRING
	: 'r"' (!('"' | NEWLINE))* '"'
	;

/*
terminal CONT_NL
	: '\\' (' ' | '\t')* '\r'? '\n'
	;
*/
 
terminal ML_COMMENT
	: '/*'->'*/'
	;

terminal SL_COMMENT
	: '//' !(NEWLINE)*
	;

terminal WS
	: (' '|'\t'|'\r'|'\n')+
	;

/*    
terminal WS
	: (' ' | '\t')+
	;

terminal NL
	: NEWLINE | ';'
	;
 */
 
 
