grammar hu.blackbelt.judo.meta.jsl.JslDsl hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate jsldsl "http://www.blackbelt.hu/judo/meta/jsl/JslDsl"
 
ModelDeclaration returns ModelDeclaration
    : {ModelDeclaration}
      annotations += AnnotationMark*
      'model' name = ModelName ';'+
      imports += ModelImportDeclaration*
	  (declarations += Declaration)*
    ;

JSLID : ID | 'boolean' | 'binary' | 'string' | 'numeric' | 'date' | 'time' | 'timestamp'
	       | 'regex' | 'precision' | 'scale'
	       | 'model' | 'import' | 'entity' | 'transfer' | 'export' | 'query' | 'type' | 'enum' | 'function' | 'lambda'
	       | 'field' | 'identifier' | 'derived' | 'relation' | 'constraint' | 'error'
	       | 'required' | 'as' | 'abstract' | 'extends' | 'opposite' | 'on' | 'onerror'
	       | 'collection' | 'declaration' | 'constant'
	       | 'implies' | 'or' | 'xor' | 'and' | 'div' | 'mod' 
	       | 'kB' | 'MB' | 'GB' | 'KiB' | 'MiB' | 'GiB'
	       | 'get' | 'create' | 'update' | 'delete' | 'insert' | 'remove'
	       
	       // 'self', 'true', 'false', 'not' are not included
	;

ModelImportDeclaration 
    : 'import' model = [ModelDeclaration | ModelName] ('as' alias = JSLID)? ';'+
	;

Declaration
	: (TypeDeclaration
	| ErrorDeclaration
	| QueryDeclaration
	| FunctionDeclaration
	| LambdaDeclaration
	| AnnotationDeclaration)
	  ';'*
	;


TypeDeclaration
	: PrimitiveDeclaration
	| ClassDeclaration
	;

PrimitiveDeclaration
	: EnumDeclaration
	| DataTypeDeclaration
    ;

ClassDeclaration
	: EntityDeclaration
//	| ControlDeclaration
	| ExportDeclaration
	| TransferDeclaration
	| ActorDeclaration
	;

/****************************
 *	Entity
 ****************************/
fragment Named
	: name = JSLID;

fragment Cardinality
    : isMany ?= '[]'
    ;

EntityDeclaration
	: {EntityDeclaration}
	  annotations += AnnotationMark*
	  'entity' isAbstract ?= 'abstract'? Named
	  ('extends' extends += [EntityDeclaration | ModelName] (',' extends += [EntityDeclaration | ModelName])*)?
	  (';' | BLOCK_START (members += EntityMemberDeclaration)* BLOCK_END)
	;


QueryDeclaration
	: 'query' (referenceType = [SingleType | ModelName] Cardinality?) Named
	  ('(' (parameters += QueryParameterDeclaration (',' parameters += QueryParameterDeclaration)*)? ')')
	  "=>" expression = Expression
	  ';'
	;

EntityMemberDeclaration
	: (EntityFieldDeclaration
	| EntityIdentifierDeclaration
	| EntityRelationDeclaration
	| EntityDerivedDeclaration
	| EntityQueryDeclaration
	| EntityOperationDeclaration
//	| ConstraintDeclaration
	)
	  ';'*
	;

EntityFieldDeclaration
	: annotations += AnnotationMark*
	  'field' (isRequired ?= 'required'? referenceType = [SingleType | ModelName] Cardinality?) Named
	  ('=' defaultExpression = Expression)? ';'
	;

EntityIdentifierDeclaration
	: annotations += AnnotationMark*
	  'identifier' isRequired ?= 'required'? referenceType = [PrimitiveDeclaration | ModelName] Named
	  ('=' defaultExpression = Expression)? ';'
	;

SingleType 
	: PrimitiveDeclaration
	| EntityDeclaration
	;


EntityDerivedDeclaration
	: annotations += AnnotationMark*
	  'derived' (referenceType = [SingleType | ModelName] Cardinality?) Named
	  "=>" expression = Expression ';'
	;

EntityQueryDeclaration
	: annotations += AnnotationMark*
	  'query' (referenceType = [SingleType | ModelName] Cardinality?) Named
	  ('(' (parameters += QueryParameterDeclaration (',' parameters += QueryParameterDeclaration)*)? ')')
	  "=>" expression = Expression ';'
	;
 
QueryParameterDeclaration
	: referenceType = [PrimitiveDeclaration | ModelName] Named ("=" default = Literal)?
	;

EntityRelationDeclaration
	: annotations += AnnotationMark*
	  'relation' (isRequired ?= 'required'? referenceType = [EntityDeclaration | ModelName] Cardinality?) Named
	  opposite = EntityRelationOpposite? ';'
	;

EntityRelationOpposite
	: EntityRelationOppositeInjected
	| EntityRelationOppositeReferenced
	;

EntityRelationOppositeInjected
	: 'opposite-add' Named Cardinality?
	;

EntityRelationOppositeReferenced
	: 'opposite' oppositeType = [EntityRelationDeclaration | LocalName]
	;

EntityOperationDeclaration
	: annotations += AnnotationMark*
	  'operation' static ?= 'static'?  (void ?= 'void' | return = EntityOperationReturnDeclaration) Named
	  ('(' (parameters += EntityOperationParameterDeclaration (',' parameters += EntityOperationParameterDeclaration)*)? ')')
	  (';' | BLOCK_START BLOCK_END )
	;

EntityOperationReturnDeclaration
	: referenceType = [SingleType | ModelName] Cardinality?
	;

EntityOperationParameterDeclaration
	: referenceType = [SingleType | ModelName] Cardinality? Named
	;

/****************************
 *	Control
 ****************************/
//
//ControlDeclaration
//	: {ControlDeclaration}
//	  annotations += AnnotationMark*
//	  'control' Named
//	  ('(' map = EntityMapDeclaration? ')')?
//	  BLOCK_START (members += ControlMemberDeclaration)* BLOCK_END
//	;
//
//ControlMemberDeclaration
//	: ControlOperationDeclaration
//	  ';'*
//	;
//
//ControlOperationDeclaration
//	: annotations += AnnotationMark*
//	  'operation' static ?= 'static'?  (void ?= 'void' | return = ControlOperationReturnDeclaration) Named
//	  ('(' (parameters += ControlOperationParameterDeclaration (',' parameters += ControlOperationParameterDeclaration)*)? ')')
//	  (';' | BLOCK_START BLOCK_END )
//	;
//
//ControlOperationReturnDeclaration
//	: referenceType = [SingleType | ModelName] Cardinality?
//	;
//
//ControlOperationParameterDeclaration
//	: referenceType = [SingleType | ModelName] Cardinality? Named
//	;


/****************************
 *	Export
 ****************************/

ExportDeclaration
	: {ExportDeclaration}
	  annotations += AnnotationMark*
	  'export' Named
	  ('(' map = EntityMapDeclaration? ')')?
	  (';' | BLOCK_START (members += ExportMemberDeclaration)* BLOCK_END)
	;

EntityMapDeclaration
	: entity = [EntityDeclaration | ModelName] Named   // if no name defined, the 'self' shall be default name
	;


ExportMemberDeclaration
	: ExportServiceDeclaration
	  ';'*
	;

ExportServiceDeclaration
	: ExportDataServiceDeclaration
	| ExportActionServiceDeclaration
	| ExportMappedServiceDeclaration
	;

ExportDataServiceDeclaration
	: annotations += AnnotationMark*
	  'service' static ?= 'static'? return = ExportServiceReturnDeclaration Cardinality? Named '=>' expression = Expression
	  ';'
	;

//ExportActionServiceDeclaration
//	: annotations += AnnotationMark*
//	  ('service' static ?= 'static'? | get ?= 'get' | create ?= 'create' static ?= 'static'? | update ?= 'update' | delete ?= 'delete' | insert ?= 'insert' | remove ?= 'remove')
//	  (void ?= 'void' | return = ExportServiceReturnDeclaration | alternateReturn = ExportServiceReturnAlternateDeclaration) Named
//	  (=> '(' parameter = ExportServiceParameterDeclaration? ')')
//	  (guards += ExportActionServiceGuardDeclaration*)
//	  (('=>' expression = Expression)? autoservice ?= ';' | BLOCK_START BLOCK_END )
//	;

ExportActionServiceDeclaration
	: annotations += AnnotationMark*
	  'service' static ?= 'static'?
	  (void ?= 'void' | return = ExportServiceReturnDeclaration | alternateReturn = ExportServiceReturnAlternateDeclaration) Named
	  '(' parameter = ExportServiceParameterDeclaration? ')'
	  (guards += ExportServiceGuardDeclaration*)
	  (autoservice ?= ';' | BLOCK_START BLOCK_END )
	;

ExportMappedServiceDeclaration
	: ExportGetServiceDeclaration
	| ExportCreateServiceDeclaration
	| ExportUpdateServiceDeclaration
	| ExportDeleteServiceDeclaration
	| ExportCreateElementServiceDeclaration
	| ExportInsertElementServiceDeclaration
	| ExportRemoveElementServiceDeclaration
	;

ExportGetServiceDeclaration
	: annotations += AnnotationMark*
	  'service' referenceType = [TransferDeclaration | ModelName] Named '('')'
	  'get'
	  (guards += ExportServiceGuardDeclaration*)
	  ';'
	;

ExportCreateServiceDeclaration
	: annotations += AnnotationMark*
	  'service' static ?= 'static'? referenceType = [TransferDeclaration | ModelName] Named '('')'
	  'create'
	  (guards += ExportServiceGuardDeclaration*)
	  ';'
	;

ExportUpdateServiceDeclaration
	: annotations += AnnotationMark*
	  'service' 'void' Named '(' parameterType = [TransferDeclaration | ModelName] ')'
	  'update'
	  (guards += ExportServiceGuardDeclaration*)
	  ';'
	;

ExportDeleteServiceDeclaration
	: annotations += AnnotationMark*
	  'service' 'void' Named '('  parameterType = [TransferDeclaration | ModelName]?  ')'
	  'delete'
	  (guards += ExportServiceGuardDeclaration*)
	  ';'
	;

ExportCreateElementServiceDeclaration
	: annotations += AnnotationMark*
	  'service' referenceType = [TransferDeclaration | ModelName] Named '('')'
	  'create' expression = Expression
	  (guards += ExportServiceGuardDeclaration*)
	  ';'
	;

ExportInsertElementServiceDeclaration
	: annotations += AnnotationMark*
	  'service' 'void' Named '('  parameterType = [TransferDeclaration | ModelName]  ')'
	  'insert' expression = Expression
	  (guards += ExportServiceGuardDeclaration*)
	  ';'
	;

ExportRemoveElementServiceDeclaration
	: annotations += AnnotationMark*
	  'service' 'void' Named '('  parameterType = [TransferDeclaration | ModelName]  ')'
	  'remove' expression = Expression
	  (guards += ExportServiceGuardDeclaration*)
	  ';'
	;

ExportServiceGuardDeclaration
	: 'guard' expression = Expression
	;

ExportServiceReturnAlternateDeclaration
	: '<' referenceTypes += ExportServiceReturnDeclaration ("|" referenceTypes += ExportServiceReturnDeclaration)+ '>'
	;

ExportServiceReturnDeclaration
	: referenceType = [Transferable | ModelName]
	;

ExportServiceParameterDeclaration
	: referenceType = [Transferable | ModelName] Named?
	;

Transferable
	: TransferDeclaration
	;

/****************************
 *	Transfer
 ****************************/

TransferDeclaration
	: {TransferDeclaration}
	  annotations += AnnotationMark*
	  'transfer' Named
	  ('(' map = EntityMapDeclaration? ')')?
	  (automap ?= ';' | BLOCK_START (members += TransferMemberDeclaration)* BLOCK_END)
	;

TransferMemberDeclaration
	: TransferFieldDeclaration
	  ';'*
	;

TransferFieldDeclaration
	: annotations += AnnotationMark*
	  'field' (referenceType = [TransferFieldType | ModelName] Cardinality?) Named
	  "=" expression = Expression
	  ';'
	;

TransferFieldType
	: PrimitiveDeclaration
	| TransferDeclaration
	;

/****************************
 *	Actor
 ****************************/

ActorDeclaration
	: {ActorDeclaration}
	  annotations += AnnotationMark*
	  'actor' Named
	  ('(' map = EntityMapDeclaration? ')')?
	  (('realm' realm = StringLiteral)? & ('identity' identity = Expression)? & (guards += ExportServiceGuardDeclaration*))
	  (';' | BLOCK_START (members += ActorMemberDeclaration)* BLOCK_END)
	;

ActorMemberDeclaration
	: ActorGrantDeclaration
	  ';'*
	;

ActorGrantDeclaration
	: annotations += AnnotationMark*
	  'grant' export = [ExportDeclaration | ModelName]
	  ';'
	;

/****************************
 *	Datatype
 ****************************/

DataTypeDeclaration
    : annotations += AnnotationMark*
      'type'
      (
		  primitive = 'boolean' Named
		| primitive = 'binary' Named '(' mimeTypes = ModifierMimeTypes ',' maxFileSize = ModifierMaxFileSize ')'
		| primitive = 'string' Named '(' minSize = ModifierMinSize ',' maxSize = ModifierMaxSize (',' regex = ModifierRegex)? ')'
		| primitive = 'numeric' Named '(' precision = ModifierPrecision ',' scale = ModifierScale ')'
		| primitive = 'date' Named
		| primitive = 'time' Named
		| primitive = 'timestamp' Named
      ) ';'
    ;

//BooleanPrimitive returns DataTypeDeclaration: primitive = 'boolean' Named;
//BinaryPrimitive returns DataTypeDeclaration : primitive = 'binary' Named;
//StringPrimitive returns DataTypeDeclaration : primitive = 'string' Named;
//NumericPrimitive returns DataTypeDeclaration : primitive = 'numeric' Named;
//DatePrimitive returns DataTypeDeclaration : primitive = 'date' Named;
//TimePrimitive returns DataTypeDeclaration : primitive = 'time' Named;
//TimestampPrimitive returns DataTypeDeclaration : primitive = 'timestamp' Named;



/****************************
 *	Enum
 ****************************/

EnumDeclaration
    : annotations += AnnotationMark*
      'enum' Named
      BLOCK_START (literals += EnumLiteral)* BLOCK_END
    ;

EnumLiteral
    : annotations += AnnotationMark*
      Named '=' value = Integer ';'+
    ;


ModifierMinSize
	: 'min-size' '=' value = Integer
	;

ModifierMaxSize
	: 'max-size' '=' value = Integer
	;

ModifierRegex
	: 'regex' '=' regex = StringLiteral
	;

ModifierPrecision
	: 'precision' '=' value = Integer
	;

ModifierScale
	: 'scale' '=' value = Integer
	;

ModifierMimeTypes
	: 'mime-types' '=' '[' values += MimeType (',' values += MimeType)* ']'
	;

MimeType
	: value = StringLiteral
	;

ModifierMaxFileSize
	: 'max-file-size' '=' numeric = Integer (unit = DataUnit)?
	;
	
enum DataUnit
	: KB = 'kB'
	| MB = 'MB'
	| GB = 'GB'
	| KiB = 'KiB'
	| MiB = 'MiB'
	| GiB = 'GiB'
	;

/****************************
 *	Expression
 ***************************/

Expression returns Expression:
    SwitchExpression;

SwitchExpression returns Expression
	: ImpliesExpression (=> ({TernaryOperation.condition=current} '?')
	  thenExpression=SwitchExpression ':'
      elseExpression=SwitchExpression)?
    ;

ImpliesExpression returns Expression
	: OrExpression (=> ({BinaryOperation.leftOperand=current} operator='implies') rightOperand=OrExpression)*
	;

OrExpression returns Expression
	: XorExpression (=> ({BinaryOperation.leftOperand=current} operator='or') rightOperand=XorExpression)*
	;

XorExpression returns Expression
	: AndExpression (=> ({BinaryOperation.leftOperand=current} operator='xor') rightOperand=AndExpression)*
	;

AndExpression returns Expression
	: EqualityExpression (=> ({BinaryOperation.leftOperand=current} operator='and') rightOperand=EqualityExpression)*
	;

EqualityExpression returns Expression
	: RelationalExpression (=> ({BinaryOperation.leftOperand=current} operator=('!='|'==')) rightOperand=RelationalExpression)*
	;

RelationalExpression returns Expression
	: AdditiveExpression (=> ({BinaryOperation.leftOperand=current} operator=('>=' | '<=' | '>' | '<')) rightOperand=AdditiveExpression)*
	;

AdditiveExpression returns Expression
	: MultiplicativeExpression (=> ({BinaryOperation.leftOperand=current} operator=('+'|'-')) rightOperand=MultiplicativeExpression)*
	;

MultiplicativeExpression returns Expression
	: ExponentExpression (=> ({BinaryOperation.leftOperand=current} operator=('*' | '/' | 'div' | 'mod')) rightOperand=ExponentExpression)*
	;

ExponentExpression returns Expression
	: UnaryOperation (=> ({BinaryOperation.leftOperand=current} operator='^') rightOperand=UnaryOperation)*
	;
 
UnaryOperation returns Expression
	: {UnaryOperation} operator='not' operand=UnaryOperation
	| Navigation
    ;

Navigation returns Expression
	: {Navigation} base = NavigationBase (features += Feature)*
	;

NavigationBase
	: Self
	| Parentheses
	| NavigationBaseDeclarationReference
	| QueryCall
	| Literal
	;

Self
	: isSelf ?= 'self'		
	;

Parentheses
	: '(' => expression = Expression ')'		
	;
 
NavigationBaseDeclarationReference
	: {NavigationBaseDeclarationReference} reference = [NavigationBaseDeclaration | ModelName]
 	;
 
NavigationBaseDeclaration
	: EntityDeclaration
	| LambdaVariable
	| QueryParameterDeclaration
	| PrimitiveDeclaration
	| EntityMapDeclaration
	;

QueryCall
	: declaration = [QueryDeclaration | ModelName ] '(' (arguments += QueryArgument (',' arguments += QueryArgument)*)? ')'
	;

Feature
	: MemberReference
	| Call
	;

MemberReference
    : '.' member = [NavigationTarget | LocalName]
    ;

Call
	: EntityQueryCall
	| FunctionCall
	| LambdaCall
	;

EntityQueryCall
	: '.' declaration = [EntityQueryDeclaration | LocalName ] => '(' (arguments += QueryArgument (',' arguments += QueryArgument)*)? ')'
	;

FunctionCall
	: '!' declaration = [FunctionDeclaration | LocalName ] '(' (arguments += FunctionArgument (',' arguments += FunctionArgument)*)? ')'
	;

FunctionArgument
    : declaration = [FunctionParameterDeclaration | LocalName ] '=' expression = Expression
    ;

QueryArgument
    : declaration = [QueryParameterDeclaration | LocalName ] '=' expression = Expression
    ;

LambdaCall
	: '!' declaration = [LambdaDeclaration | LocalName ] '(' variable = LambdaVariable => '|' lambdaExpression = Expression ')';

LambdaVariable
    : {LambdaVariable} Named    	
    ;


/****************************
 *	Function
 ***************************/

FunctionDeclaration
	: 'function' returnType = TypeDescription Named '(' (parameters += FunctionParameterDeclaration (',' parameters += FunctionParameterDeclaration)*)? ')' 'on' baseType = TypeDescription ';'
	;

FunctionParameterDeclaration
	: isRequired ?= 'required'? description = TypeDescription Named
	;

TypeDescription
	: {TypeDescription} type = Type
	| collection ?= 'collection' '<' type = Type '>'
	| declaration ?= 'declaration' '<' type = Type '>'
	| constant ?= 'constant' '<' type = Type '>'
	;

Type
	: 'boolean' | 'binary' | 'string' | 'numeric' | 'date' | 'time' | 'timestamp' | 'enum' | 'entity'
	;

LambdaDeclaration 
	: 'lambda' returnType = TypeDescription Named '(' (expressionType = TypeDescription)? ')' ';'
	;


/****************************
 *	Annotation
 ***************************/

AnnotationDeclaration
	: 'annotation' Named ('(' (parameters += AnnotationParameterDeclaration (',' parameters += AnnotationParameterDeclaration)*)? ')')?
	  ('on' targets += AnnotationTarget (',' targets += AnnotationTarget)*)?
	  (';' | BLOCK_START annotations += AnnotationMark* BLOCK_END )
	;

AnnotationParameterDeclaration
	: referenceType = AnnotationParameterType Named
	;

AnnotationParameterType
	: type = ('boolean'	| 'string' | 'numeric')
	;

AnnotationTarget
	: model ?= 'model'
	| type ?= 'type'
	| enumeration ?= 'enum'
	| 'enum' '::' enumLiteral ?= 'literal'
	| entity ?= 'entity'
	| 'entity' '::' entityField ?= 'field'
	| 'entity' '::' entityIdentifier ?= 'identifier'
	| 'entity' '::' entityQuery ?= 'query'
	| 'entity' '::' entityRelation ?= 'relation'
	| 'entity' '::' entityDerived ?= 'derived'
	| 'entity' '::' entityOperation ?= 'operation'
	| transfer ?= 'transfer'
	| 'transfer' '::' transferField ?= 'field'
	| export ?= 'export'
	| 'export' '::' exportService ?= 'service'
	| actor ?= 'actor'
	| 'actor' '::' actorGrant ?= 'grant'
	| query ?= 'query'
	;

AnnotationMark
	: '@' declaration = [AnnotationDeclaration | ModelName] ('(' arguments += AnnotationArgument? (',' arguments += AnnotationArgument?)* ')')?
	;

AnnotationArgument
    : declaration = [AnnotationParameterDeclaration | LocalName] '=' (literal = Literal | reference = [AnnotationParameterDeclaration | LocalName])
    ;

EnumLiteralReference
    : {EnumLiteralReference} enumDeclaration = [EnumDeclaration | ModelName] '#' enumLiteral = [EnumLiteral | EnumLiteralName ]    	
    ;

NavigationTarget
    : EntityFieldDeclaration
	| EntityIdentifierDeclaration
	| EntityRelationDeclaration
	| EntityDerivedDeclaration
    | EntityRelationOppositeInjected
    ;

Literal
	: BooleanLiteral
	| NumberLiteral
	| StringLiteral
	| TemporalLiteral
	| EnumLiteralReference
	;

BooleanLiteral
	: {BooleanLiteral} ('false' | isTrue?='true')
	;

NumberLiteral
	: IntegerLiteral
	| DecimalLiteral
	;

IntegerLiteral hidden()
	: (minus ?= "-" | "+")? value=Integer
	;

DecimalLiteral hidden()
	: (minus ?= "-" | "+")? value=Decimal
	;

StringLiteral
	: {EscapedStringLiteral} value=STRING
	| {RawStringLiteral} value=RAW_STRING
	;

TemporalLiteral
	: {DateLiteral} value=DATE
	| {TimeStampLiteral} value=TIMESTAMP
	| {TimeLiteral} value=TIME
	;


 // ************************************
 // For later use
 // ************************************
 
 ConstraintDeclaration
	: 'constraint' Named expression = Expression ('onerror' error = CreateError)? ';'
	;

 
/****************************
 *	Error
 ****************************/

ErrorDeclaration
	: 'error' Named ('extends' extends = [ErrorDeclaration | ModelName])?
	  (';' | BLOCK_START (fields += ErrorField)* BLOCK_END)
	;

ErrorField
	: 'field' referenceType = [PrimitiveDeclaration | ModelName] Named
	  ('=' defaultExpression = Expression)? ';'+
	;

CreateError
	: errorDeclarationType=[ErrorDeclaration | ModelName] ('(' (parameters+=ThrowParameter (',' parameters+=ThrowParameter)*)? ')')?
	;

ThrowParameter
	: errorFieldType=[ErrorField | LocalName] '=' expession=Literal;


Decimal returns ecore::EBigDecimal
	: NUMBER '.' NUMBER
	;

Integer returns ecore::EBigInteger
	: NUMBER
	;

EnumLiteralName
	: JSLID
    ;

LocalName
	: JSLID
    ;

ModelName
	: JSLID('::' JSLID)*
    ;

/****************************
 *	Terminals
 ****************************/

BLOCK_START
	: '{'
	;

BLOCK_END
	: '}'
	;

terminal fragment DIGIT
	: '0'..'9'
	;

terminal fragment ALPHABET
    : 'a'..'z' | 'A'..'Z'    	
    ;

terminal fragment NEWLINE
    : '\n' | '\r'   	
    ;

terminal TIMESTAMP
	: '`' DIGIT+ '-' DIGIT DIGIT '-' DIGIT DIGIT 'T' DIGIT DIGIT ':' DIGIT DIGIT (':' DIGIT DIGIT ('.' DIGIT+ )? )? ('Z' | ('+' | '-') DIGIT DIGIT ':' DIGIT DIGIT )'`'
	;

terminal TIME
	: '`' DIGIT DIGIT ':' DIGIT DIGIT (':' DIGIT DIGIT ('.' DIGIT+ )? )? '`'
	;

terminal DATE
	: '`' DIGIT+ '-' DIGIT DIGIT '-' DIGIT DIGIT '`'
	;
 
terminal NUMBER
	: DIGIT+
	;

terminal ID
	: ALPHABET (ALPHABET | DIGIT)* | '`' ALPHABET (ALPHABET | DIGIT)* '`'
	;

terminal STRING
	: '"' ('\\' ('t'|'n'|'f'|'r'|'"'|'\\') | !('\\' | '"' | NEWLINE))* '"'
	;

terminal RAW_STRING
	: 'r"' (!('"' | NEWLINE))* '"'
	;
 
terminal ML_COMMENT
	: '/*'->'*/'
	;

terminal SL_COMMENT
	: '//' !(NEWLINE)*
	;

terminal WS
	: (' '|'\t'|'\r'|'\n')+
	;
