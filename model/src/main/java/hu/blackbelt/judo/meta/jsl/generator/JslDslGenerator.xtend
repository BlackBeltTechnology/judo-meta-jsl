/*
 * generated by Xtext 2.16.0
 */
package hu.blackbelt.judo.meta.jsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.emf.common.util.URI
import com.google.inject.Inject
import hu.blackbelt.judo.meta.jsl.jsldsl.ModelDeclaration
import org.slf4j.Logger
import org.slf4j.LoggerFactory

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class JslDslGenerator extends AbstractGenerator {
	Logger log = LoggerFactory.getLogger(JslDslGenerator);
		
	@Inject
	JsldslDefaultPlantUMLDiagramGenerator plantUmlGenerator
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
			//val URI plantUML = URI.createFileURI(resource.URI.toFileString + ".plantuml");
			//fsa.generateFile(plantUML.toFileString, "sdasdsd");
			
			val String sURI = resource.URI.toPlatformString(true);
			val String withoutProject = sURI.substring(sURI.indexOf('/', 1) + 1)
			
			log.debug("- " + withoutProject)
			
//			fsa.generateFile(withoutProject + ".plantuml", 
//				plantUmlGenerator.generate(resource.allContents.findFirst[m | m instanceof ModelDeclaration] as ModelDeclaration, null));

			
	//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
	//			resource.allContents
	//				.filter(Greeting)
	//				.map[name]
	//				.join(', '))
			
		
	}
}
